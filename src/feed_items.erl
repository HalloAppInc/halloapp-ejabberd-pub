%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.13.0
-module(feed_items).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_pb_feed_item.Action'/1, 'enum_value_by_symbol_pb_feed_item.Action'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("feed_items.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'pb_feed_item.Action'() :: publish | retract.
-export_type(['pb_feed_item.Action'/0]).

%% message types
-type pb_feedpost() :: #pb_feedpost{}.

-type pb_comment() :: #pb_comment{}.

-type pb_feed_item() :: #pb_feed_item{}.

-type pb_feed_node_items() :: #pb_feed_node_items{}.

-export_type(['pb_feedpost'/0, 'pb_comment'/0, 'pb_feed_item'/0, 'pb_feed_node_items'/0]).

-spec encode_msg(#pb_feedpost{} | #pb_comment{} | #pb_feed_item{} | #pb_feed_node_items{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 -> encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#pb_feedpost{} | #pb_comment{} | #pb_feed_item{} | #pb_feed_node_items{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) -> encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts) when tuple_size(Msg) >= 1, is_list(Opts) -> encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#pb_feedpost{} | #pb_comment{} | #pb_feed_item{} | #pb_feed_node_items{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      pb_feedpost -> encode_msg_pb_feedpost(id(Msg, TrUserData), TrUserData);
      pb_comment -> encode_msg_pb_comment(id(Msg, TrUserData), TrUserData);
      pb_feed_item -> encode_msg_pb_feed_item(id(Msg, TrUserData), TrUserData);
      pb_feed_node_items -> encode_msg_pb_feed_node_items(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_pb_feedpost(Msg, TrUserData) -> encode_msg_pb_feedpost(Msg, <<>>, TrUserData).


encode_msg_pb_feedpost(#pb_feedpost{id = F1, payload = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case iolist_size(TrF2) of
	       0 -> B1;
	       _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
	     end
	   end
    end.

encode_msg_pb_comment(Msg, TrUserData) -> encode_msg_pb_comment(Msg, <<>>, TrUserData).


encode_msg_pb_comment(#pb_comment{id = F1, publisher_uid = F2, publisher_name = F3, feedpost_id = F4, payload = F5}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case is_empty_string(TrF3) of
		    true -> B2;
		    false -> e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  case is_empty_string(TrF4) of
		    true -> B3;
		    false -> e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
		  end
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     case iolist_size(TrF5) of
	       0 -> B4;
	       _ -> e_type_bytes(TrF5, <<B4/binary, 42>>, TrUserData)
	     end
	   end
    end.

encode_msg_pb_feed_item(Msg, TrUserData) -> encode_msg_pb_feed_item(Msg, <<>>, TrUserData).


encode_msg_pb_feed_item(#pb_feed_item{action = F1, timestamp = F2, uid = F3, item = F4}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= publish; TrF1 =:= 0 -> Bin;
		     true -> 'e_enum_pb_feed_item.Action'(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true -> e_type_int64(TrF3, <<B2/binary, 24>>, TrUserData)
		  end
		end
	 end,
    if F4 =:= undefined -> B3;
       true ->
	   case id(F4, TrUserData) of
	     {feedpost, TF4} -> begin TrTF4 = id(TF4, TrUserData), e_mfield_pb_feed_item_feedpost(TrTF4, <<B3/binary, 34>>, TrUserData) end;
	     {comment, TF4} -> begin TrTF4 = id(TF4, TrUserData), e_mfield_pb_feed_item_comment(TrTF4, <<B3/binary, 42>>, TrUserData) end
	   end
    end.

encode_msg_pb_feed_node_items(Msg, TrUserData) -> encode_msg_pb_feed_node_items(Msg, <<>>, TrUserData).


encode_msg_pb_feed_node_items(#pb_feed_node_items{uid = F1, items = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true -> e_field_pb_feed_node_items_items(TrF2, B1, TrUserData)
      end
    end.

e_mfield_pb_feed_item_feedpost(Msg, Bin, TrUserData) -> SubBin = encode_msg_pb_feedpost(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

e_mfield_pb_feed_item_comment(Msg, Bin, TrUserData) -> SubBin = encode_msg_pb_comment(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

e_mfield_pb_feed_node_items_items(Msg, Bin, TrUserData) -> SubBin = encode_msg_pb_feed_item(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

e_field_pb_feed_node_items_items([Elem | Rest], Bin, TrUserData) -> Bin2 = <<Bin/binary, 18>>, Bin3 = e_mfield_pb_feed_node_items_items(id(Elem, TrUserData), Bin2, TrUserData), e_field_pb_feed_node_items_items(Rest, Bin3, TrUserData);
e_field_pb_feed_node_items_items([], Bin, _TrUserData) -> Bin.

'e_enum_pb_feed_item.Action'(publish, Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_pb_feed_item.Action'(retract, Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_pb_feed_item.Action'(V, Bin, _TrUserData) -> e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) -> <<N:64/unsigned-native>> = <<Value:64/signed-native>>, e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) -> <<N:64/unsigned-native>> = <<Value:64/signed-native>>, e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) -> Utf8 = unicode:characters_to_binary(S), Bin2 = e_varint(byte_size(Utf8), Bin), <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) -> Bin2 = e_varint(byte_size(Bytes), Bin), <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) -> BytesBin = iolist_to_binary(Bytes), Bin2 = e_varint(byte_size(BytesBin), Bin), <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) -> Bin2 = <<Bin/binary, (N band 127 bor 128)>>, e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) -> not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B) when is_binary(B), byte_size(B) =/= 0 -> true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) -> TrUserData = proplists:get_value(user_data, Opts), decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(pb_feedpost, Bin, TrUserData) -> id(decode_msg_pb_feedpost(Bin, TrUserData), TrUserData);
decode_msg_2_doit(pb_comment, Bin, TrUserData) -> id(decode_msg_pb_comment(Bin, TrUserData), TrUserData);
decode_msg_2_doit(pb_feed_item, Bin, TrUserData) -> id(decode_msg_pb_feed_item(Bin, TrUserData), TrUserData);
decode_msg_2_doit(pb_feed_node_items, Bin, TrUserData) -> id(decode_msg_pb_feed_node_items(Bin, TrUserData), TrUserData).



decode_msg_pb_feedpost(Bin, TrUserData) -> dfp_read_field_def_pb_feedpost(Bin, 0, 0, id([], TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_pb_feedpost(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_pb_feedpost_id(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_pb_feedpost(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_pb_feedpost_payload(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_pb_feedpost(<<>>, 0, 0, F@_1, F@_2, _) -> #pb_feedpost{id = F@_1, payload = F@_2};
dfp_read_field_def_pb_feedpost(Other, Z1, Z2, F@_1, F@_2, TrUserData) -> dg_read_field_def_pb_feedpost(Other, Z1, Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_pb_feedpost(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_pb_feedpost(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_pb_feedpost(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_pb_feedpost_id(Rest, 0, 0, F@_1, F@_2, TrUserData);
      18 -> d_field_pb_feedpost_payload(Rest, 0, 0, F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_pb_feedpost(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_pb_feedpost(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 -> skip_length_delimited_pb_feedpost(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    3 -> skip_group_pb_feedpost(Rest, Key bsr 3, 0, F@_1, F@_2, TrUserData);
	    5 -> skip_32_pb_feedpost(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_pb_feedpost(<<>>, 0, 0, F@_1, F@_2, _) -> #pb_feedpost{id = F@_1, payload = F@_2}.

d_field_pb_feedpost_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_pb_feedpost_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_pb_feedpost_id(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end, dfp_read_field_def_pb_feedpost(RestF, 0, 0, NewFValue, F@_2, TrUserData).

d_field_pb_feedpost_payload(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_pb_feedpost_payload(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_pb_feedpost_payload(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end, dfp_read_field_def_pb_feedpost(RestF, 0, 0, F@_1, NewFValue, TrUserData).

skip_varint_pb_feedpost(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> skip_varint_pb_feedpost(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_pb_feedpost(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_pb_feedpost(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_pb_feedpost(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_pb_feedpost(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_pb_feedpost(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_pb_feedpost(Rest2, 0, 0, F@_1, F@_2, TrUserData).

skip_group_pb_feedpost(Bin, FNum, Z2, F@_1, F@_2, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_pb_feedpost(Rest, 0, Z2, F@_1, F@_2, TrUserData).

skip_32_pb_feedpost(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_pb_feedpost(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_64_pb_feedpost(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_pb_feedpost(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

decode_msg_pb_comment(Bin, TrUserData) -> dfp_read_field_def_pb_comment(Bin, 0, 0, id([], TrUserData), id(0, TrUserData), id([], TrUserData), id([], TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_pb_comment(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_pb_comment_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_pb_comment(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_pb_comment_publisher_uid(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_pb_comment(<<26, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_pb_comment_publisher_name(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_pb_comment(<<34, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_pb_comment_feedpost_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_pb_comment(<<42, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_pb_comment_payload(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_pb_comment(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, _) -> #pb_comment{id = F@_1, publisher_uid = F@_2, publisher_name = F@_3, feedpost_id = F@_4, payload = F@_5};
dfp_read_field_def_pb_comment(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dg_read_field_def_pb_comment(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_pb_comment(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 32 - 7 -> dg_read_field_def_pb_comment(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_pb_comment(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_pb_comment_id(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
      16 -> d_field_pb_comment_publisher_uid(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
      26 -> d_field_pb_comment_publisher_name(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
      34 -> d_field_pb_comment_feedpost_id(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
      42 -> d_field_pb_comment_payload(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_pb_comment(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
	    1 -> skip_64_pb_comment(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
	    2 -> skip_length_delimited_pb_comment(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
	    3 -> skip_group_pb_comment(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
	    5 -> skip_32_pb_comment(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
	  end
    end;
dg_read_field_def_pb_comment(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, _) -> #pb_comment{id = F@_1, publisher_uid = F@_2, publisher_name = F@_3, feedpost_id = F@_4, payload = F@_5}.

d_field_pb_comment_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_pb_comment_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_pb_comment_id(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_pb_comment(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_pb_comment_publisher_uid(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_pb_comment_publisher_uid(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_pb_comment_publisher_uid(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest}, dfp_read_field_def_pb_comment(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_pb_comment_publisher_name(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_pb_comment_publisher_name(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_pb_comment_publisher_name(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_pb_comment(RestF, 0, 0, F@_1, F@_2, NewFValue, F@_4, F@_5, TrUserData).

d_field_pb_comment_feedpost_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_pb_comment_feedpost_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_pb_comment_feedpost_id(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_pb_comment(RestF, 0, 0, F@_1, F@_2, F@_3, NewFValue, F@_5, TrUserData).

d_field_pb_comment_payload(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_pb_comment_payload(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_pb_comment_payload(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end, dfp_read_field_def_pb_comment(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, NewFValue, TrUserData).

skip_varint_pb_comment(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> skip_varint_pb_comment(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_varint_pb_comment(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_pb_comment(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_pb_comment(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> skip_length_delimited_pb_comment(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_length_delimited_pb_comment(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_pb_comment(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_pb_comment(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_pb_comment(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_pb_comment(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_pb_comment(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_64_pb_comment(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_pb_comment(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

decode_msg_pb_feed_item(Bin, TrUserData) -> dfp_read_field_def_pb_feed_item(Bin, 0, 0, id(publish, TrUserData), id(0, TrUserData), id(0, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_pb_feed_item(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_pb_feed_item_action(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_pb_feed_item(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_pb_feed_item_timestamp(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_pb_feed_item(<<24, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_pb_feed_item_uid(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_pb_feed_item(<<34, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_pb_feed_item_feedpost(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_pb_feed_item(<<42, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_pb_feed_item_comment(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_pb_feed_item(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, _) -> #pb_feed_item{action = F@_1, timestamp = F@_2, uid = F@_3, item = F@_4};
dfp_read_field_def_pb_feed_item(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dg_read_field_def_pb_feed_item(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_pb_feed_item(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> dg_read_field_def_pb_feed_item(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_pb_feed_item(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_pb_feed_item_action(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
      16 -> d_field_pb_feed_item_timestamp(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
      24 -> d_field_pb_feed_item_uid(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
      34 -> d_field_pb_feed_item_feedpost(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
      42 -> d_field_pb_feed_item_comment(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_pb_feed_item(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
	    1 -> skip_64_pb_feed_item(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
	    2 -> skip_length_delimited_pb_feed_item(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
	    3 -> skip_group_pb_feed_item(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
	    5 -> skip_32_pb_feed_item(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData)
	  end
    end;
dg_read_field_def_pb_feed_item(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, _) -> #pb_feed_item{action = F@_1, timestamp = F@_2, uid = F@_3, item = F@_4}.

d_field_pb_feed_item_action(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_pb_feed_item_action(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_pb_feed_item_action(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_pb_feed_item.Action'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_pb_feed_item(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, TrUserData).

d_field_pb_feed_item_timestamp(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_pb_feed_item_timestamp(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_pb_feed_item_timestamp(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest}, dfp_read_field_def_pb_feed_item(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, TrUserData).

d_field_pb_feed_item_uid(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_pb_feed_item_uid(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_pb_feed_item_uid(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest}, dfp_read_field_def_pb_feed_item(RestF, 0, 0, F@_1, F@_2, NewFValue, F@_4, TrUserData).

d_field_pb_feed_item_feedpost(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_pb_feed_item_feedpost(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_pb_feed_item_feedpost(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_pb_feedpost(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_pb_feed_item(RestF, 0, 0, F@_1, F@_2, F@_3,
				    case Prev of
				      undefined -> id({feedpost, NewFValue}, TrUserData);
				      {feedpost, MVPrev} -> id({feedpost, merge_msg_pb_feedpost(MVPrev, NewFValue, TrUserData)}, TrUserData);
				      _ -> id({feedpost, NewFValue}, TrUserData)
				    end,
				    TrUserData).

d_field_pb_feed_item_comment(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_pb_feed_item_comment(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_pb_feed_item_comment(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_pb_comment(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_pb_feed_item(RestF, 0, 0, F@_1, F@_2, F@_3,
				    case Prev of
				      undefined -> id({comment, NewFValue}, TrUserData);
				      {comment, MVPrev} -> id({comment, merge_msg_pb_comment(MVPrev, NewFValue, TrUserData)}, TrUserData);
				      _ -> id({comment, NewFValue}, TrUserData)
				    end,
				    TrUserData).

skip_varint_pb_feed_item(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> skip_varint_pb_feed_item(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_pb_feed_item(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_pb_feed_item(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_pb_feed_item(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> skip_length_delimited_pb_feed_item(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_pb_feed_item(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_pb_feed_item(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_pb_feed_item(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_pb_feed_item(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_pb_feed_item(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_pb_feed_item(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_pb_feed_item(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_pb_feed_item(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

decode_msg_pb_feed_node_items(Bin, TrUserData) -> dfp_read_field_def_pb_feed_node_items(Bin, 0, 0, id(0, TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_pb_feed_node_items(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_pb_feed_node_items_uid(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_pb_feed_node_items(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_pb_feed_node_items_items(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_pb_feed_node_items(<<>>, 0, 0, F@_1, R1, TrUserData) -> #pb_feed_node_items{uid = F@_1, items = lists_reverse(R1, TrUserData)};
dfp_read_field_def_pb_feed_node_items(Other, Z1, Z2, F@_1, F@_2, TrUserData) -> dg_read_field_def_pb_feed_node_items(Other, Z1, Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_pb_feed_node_items(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_pb_feed_node_items(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_pb_feed_node_items(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_pb_feed_node_items_uid(Rest, 0, 0, F@_1, F@_2, TrUserData);
      18 -> d_field_pb_feed_node_items_items(Rest, 0, 0, F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_pb_feed_node_items(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_pb_feed_node_items(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 -> skip_length_delimited_pb_feed_node_items(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    3 -> skip_group_pb_feed_node_items(Rest, Key bsr 3, 0, F@_1, F@_2, TrUserData);
	    5 -> skip_32_pb_feed_node_items(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_pb_feed_node_items(<<>>, 0, 0, F@_1, R1, TrUserData) -> #pb_feed_node_items{uid = F@_1, items = lists_reverse(R1, TrUserData)}.

d_field_pb_feed_node_items_uid(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_pb_feed_node_items_uid(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_pb_feed_node_items_uid(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest}, dfp_read_field_def_pb_feed_node_items(RestF, 0, 0, NewFValue, F@_2, TrUserData).

d_field_pb_feed_node_items_items(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_pb_feed_node_items_items(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_pb_feed_node_items_items(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_pb_feed_item(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_pb_feed_node_items(RestF, 0, 0, F@_1, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_pb_feed_node_items(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> skip_varint_pb_feed_node_items(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_pb_feed_node_items(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_pb_feed_node_items(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_pb_feed_node_items(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_pb_feed_node_items(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_pb_feed_node_items(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_pb_feed_node_items(Rest2, 0, 0, F@_1, F@_2, TrUserData).

skip_group_pb_feed_node_items(Bin, FNum, Z2, F@_1, F@_2, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_pb_feed_node_items(Rest, 0, Z2, F@_1, F@_2, TrUserData).

skip_32_pb_feed_node_items(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_pb_feed_node_items(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_64_pb_feed_node_items(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_pb_feed_node_items(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

'd_enum_pb_feed_item.Action'(0) -> publish;
'd_enum_pb_feed_item.Action'(1) -> retract;
'd_enum_pb_feed_item.Action'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) when element(1, Prev) =:= element(1, New) -> merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) -> merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts) when element(1, Prev) =:= element(1, New), is_list(Opts) -> merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      pb_feedpost -> merge_msg_pb_feedpost(Prev, New, TrUserData);
      pb_comment -> merge_msg_pb_comment(Prev, New, TrUserData);
      pb_feed_item -> merge_msg_pb_feed_item(Prev, New, TrUserData);
      pb_feed_node_items -> merge_msg_pb_feed_node_items(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_pb_feedpost/3}).
merge_msg_pb_feedpost(#pb_feedpost{id = PFid, payload = PFpayload}, #pb_feedpost{id = NFid, payload = NFpayload}, _) ->
    #pb_feedpost{id =
		     if NFid =:= undefined -> PFid;
			true -> NFid
		     end,
		 payload =
		     if NFpayload =:= undefined -> PFpayload;
			true -> NFpayload
		     end}.

-compile({nowarn_unused_function,merge_msg_pb_comment/3}).
merge_msg_pb_comment(#pb_comment{id = PFid, publisher_uid = PFpublisher_uid, publisher_name = PFpublisher_name, feedpost_id = PFfeedpost_id, payload = PFpayload},
		     #pb_comment{id = NFid, publisher_uid = NFpublisher_uid, publisher_name = NFpublisher_name, feedpost_id = NFfeedpost_id, payload = NFpayload}, _) ->
    #pb_comment{id =
		    if NFid =:= undefined -> PFid;
		       true -> NFid
		    end,
		publisher_uid =
		    if NFpublisher_uid =:= undefined -> PFpublisher_uid;
		       true -> NFpublisher_uid
		    end,
		publisher_name =
		    if NFpublisher_name =:= undefined -> PFpublisher_name;
		       true -> NFpublisher_name
		    end,
		feedpost_id =
		    if NFfeedpost_id =:= undefined -> PFfeedpost_id;
		       true -> NFfeedpost_id
		    end,
		payload =
		    if NFpayload =:= undefined -> PFpayload;
		       true -> NFpayload
		    end}.

-compile({nowarn_unused_function,merge_msg_pb_feed_item/3}).
merge_msg_pb_feed_item(#pb_feed_item{action = PFaction, timestamp = PFtimestamp, uid = PFuid, item = PFitem}, #pb_feed_item{action = NFaction, timestamp = NFtimestamp, uid = NFuid, item = NFitem}, TrUserData) ->
    #pb_feed_item{action =
		      if NFaction =:= undefined -> PFaction;
			 true -> NFaction
		      end,
		  timestamp =
		      if NFtimestamp =:= undefined -> PFtimestamp;
			 true -> NFtimestamp
		      end,
		  uid =
		      if NFuid =:= undefined -> PFuid;
			 true -> NFuid
		      end,
		  item =
		      case {PFitem, NFitem} of
			{{feedpost, OPFitem}, {feedpost, ONFitem}} -> {feedpost, merge_msg_pb_feedpost(OPFitem, ONFitem, TrUserData)};
			{{comment, OPFitem}, {comment, ONFitem}} -> {comment, merge_msg_pb_comment(OPFitem, ONFitem, TrUserData)};
			{_, undefined} -> PFitem;
			_ -> NFitem
		      end}.

-compile({nowarn_unused_function,merge_msg_pb_feed_node_items/3}).
merge_msg_pb_feed_node_items(#pb_feed_node_items{uid = PFuid, items = PFitems}, #pb_feed_node_items{uid = NFuid, items = NFitems}, TrUserData) ->
    #pb_feed_node_items{uid =
			    if NFuid =:= undefined -> PFuid;
			       true -> NFuid
			    end,
			items =
			    if PFitems /= undefined, NFitems /= undefined -> 'erlang_++'(PFitems, NFitems, TrUserData);
			       PFitems == undefined -> NFitems;
			       NFitems == undefined -> PFitems
			    end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), []);
verify_msg(X) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      pb_feedpost -> v_msg_pb_feedpost(Msg, [MsgName], TrUserData);
      pb_comment -> v_msg_pb_comment(Msg, [MsgName], TrUserData);
      pb_feed_item -> v_msg_pb_feed_item(Msg, [MsgName], TrUserData);
      pb_feed_node_items -> v_msg_pb_feed_node_items(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_pb_feedpost/3}).
-dialyzer({nowarn_function,v_msg_pb_feedpost/3}).
v_msg_pb_feedpost(#pb_feedpost{id = F1, payload = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [payload | Path], TrUserData)
    end,
    ok;
v_msg_pb_feedpost(X, Path, _TrUserData) -> mk_type_error({expected_msg, pb_feedpost}, X, Path).

-compile({nowarn_unused_function,v_msg_pb_comment/3}).
-dialyzer({nowarn_function,v_msg_pb_comment/3}).
v_msg_pb_comment(#pb_comment{id = F1, publisher_uid = F2, publisher_name = F3, feedpost_id = F4, payload = F5}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, [publisher_uid | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [publisher_name | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [feedpost_id | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_bytes(F5, [payload | Path], TrUserData)
    end,
    ok;
v_msg_pb_comment(X, Path, _TrUserData) -> mk_type_error({expected_msg, pb_comment}, X, Path).

-compile({nowarn_unused_function,v_msg_pb_feed_item/3}).
-dialyzer({nowarn_function,v_msg_pb_feed_item/3}).
v_msg_pb_feed_item(#pb_feed_item{action = F1, timestamp = F2, uid = F3, item = F4}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> 'v_enum_pb_feed_item.Action'(F1, [action | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, [timestamp | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_int64(F3, [uid | Path], TrUserData)
    end,
    case F4 of
      undefined -> ok;
      {feedpost, OF4} -> v_msg_pb_feedpost(OF4, [feedpost, item | Path], TrUserData);
      {comment, OF4} -> v_msg_pb_comment(OF4, [comment, item | Path], TrUserData);
      _ -> mk_type_error(invalid_oneof, F4, [item | Path])
    end,
    ok;
v_msg_pb_feed_item(X, Path, _TrUserData) -> mk_type_error({expected_msg, pb_feed_item}, X, Path).

-compile({nowarn_unused_function,v_msg_pb_feed_node_items/3}).
-dialyzer({nowarn_function,v_msg_pb_feed_node_items/3}).
v_msg_pb_feed_node_items(#pb_feed_node_items{uid = F1, items = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int64(F1, [uid | Path], TrUserData)
    end,
    if is_list(F2) -> _ = [v_msg_pb_feed_item(Elem, [items | Path], TrUserData) || Elem <- F2], ok;
       true -> mk_type_error({invalid_list_of, {msg, pb_feed_item}}, F2, [items | Path])
    end,
    ok;
v_msg_pb_feed_node_items(X, Path, _TrUserData) -> mk_type_error({expected_msg, pb_feed_node_items}, X, Path).

-compile({nowarn_unused_function,'v_enum_pb_feed_item.Action'/3}).
-dialyzer({nowarn_function,'v_enum_pb_feed_item.Action'/3}).
'v_enum_pb_feed_item.Action'(publish, _Path, _TrUserData) -> ok;
'v_enum_pb_feed_item.Action'(retract, _Path, _TrUserData) -> ok;
'v_enum_pb_feed_item.Action'(V, Path, TrUserData) when is_integer(V) -> v_type_sint32(V, Path, TrUserData);
'v_enum_pb_feed_item.Action'(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'pb_feed_item.Action'}, X, Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData) when -2147483648 =< N, N =< 2147483647 -> ok;
v_type_sint32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, sint32, signed, 32}, N, Path);
v_type_sint32(X, Path, _TrUserData) -> mk_type_error({bad_integer, sint32, signed, 32}, X, Path).

-compile({nowarn_unused_function,v_type_int64/3}).
-dialyzer({nowarn_function,v_type_int64/3}).
v_type_int64(N, _Path, _TrUserData) when -9223372036854775808 =< N, N =< 9223372036854775807 -> ok;
v_type_int64(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, int64, signed, 64}, N, Path);
v_type_int64(X, Path, _TrUserData) -> mk_type_error({bad_integer, int64, signed, 64}, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} -> mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg -> mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) -> mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,v_type_bytes/3}).
-dialyzer({nowarn_function,v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) -> ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) -> ok;
v_type_bytes(X, Path, _TrUserData) -> mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) -> Path2 = prettify_path(Path), erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) -> list_to_atom(lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{enum, 'pb_feed_item.Action'}, [{publish, 0}, {retract, 1}]},
     {{msg, pb_feedpost}, [#field{name = id, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = payload, fnum = 2, rnum = 3, type = bytes, occurrence = optional, opts = []}]},
     {{msg, pb_comment},
      [#field{name = id, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = publisher_uid, fnum = 2, rnum = 3, type = int64, occurrence = optional, opts = []},
       #field{name = publisher_name, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []}, #field{name = feedpost_id, fnum = 4, rnum = 5, type = string, occurrence = optional, opts = []},
       #field{name = payload, fnum = 5, rnum = 6, type = bytes, occurrence = optional, opts = []}]},
     {{msg, pb_feed_item},
      [#field{name = action, fnum = 1, rnum = 2, type = {enum, 'pb_feed_item.Action'}, occurrence = optional, opts = []}, #field{name = timestamp, fnum = 2, rnum = 3, type = int64, occurrence = optional, opts = []},
       #field{name = uid, fnum = 3, rnum = 4, type = int64, occurrence = optional, opts = []},
       #gpb_oneof{name = item, rnum = 5,
		  fields = [#field{name = feedpost, fnum = 4, rnum = 5, type = {msg, pb_feedpost}, occurrence = optional, opts = []}, #field{name = comment, fnum = 5, rnum = 5, type = {msg, pb_comment}, occurrence = optional, opts = []}]}]},
     {{msg, pb_feed_node_items}, [#field{name = uid, fnum = 1, rnum = 2, type = int64, occurrence = optional, opts = []}, #field{name = items, fnum = 2, rnum = 3, type = {msg, pb_feed_item}, occurrence = repeated, opts = []}]}].


get_msg_names() -> [pb_feedpost, pb_comment, pb_feed_item, pb_feed_node_items].


get_group_names() -> [].


get_msg_or_group_names() -> [pb_feedpost, pb_comment, pb_feed_item, pb_feed_node_items].


get_enum_names() -> ['pb_feed_item.Action'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def(pb_feedpost) -> [#field{name = id, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = payload, fnum = 2, rnum = 3, type = bytes, occurrence = optional, opts = []}];
find_msg_def(pb_comment) ->
    [#field{name = id, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = publisher_uid, fnum = 2, rnum = 3, type = int64, occurrence = optional, opts = []},
     #field{name = publisher_name, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []}, #field{name = feedpost_id, fnum = 4, rnum = 5, type = string, occurrence = optional, opts = []},
     #field{name = payload, fnum = 5, rnum = 6, type = bytes, occurrence = optional, opts = []}];
find_msg_def(pb_feed_item) ->
    [#field{name = action, fnum = 1, rnum = 2, type = {enum, 'pb_feed_item.Action'}, occurrence = optional, opts = []}, #field{name = timestamp, fnum = 2, rnum = 3, type = int64, occurrence = optional, opts = []},
     #field{name = uid, fnum = 3, rnum = 4, type = int64, occurrence = optional, opts = []},
     #gpb_oneof{name = item, rnum = 5,
		fields = [#field{name = feedpost, fnum = 4, rnum = 5, type = {msg, pb_feedpost}, occurrence = optional, opts = []}, #field{name = comment, fnum = 5, rnum = 5, type = {msg, pb_comment}, occurrence = optional, opts = []}]}];
find_msg_def(pb_feed_node_items) -> [#field{name = uid, fnum = 1, rnum = 2, type = int64, occurrence = optional, opts = []}, #field{name = items, fnum = 2, rnum = 3, type = {msg, pb_feed_item}, occurrence = repeated, opts = []}];
find_msg_def(_) -> error.


find_enum_def('pb_feed_item.Action') -> [{publish, 0}, {retract, 1}];
find_enum_def(_) -> error.


enum_symbol_by_value('pb_feed_item.Action', Value) -> 'enum_symbol_by_value_pb_feed_item.Action'(Value).


enum_value_by_symbol('pb_feed_item.Action', Sym) -> 'enum_value_by_symbol_pb_feed_item.Action'(Sym).


'enum_symbol_by_value_pb_feed_item.Action'(0) -> publish;
'enum_symbol_by_value_pb_feed_item.Action'(1) -> retract.


'enum_value_by_symbol_pb_feed_item.Action'(publish) -> 0;
'enum_value_by_symbol_pb_feed_item.Action'(retract) -> 1.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) -> erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"feedpost">>) -> pb_feedpost;
fqbin_to_msg_name(<<"comment">>) -> pb_comment;
fqbin_to_msg_name(<<"feed_item">>) -> pb_feed_item;
fqbin_to_msg_name(<<"feed_node_items">>) -> pb_feed_node_items;
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin(pb_feedpost) -> <<"feedpost">>;
msg_name_to_fqbin(pb_comment) -> <<"comment">>;
msg_name_to_fqbin(pb_feed_item) -> <<"feed_item">>;
msg_name_to_fqbin(pb_feed_node_items) -> <<"feed_node_items">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"feed_item.Action">>) -> 'pb_feed_item.Action';
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('pb_feed_item.Action') -> <<"feed_item.Action">>;
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_package_name() -> undefined.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "feed_items.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["feed_items.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["feed_items"].


get_msg_containment("feed_items") -> [pb_comment, pb_feed_item, pb_feed_node_items, pb_feedpost];
get_msg_containment(P) -> error({gpb_error, {badproto, P}}).


get_pkg_containment("feed_items") -> undefined;
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).


get_service_containment("feed_items") -> [];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).


get_rpc_containment("feed_items") -> [];
get_rpc_containment(P) -> error({gpb_error, {badproto, P}}).


get_enum_containment("feed_items") -> ['pb_feed_item.Action'];
get_enum_containment(P) -> error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"feed_node_items">>) -> "feed_items";
get_proto_by_msg_name_as_fqbin(<<"feedpost">>) -> "feed_items";
get_proto_by_msg_name_as_fqbin(<<"comment">>) -> "feed_items";
get_proto_by_msg_name_as_fqbin(<<"feed_item">>) -> "feed_items";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"feed_item.Action">>) -> "feed_items";
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.13.0".

gpb_version_as_list() ->
    [4,13,0].
