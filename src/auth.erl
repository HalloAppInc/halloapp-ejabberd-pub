%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.12.0
-module(auth).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_pb_auth.Resource'/1, 'enum_value_by_symbol_pb_auth.Resource'/1]).
-export(['enum_symbol_by_value_pb_client_mode.Mode'/1, 'enum_value_by_symbol_pb_client_mode.Mode'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("auth.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'pb_auth.Resource'() :: android | ios.
-type 'pb_client_mode.Mode'() :: active | passive.
-export_type(['pb_auth.Resource'/0, 'pb_client_mode.Mode'/0]).

%% message types
-type pb_auth() :: #pb_auth{}.

-type pb_auth_result() :: #pb_auth_result{}.

-type pb_client_mode() :: #pb_client_mode{}.

-type pb_client_version() :: #pb_client_version{}.

-export_type(['pb_auth'/0, 'pb_auth_result'/0, 'pb_client_mode'/0, 'pb_client_version'/0]).

-spec encode_msg(#pb_auth{} | #pb_auth_result{} | #pb_client_mode{} | #pb_client_version{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 -> encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#pb_auth{} | #pb_auth_result{} | #pb_client_mode{} | #pb_client_version{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) -> encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts) when tuple_size(Msg) >= 1, is_list(Opts) -> encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#pb_auth{} | #pb_auth_result{} | #pb_client_mode{} | #pb_client_version{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      pb_auth -> encode_msg_pb_auth(id(Msg, TrUserData), TrUserData);
      pb_auth_result -> encode_msg_pb_auth_result(id(Msg, TrUserData), TrUserData);
      pb_client_mode -> encode_msg_pb_client_mode(id(Msg, TrUserData), TrUserData);
      pb_client_version -> encode_msg_pb_client_version(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_pb_auth(Msg, TrUserData) -> encode_msg_pb_auth(Msg, <<>>, TrUserData).


encode_msg_pb_auth(#pb_auth{uid = F1, pwd = F2, cm = F3, cv = F4, resource = F5}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= undefined -> B2;
		     true -> e_mfield_pb_auth_cm(TrF3, <<B2/binary, 26>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= undefined -> B3;
		     true -> e_mfield_pb_auth_cv(TrF4, <<B3/binary, 34>>, TrUserData)
		  end
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     if TrF5 =:= android; TrF5 =:= 0 -> B4;
		true -> 'e_enum_pb_auth.Resource'(TrF5, <<B4/binary, 40>>, TrUserData)
	     end
	   end
    end.

encode_msg_pb_auth_result(Msg, TrUserData) -> encode_msg_pb_auth_result(Msg, <<>>, TrUserData).


encode_msg_pb_auth_result(#pb_auth_result{result = F1, reason = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case is_empty_string(TrF2) of
	       true -> B1;
	       false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	     end
	   end
    end.

encode_msg_pb_client_mode(Msg, TrUserData) -> encode_msg_pb_client_mode(Msg, <<>>, TrUserData).


encode_msg_pb_client_mode(#pb_client_mode{mode = F1}, Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= active; TrF1 =:= 0 -> Bin;
		true -> 'e_enum_pb_client_mode.Mode'(TrF1, <<Bin/binary, 8>>, TrUserData)
	     end
	   end
    end.

encode_msg_pb_client_version(Msg, TrUserData) -> encode_msg_pb_client_version(Msg, <<>>, TrUserData).


encode_msg_pb_client_version(#pb_client_version{version = F1, expires_in_seconds = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 0 -> B1;
		true -> e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
	     end
	   end
    end.

e_mfield_pb_auth_cm(Msg, Bin, TrUserData) -> SubBin = encode_msg_pb_client_mode(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

e_mfield_pb_auth_cv(Msg, Bin, TrUserData) -> SubBin = encode_msg_pb_client_version(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

'e_enum_pb_auth.Resource'(android, Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_pb_auth.Resource'(ios, Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_pb_auth.Resource'(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_pb_client_mode.Mode'(active, Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_pb_client_mode.Mode'(passive, Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_pb_client_mode.Mode'(V, Bin, _TrUserData) -> e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) -> <<N:64/unsigned-native>> = <<Value:64/signed-native>>, e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) -> <<N:64/unsigned-native>> = <<Value:64/signed-native>>, e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) -> Utf8 = unicode:characters_to_binary(S), Bin2 = e_varint(byte_size(Utf8), Bin), <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) -> Bin2 = e_varint(byte_size(Bytes), Bin), <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) -> BytesBin = iolist_to_binary(Bytes), Bin2 = e_varint(byte_size(BytesBin), Bin), <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) -> Bin2 = <<Bin/binary, (N band 127 bor 128)>>, e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) -> not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B) when is_binary(B), byte_size(B) =/= 0 -> true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) -> TrUserData = proplists:get_value(user_data, Opts), decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(pb_auth, Bin, TrUserData) -> id(decode_msg_pb_auth(Bin, TrUserData), TrUserData);
decode_msg_2_doit(pb_auth_result, Bin, TrUserData) -> id(decode_msg_pb_auth_result(Bin, TrUserData), TrUserData);
decode_msg_2_doit(pb_client_mode, Bin, TrUserData) -> id(decode_msg_pb_client_mode(Bin, TrUserData), TrUserData);
decode_msg_2_doit(pb_client_version, Bin, TrUserData) -> id(decode_msg_pb_client_version(Bin, TrUserData), TrUserData).



decode_msg_pb_auth(Bin, TrUserData) -> dfp_read_field_def_pb_auth(Bin, 0, 0, id(0, TrUserData), id([], TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(android, TrUserData), TrUserData).

dfp_read_field_def_pb_auth(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_pb_auth_uid(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_pb_auth(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_pb_auth_pwd(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_pb_auth(<<26, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_pb_auth_cm(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_pb_auth(<<34, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_pb_auth_cv(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_pb_auth(<<40, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_pb_auth_resource(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_pb_auth(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, _) -> #pb_auth{uid = F@_1, pwd = F@_2, cm = F@_3, cv = F@_4, resource = F@_5};
dfp_read_field_def_pb_auth(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dg_read_field_def_pb_auth(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_pb_auth(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 32 - 7 -> dg_read_field_def_pb_auth(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_pb_auth(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_pb_auth_uid(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
      18 -> d_field_pb_auth_pwd(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
      26 -> d_field_pb_auth_cm(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
      34 -> d_field_pb_auth_cv(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
      40 -> d_field_pb_auth_resource(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_pb_auth(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
	    1 -> skip_64_pb_auth(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
	    2 -> skip_length_delimited_pb_auth(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
	    3 -> skip_group_pb_auth(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
	    5 -> skip_32_pb_auth(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
	  end
    end;
dg_read_field_def_pb_auth(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, _) -> #pb_auth{uid = F@_1, pwd = F@_2, cm = F@_3, cv = F@_4, resource = F@_5}.

d_field_pb_auth_uid(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_pb_auth_uid(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_pb_auth_uid(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest}, dfp_read_field_def_pb_auth(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_pb_auth_pwd(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_pb_auth_pwd(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_pb_auth_pwd(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end, dfp_read_field_def_pb_auth(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_pb_auth_cm(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_pb_auth_cm(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_pb_auth_cm(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, Prev, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_pb_client_mode(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_pb_auth(RestF, 0, 0, F@_1, F@_2,
			       if Prev == undefined -> NewFValue;
				  true -> merge_msg_pb_client_mode(Prev, NewFValue, TrUserData)
			       end,
			       F@_4, F@_5, TrUserData).

d_field_pb_auth_cv(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_pb_auth_cv(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_pb_auth_cv(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, Prev, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_pb_client_version(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_pb_auth(RestF, 0, 0, F@_1, F@_2, F@_3,
			       if Prev == undefined -> NewFValue;
				  true -> merge_msg_pb_client_version(Prev, NewFValue, TrUserData)
			       end,
			       F@_5, TrUserData).

d_field_pb_auth_resource(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_pb_auth_resource(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_pb_auth_resource(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_pb_auth.Resource'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_pb_auth(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, NewFValue, TrUserData).

skip_varint_pb_auth(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> skip_varint_pb_auth(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_varint_pb_auth(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_pb_auth(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_pb_auth(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> skip_length_delimited_pb_auth(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_length_delimited_pb_auth(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_pb_auth(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_pb_auth(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_pb_auth(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_pb_auth(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_pb_auth(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_64_pb_auth(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_pb_auth(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

decode_msg_pb_auth_result(Bin, TrUserData) -> dfp_read_field_def_pb_auth_result(Bin, 0, 0, id([], TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_pb_auth_result(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_pb_auth_result_result(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_pb_auth_result(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_pb_auth_result_reason(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_pb_auth_result(<<>>, 0, 0, F@_1, F@_2, _) -> #pb_auth_result{result = F@_1, reason = F@_2};
dfp_read_field_def_pb_auth_result(Other, Z1, Z2, F@_1, F@_2, TrUserData) -> dg_read_field_def_pb_auth_result(Other, Z1, Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_pb_auth_result(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_pb_auth_result(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_pb_auth_result(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_pb_auth_result_result(Rest, 0, 0, F@_1, F@_2, TrUserData);
      18 -> d_field_pb_auth_result_reason(Rest, 0, 0, F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_pb_auth_result(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_pb_auth_result(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 -> skip_length_delimited_pb_auth_result(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    3 -> skip_group_pb_auth_result(Rest, Key bsr 3, 0, F@_1, F@_2, TrUserData);
	    5 -> skip_32_pb_auth_result(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_pb_auth_result(<<>>, 0, 0, F@_1, F@_2, _) -> #pb_auth_result{result = F@_1, reason = F@_2}.

d_field_pb_auth_result_result(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_pb_auth_result_result(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_pb_auth_result_result(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end, dfp_read_field_def_pb_auth_result(RestF, 0, 0, NewFValue, F@_2, TrUserData).

d_field_pb_auth_result_reason(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_pb_auth_result_reason(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_pb_auth_result_reason(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end, dfp_read_field_def_pb_auth_result(RestF, 0, 0, F@_1, NewFValue, TrUserData).

skip_varint_pb_auth_result(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> skip_varint_pb_auth_result(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_pb_auth_result(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_pb_auth_result(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_pb_auth_result(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_pb_auth_result(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_pb_auth_result(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_pb_auth_result(Rest2, 0, 0, F@_1, F@_2, TrUserData).

skip_group_pb_auth_result(Bin, FNum, Z2, F@_1, F@_2, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_pb_auth_result(Rest, 0, Z2, F@_1, F@_2, TrUserData).

skip_32_pb_auth_result(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_pb_auth_result(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_64_pb_auth_result(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_pb_auth_result(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

decode_msg_pb_client_mode(Bin, TrUserData) -> dfp_read_field_def_pb_client_mode(Bin, 0, 0, id(active, TrUserData), TrUserData).

dfp_read_field_def_pb_client_mode(<<8, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_pb_client_mode_mode(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_pb_client_mode(<<>>, 0, 0, F@_1, _) -> #pb_client_mode{mode = F@_1};
dfp_read_field_def_pb_client_mode(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_pb_client_mode(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_pb_client_mode(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_pb_client_mode(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_pb_client_mode(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_pb_client_mode_mode(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_pb_client_mode(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_pb_client_mode(Rest, 0, 0, F@_1, TrUserData);
	    2 -> skip_length_delimited_pb_client_mode(Rest, 0, 0, F@_1, TrUserData);
	    3 -> skip_group_pb_client_mode(Rest, Key bsr 3, 0, F@_1, TrUserData);
	    5 -> skip_32_pb_client_mode(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_pb_client_mode(<<>>, 0, 0, F@_1, _) -> #pb_client_mode{mode = F@_1}.

d_field_pb_client_mode_mode(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_pb_client_mode_mode(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_pb_client_mode_mode(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_pb_client_mode.Mode'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest}, dfp_read_field_def_pb_client_mode(RestF, 0, 0, NewFValue, TrUserData).

skip_varint_pb_client_mode(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_pb_client_mode(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_pb_client_mode(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_pb_client_mode(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_pb_client_mode(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_pb_client_mode(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_pb_client_mode(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_pb_client_mode(Rest2, 0, 0, F@_1, TrUserData).

skip_group_pb_client_mode(Bin, FNum, Z2, F@_1, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_pb_client_mode(Rest, 0, Z2, F@_1, TrUserData).

skip_32_pb_client_mode(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_pb_client_mode(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_pb_client_mode(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_pb_client_mode(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_pb_client_version(Bin, TrUserData) -> dfp_read_field_def_pb_client_version(Bin, 0, 0, id([], TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_pb_client_version(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_pb_client_version_version(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_pb_client_version(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_pb_client_version_expires_in_seconds(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_pb_client_version(<<>>, 0, 0, F@_1, F@_2, _) -> #pb_client_version{version = F@_1, expires_in_seconds = F@_2};
dfp_read_field_def_pb_client_version(Other, Z1, Z2, F@_1, F@_2, TrUserData) -> dg_read_field_def_pb_client_version(Other, Z1, Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_pb_client_version(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_pb_client_version(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_pb_client_version(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_pb_client_version_version(Rest, 0, 0, F@_1, F@_2, TrUserData);
      16 -> d_field_pb_client_version_expires_in_seconds(Rest, 0, 0, F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_pb_client_version(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_pb_client_version(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 -> skip_length_delimited_pb_client_version(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    3 -> skip_group_pb_client_version(Rest, Key bsr 3, 0, F@_1, F@_2, TrUserData);
	    5 -> skip_32_pb_client_version(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_pb_client_version(<<>>, 0, 0, F@_1, F@_2, _) -> #pb_client_version{version = F@_1, expires_in_seconds = F@_2}.

d_field_pb_client_version_version(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_pb_client_version_version(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_pb_client_version_version(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end, dfp_read_field_def_pb_client_version(RestF, 0, 0, NewFValue, F@_2, TrUserData).

d_field_pb_client_version_expires_in_seconds(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_pb_client_version_expires_in_seconds(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_pb_client_version_expires_in_seconds(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest}, dfp_read_field_def_pb_client_version(RestF, 0, 0, F@_1, NewFValue, TrUserData).

skip_varint_pb_client_version(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> skip_varint_pb_client_version(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_pb_client_version(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_pb_client_version(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_pb_client_version(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_pb_client_version(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_pb_client_version(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_pb_client_version(Rest2, 0, 0, F@_1, F@_2, TrUserData).

skip_group_pb_client_version(Bin, FNum, Z2, F@_1, F@_2, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_pb_client_version(Rest, 0, Z2, F@_1, F@_2, TrUserData).

skip_32_pb_client_version(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_pb_client_version(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_64_pb_client_version(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_pb_client_version(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

'd_enum_pb_auth.Resource'(0) -> android;
'd_enum_pb_auth.Resource'(1) -> ios;
'd_enum_pb_auth.Resource'(V) -> V.

'd_enum_pb_client_mode.Mode'(0) -> active;
'd_enum_pb_client_mode.Mode'(1) -> passive;
'd_enum_pb_client_mode.Mode'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) when element(1, Prev) =:= element(1, New) -> merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) -> merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts) when element(1, Prev) =:= element(1, New), is_list(Opts) -> merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      pb_auth -> merge_msg_pb_auth(Prev, New, TrUserData);
      pb_auth_result -> merge_msg_pb_auth_result(Prev, New, TrUserData);
      pb_client_mode -> merge_msg_pb_client_mode(Prev, New, TrUserData);
      pb_client_version -> merge_msg_pb_client_version(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_pb_auth/3}).
merge_msg_pb_auth(#pb_auth{uid = PFuid, pwd = PFpwd, cm = PFcm, cv = PFcv, resource = PFresource}, #pb_auth{uid = NFuid, pwd = NFpwd, cm = NFcm, cv = NFcv, resource = NFresource}, TrUserData) ->
    #pb_auth{uid =
		 if NFuid =:= undefined -> PFuid;
		    true -> NFuid
		 end,
	     pwd =
		 if NFpwd =:= undefined -> PFpwd;
		    true -> NFpwd
		 end,
	     cm =
		 if PFcm /= undefined, NFcm /= undefined -> merge_msg_pb_client_mode(PFcm, NFcm, TrUserData);
		    PFcm == undefined -> NFcm;
		    NFcm == undefined -> PFcm
		 end,
	     cv =
		 if PFcv /= undefined, NFcv /= undefined -> merge_msg_pb_client_version(PFcv, NFcv, TrUserData);
		    PFcv == undefined -> NFcv;
		    NFcv == undefined -> PFcv
		 end,
	     resource =
		 if NFresource =:= undefined -> PFresource;
		    true -> NFresource
		 end}.

-compile({nowarn_unused_function,merge_msg_pb_auth_result/3}).
merge_msg_pb_auth_result(#pb_auth_result{result = PFresult, reason = PFreason}, #pb_auth_result{result = NFresult, reason = NFreason}, _) ->
    #pb_auth_result{result =
			if NFresult =:= undefined -> PFresult;
			   true -> NFresult
			end,
		    reason =
			if NFreason =:= undefined -> PFreason;
			   true -> NFreason
			end}.

-compile({nowarn_unused_function,merge_msg_pb_client_mode/3}).
merge_msg_pb_client_mode(#pb_client_mode{mode = PFmode}, #pb_client_mode{mode = NFmode}, _) ->
    #pb_client_mode{mode =
			if NFmode =:= undefined -> PFmode;
			   true -> NFmode
			end}.

-compile({nowarn_unused_function,merge_msg_pb_client_version/3}).
merge_msg_pb_client_version(#pb_client_version{version = PFversion, expires_in_seconds = PFexpires_in_seconds}, #pb_client_version{version = NFversion, expires_in_seconds = NFexpires_in_seconds}, _) ->
    #pb_client_version{version =
			   if NFversion =:= undefined -> PFversion;
			      true -> NFversion
			   end,
		       expires_in_seconds =
			   if NFexpires_in_seconds =:= undefined -> PFexpires_in_seconds;
			      true -> NFexpires_in_seconds
			   end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), []);
verify_msg(X) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      pb_auth -> v_msg_pb_auth(Msg, [MsgName], TrUserData);
      pb_auth_result -> v_msg_pb_auth_result(Msg, [MsgName], TrUserData);
      pb_client_mode -> v_msg_pb_client_mode(Msg, [MsgName], TrUserData);
      pb_client_version -> v_msg_pb_client_version(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_pb_auth/3}).
-dialyzer({nowarn_function,v_msg_pb_auth/3}).
v_msg_pb_auth(#pb_auth{uid = F1, pwd = F2, cm = F3, cv = F4, resource = F5}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int64(F1, [uid | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [pwd | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_msg_pb_client_mode(F3, [cm | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_msg_pb_client_version(F4, [cv | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> 'v_enum_pb_auth.Resource'(F5, [resource | Path], TrUserData)
    end,
    ok;
v_msg_pb_auth(X, Path, _TrUserData) -> mk_type_error({expected_msg, pb_auth}, X, Path).

-compile({nowarn_unused_function,v_msg_pb_auth_result/3}).
-dialyzer({nowarn_function,v_msg_pb_auth_result/3}).
v_msg_pb_auth_result(#pb_auth_result{result = F1, reason = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [result | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [reason | Path], TrUserData)
    end,
    ok;
v_msg_pb_auth_result(X, Path, _TrUserData) -> mk_type_error({expected_msg, pb_auth_result}, X, Path).

-compile({nowarn_unused_function,v_msg_pb_client_mode/3}).
-dialyzer({nowarn_function,v_msg_pb_client_mode/3}).
v_msg_pb_client_mode(#pb_client_mode{mode = F1}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> 'v_enum_pb_client_mode.Mode'(F1, [mode | Path], TrUserData)
    end,
    ok;
v_msg_pb_client_mode(X, Path, _TrUserData) -> mk_type_error({expected_msg, pb_client_mode}, X, Path).

-compile({nowarn_unused_function,v_msg_pb_client_version/3}).
-dialyzer({nowarn_function,v_msg_pb_client_version/3}).
v_msg_pb_client_version(#pb_client_version{version = F1, expires_in_seconds = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [version | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, [expires_in_seconds | Path], TrUserData)
    end,
    ok;
v_msg_pb_client_version(X, Path, _TrUserData) -> mk_type_error({expected_msg, pb_client_version}, X, Path).

-compile({nowarn_unused_function,'v_enum_pb_auth.Resource'/3}).
-dialyzer({nowarn_function,'v_enum_pb_auth.Resource'/3}).
'v_enum_pb_auth.Resource'(android, _Path, _TrUserData) -> ok;
'v_enum_pb_auth.Resource'(ios, _Path, _TrUserData) -> ok;
'v_enum_pb_auth.Resource'(V, Path, TrUserData) when is_integer(V) -> v_type_sint32(V, Path, TrUserData);
'v_enum_pb_auth.Resource'(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'pb_auth.Resource'}, X, Path).

-compile({nowarn_unused_function,'v_enum_pb_client_mode.Mode'/3}).
-dialyzer({nowarn_function,'v_enum_pb_client_mode.Mode'/3}).
'v_enum_pb_client_mode.Mode'(active, _Path, _TrUserData) -> ok;
'v_enum_pb_client_mode.Mode'(passive, _Path, _TrUserData) -> ok;
'v_enum_pb_client_mode.Mode'(V, Path, TrUserData) when is_integer(V) -> v_type_sint32(V, Path, TrUserData);
'v_enum_pb_client_mode.Mode'(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'pb_client_mode.Mode'}, X, Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData) when -2147483648 =< N, N =< 2147483647 -> ok;
v_type_sint32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, sint32, signed, 32}, N, Path);
v_type_sint32(X, Path, _TrUserData) -> mk_type_error({bad_integer, sint32, signed, 32}, X, Path).

-compile({nowarn_unused_function,v_type_int64/3}).
-dialyzer({nowarn_function,v_type_int64/3}).
v_type_int64(N, _Path, _TrUserData) when -9223372036854775808 =< N, N =< 9223372036854775807 -> ok;
v_type_int64(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, int64, signed, 64}, N, Path);
v_type_int64(X, Path, _TrUserData) -> mk_type_error({bad_integer, int64, signed, 64}, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} -> mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg -> mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) -> mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) -> Path2 = prettify_path(Path), erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) -> list_to_atom(lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{enum, 'pb_auth.Resource'}, [{android, 0}, {ios, 1}]}, {{enum, 'pb_client_mode.Mode'}, [{active, 0}, {passive, 1}]},
     {{msg, pb_auth},
      [#field{name = uid, fnum = 1, rnum = 2, type = int64, occurrence = optional, opts = []}, #field{name = pwd, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
       #field{name = cm, fnum = 3, rnum = 4, type = {msg, pb_client_mode}, occurrence = optional, opts = []}, #field{name = cv, fnum = 4, rnum = 5, type = {msg, pb_client_version}, occurrence = optional, opts = []},
       #field{name = resource, fnum = 5, rnum = 6, type = {enum, 'pb_auth.Resource'}, occurrence = optional, opts = []}]},
     {{msg, pb_auth_result}, [#field{name = result, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = reason, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []}]},
     {{msg, pb_client_mode}, [#field{name = mode, fnum = 1, rnum = 2, type = {enum, 'pb_client_mode.Mode'}, occurrence = optional, opts = []}]},
     {{msg, pb_client_version}, [#field{name = version, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = expires_in_seconds, fnum = 2, rnum = 3, type = int64, occurrence = optional, opts = []}]}].


get_msg_names() -> [pb_auth, pb_auth_result, pb_client_mode, pb_client_version].


get_group_names() -> [].


get_msg_or_group_names() -> [pb_auth, pb_auth_result, pb_client_mode, pb_client_version].


get_enum_names() -> ['pb_auth.Resource', 'pb_client_mode.Mode'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def(pb_auth) ->
    [#field{name = uid, fnum = 1, rnum = 2, type = int64, occurrence = optional, opts = []}, #field{name = pwd, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
     #field{name = cm, fnum = 3, rnum = 4, type = {msg, pb_client_mode}, occurrence = optional, opts = []}, #field{name = cv, fnum = 4, rnum = 5, type = {msg, pb_client_version}, occurrence = optional, opts = []},
     #field{name = resource, fnum = 5, rnum = 6, type = {enum, 'pb_auth.Resource'}, occurrence = optional, opts = []}];
find_msg_def(pb_auth_result) -> [#field{name = result, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = reason, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []}];
find_msg_def(pb_client_mode) -> [#field{name = mode, fnum = 1, rnum = 2, type = {enum, 'pb_client_mode.Mode'}, occurrence = optional, opts = []}];
find_msg_def(pb_client_version) -> [#field{name = version, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = expires_in_seconds, fnum = 2, rnum = 3, type = int64, occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def('pb_auth.Resource') -> [{android, 0}, {ios, 1}];
find_enum_def('pb_client_mode.Mode') -> [{active, 0}, {passive, 1}];
find_enum_def(_) -> error.


enum_symbol_by_value('pb_auth.Resource', Value) -> 'enum_symbol_by_value_pb_auth.Resource'(Value);
enum_symbol_by_value('pb_client_mode.Mode', Value) -> 'enum_symbol_by_value_pb_client_mode.Mode'(Value).


enum_value_by_symbol('pb_auth.Resource', Sym) -> 'enum_value_by_symbol_pb_auth.Resource'(Sym);
enum_value_by_symbol('pb_client_mode.Mode', Sym) -> 'enum_value_by_symbol_pb_client_mode.Mode'(Sym).


'enum_symbol_by_value_pb_auth.Resource'(0) -> android;
'enum_symbol_by_value_pb_auth.Resource'(1) -> ios.


'enum_value_by_symbol_pb_auth.Resource'(android) -> 0;
'enum_value_by_symbol_pb_auth.Resource'(ios) -> 1.

'enum_symbol_by_value_pb_client_mode.Mode'(0) -> active;
'enum_symbol_by_value_pb_client_mode.Mode'(1) -> passive.


'enum_value_by_symbol_pb_client_mode.Mode'(active) -> 0;
'enum_value_by_symbol_pb_client_mode.Mode'(passive) -> 1.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) -> erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"auth">>) -> pb_auth;
fqbin_to_msg_name(<<"auth_result">>) -> pb_auth_result;
fqbin_to_msg_name(<<"client_mode">>) -> pb_client_mode;
fqbin_to_msg_name(<<"client_version">>) -> pb_client_version;
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin(pb_auth) -> <<"auth">>;
msg_name_to_fqbin(pb_auth_result) -> <<"auth_result">>;
msg_name_to_fqbin(pb_client_mode) -> <<"client_mode">>;
msg_name_to_fqbin(pb_client_version) -> <<"client_version">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"auth.Resource">>) -> 'pb_auth.Resource';
fqbin_to_enum_name(<<"client_mode.Mode">>) -> 'pb_client_mode.Mode';
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('pb_auth.Resource') -> <<"auth.Resource">>;
enum_name_to_fqbin('pb_client_mode.Mode') -> <<"client_mode.Mode">>;
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_package_name() -> undefined.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "auth.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["auth.proto", "client_info.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["auth", "client_info"].


get_msg_containment("auth") -> [pb_auth, pb_auth_result];
get_msg_containment("client_info") -> [pb_client_mode, pb_client_version];
get_msg_containment(P) -> error({gpb_error, {badproto, P}}).


get_pkg_containment("auth") -> undefined;
get_pkg_containment("client_info") -> undefined;
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).


get_service_containment("auth") -> [];
get_service_containment("client_info") -> [];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).


get_rpc_containment("auth") -> [];
get_rpc_containment("client_info") -> [];
get_rpc_containment(P) -> error({gpb_error, {badproto, P}}).


get_enum_containment("auth") -> ['pb_auth.Resource'];
get_enum_containment("client_info") -> ['pb_client_mode.Mode'];
get_enum_containment(P) -> error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"auth_result">>) -> "auth";
get_proto_by_msg_name_as_fqbin(<<"client_mode">>) -> "client_info";
get_proto_by_msg_name_as_fqbin(<<"auth">>) -> "auth";
get_proto_by_msg_name_as_fqbin(<<"client_version">>) -> "client_info";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"client_mode.Mode">>) -> "client_info";
get_proto_by_enum_name_as_fqbin(<<"auth.Resource">>) -> "auth";
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.12.0".

gpb_version_as_list() ->
    [4,12,0].
