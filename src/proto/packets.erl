%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.13.0
-module(packets).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_pb_ha_iq.Type'/1, 'enum_value_by_symbol_pb_ha_iq.Type'/1]).
-export(['enum_symbol_by_value_pb_ha_message.Type'/1, 'enum_value_by_symbol_pb_ha_message.Type'/1]).
-export(['enum_symbol_by_value_pb_ha_presence.Type'/1, 'enum_value_by_symbol_pb_ha_presence.Type'/1]).
-export(['enum_symbol_by_value_pb_client_mode.Mode'/1, 'enum_value_by_symbol_pb_client_mode.Mode'/1]).
-export(['enum_symbol_by_value_pb_contact.Action'/1, 'enum_value_by_symbol_pb_contact.Action'/1]).
-export(['enum_symbol_by_value_pb_contact.Role'/1, 'enum_value_by_symbol_pb_contact.Role'/1]).
-export(['enum_symbol_by_value_pb_contact_list.Type'/1, 'enum_value_by_symbol_pb_contact_list.Type'/1]).
-export(['enum_symbol_by_value_pb_feed_item.Action'/1, 'enum_value_by_symbol_pb_feed_item.Action'/1]).
-export(['enum_symbol_by_value_pb_whisper_keys.Action'/1, 'enum_value_by_symbol_pb_whisper_keys.Action'/1]).
-export(['enum_symbol_by_value_pb_push_token.Os'/1, 'enum_value_by_symbol_pb_push_token.Os'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("packets.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'pb_ha_iq.Type'() :: get | set | result | error.
-type 'pb_ha_message.Type'() :: chat | error | groupchat | headline | normal.
-type 'pb_ha_presence.Type'() :: available | away | subscribe | unsubscribe.
-type 'pb_client_mode.Mode'() :: active | passive.
-type 'pb_contact.Action'() :: add | delete.
-type 'pb_contact.Role'() :: friend | none.
-type 'pb_contact_list.Type'() :: full | delta.
-type 'pb_feed_item.Action'() :: publish | retract.
-type 'pb_whisper_keys.Action'() :: normal | add | count | get | set | update.
-type 'pb_push_token.Os'() :: android | ios | ios_dev.
-export_type(['pb_ha_iq.Type'/0, 'pb_ha_message.Type'/0, 'pb_ha_presence.Type'/0, 'pb_client_mode.Mode'/0, 'pb_contact.Action'/0, 'pb_contact.Role'/0, 'pb_contact_list.Type'/0, 'pb_feed_item.Action'/0, 'pb_whisper_keys.Action'/0, 'pb_push_token.Os'/0]).

%% message types
-type pb_chat() :: #pb_chat{}.

-type pb_ping() :: #pb_ping{}.

-type pb_iq_payload() :: #pb_iq_payload{}.

-type pb_msg_payload() :: #pb_msg_payload{}.

-type pb_ha_iq() :: #pb_ha_iq{}.

-type pb_ha_message() :: #pb_ha_message{}.

-type pb_ha_presence() :: #pb_ha_presence{}.

-type pb_ha_ack() :: #pb_ha_ack{}.

-type pb_ha_error() :: #pb_ha_error{}.

-type pb_packet() :: #pb_packet{}.

-type pb_auth_request() :: #pb_auth_request{}.

-type pb_auth_result() :: #pb_auth_result{}.

-type pb_client_mode() :: #pb_client_mode{}.

-type pb_client_version() :: #pb_client_version{}.

-type pb_upload_avatar() :: #pb_upload_avatar{}.

-type pb_avatar() :: #pb_avatar{}.

-type pb_avatars() :: #pb_avatars{}.

-type pb_media_url() :: #pb_media_url{}.

-type pb_upload_media() :: #pb_upload_media{}.

-type pb_contact() :: #pb_contact{}.

-type pb_contact_list() :: #pb_contact_list{}.

-type pb_seen_receipt() :: #pb_seen_receipt{}.

-type pb_delivery_receipt() :: #pb_delivery_receipt{}.

-type pb_feedpost() :: #pb_feedpost{}.

-type pb_comment() :: #pb_comment{}.

-type pb_feed_item() :: #pb_feed_item{}.

-type pb_feed_node_items() :: #pb_feed_node_items{}.

-type pb_whisper_keys() :: #pb_whisper_keys{}.

-type pb_push_token() :: #pb_push_token{}.

-type pb_push_register() :: #pb_push_register{}.

-export_type(['pb_chat'/0, 'pb_ping'/0, 'pb_iq_payload'/0, 'pb_msg_payload'/0, 'pb_ha_iq'/0, 'pb_ha_message'/0, 'pb_ha_presence'/0, 'pb_ha_ack'/0, 'pb_ha_error'/0, 'pb_packet'/0, 'pb_auth_request'/0, 'pb_auth_result'/0, 'pb_client_mode'/0, 'pb_client_version'/0, 'pb_upload_avatar'/0, 'pb_avatar'/0, 'pb_avatars'/0, 'pb_media_url'/0, 'pb_upload_media'/0, 'pb_contact'/0, 'pb_contact_list'/0, 'pb_seen_receipt'/0, 'pb_delivery_receipt'/0, 'pb_feedpost'/0, 'pb_comment'/0, 'pb_feed_item'/0, 'pb_feed_node_items'/0, 'pb_whisper_keys'/0, 'pb_push_token'/0, 'pb_push_register'/0]).

-spec encode_msg(#pb_chat{} | #pb_ping{} | #pb_iq_payload{} | #pb_msg_payload{} | #pb_ha_iq{} | #pb_ha_message{} | #pb_ha_presence{} | #pb_ha_ack{} | #pb_ha_error{} | #pb_packet{} | #pb_auth_request{} | #pb_auth_result{} | #pb_client_mode{} | #pb_client_version{} | #pb_upload_avatar{} | #pb_avatar{} | #pb_avatars{} | #pb_media_url{} | #pb_upload_media{} | #pb_contact{} | #pb_contact_list{} | #pb_seen_receipt{} | #pb_delivery_receipt{} | #pb_feedpost{} | #pb_comment{} | #pb_feed_item{} | #pb_feed_node_items{} | #pb_whisper_keys{} | #pb_push_token{} | #pb_push_register{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 -> encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#pb_chat{} | #pb_ping{} | #pb_iq_payload{} | #pb_msg_payload{} | #pb_ha_iq{} | #pb_ha_message{} | #pb_ha_presence{} | #pb_ha_ack{} | #pb_ha_error{} | #pb_packet{} | #pb_auth_request{} | #pb_auth_result{} | #pb_client_mode{} | #pb_client_version{} | #pb_upload_avatar{} | #pb_avatar{} | #pb_avatars{} | #pb_media_url{} | #pb_upload_media{} | #pb_contact{} | #pb_contact_list{} | #pb_seen_receipt{} | #pb_delivery_receipt{} | #pb_feedpost{} | #pb_comment{} | #pb_feed_item{} | #pb_feed_node_items{} | #pb_whisper_keys{} | #pb_push_token{} | #pb_push_register{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) -> encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts) when tuple_size(Msg) >= 1, is_list(Opts) -> encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#pb_chat{} | #pb_ping{} | #pb_iq_payload{} | #pb_msg_payload{} | #pb_ha_iq{} | #pb_ha_message{} | #pb_ha_presence{} | #pb_ha_ack{} | #pb_ha_error{} | #pb_packet{} | #pb_auth_request{} | #pb_auth_result{} | #pb_client_mode{} | #pb_client_version{} | #pb_upload_avatar{} | #pb_avatar{} | #pb_avatars{} | #pb_media_url{} | #pb_upload_media{} | #pb_contact{} | #pb_contact_list{} | #pb_seen_receipt{} | #pb_delivery_receipt{} | #pb_feedpost{} | #pb_comment{} | #pb_feed_item{} | #pb_feed_node_items{} | #pb_whisper_keys{} | #pb_push_token{} | #pb_push_register{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      pb_chat -> encode_msg_pb_chat(id(Msg, TrUserData), TrUserData);
      pb_ping -> encode_msg_pb_ping(id(Msg, TrUserData), TrUserData);
      pb_iq_payload -> encode_msg_pb_iq_payload(id(Msg, TrUserData), TrUserData);
      pb_msg_payload -> encode_msg_pb_msg_payload(id(Msg, TrUserData), TrUserData);
      pb_ha_iq -> encode_msg_pb_ha_iq(id(Msg, TrUserData), TrUserData);
      pb_ha_message -> encode_msg_pb_ha_message(id(Msg, TrUserData), TrUserData);
      pb_ha_presence -> encode_msg_pb_ha_presence(id(Msg, TrUserData), TrUserData);
      pb_ha_ack -> encode_msg_pb_ha_ack(id(Msg, TrUserData), TrUserData);
      pb_ha_error -> encode_msg_pb_ha_error(id(Msg, TrUserData), TrUserData);
      pb_packet -> encode_msg_pb_packet(id(Msg, TrUserData), TrUserData);
      pb_auth_request -> encode_msg_pb_auth_request(id(Msg, TrUserData), TrUserData);
      pb_auth_result -> encode_msg_pb_auth_result(id(Msg, TrUserData), TrUserData);
      pb_client_mode -> encode_msg_pb_client_mode(id(Msg, TrUserData), TrUserData);
      pb_client_version -> encode_msg_pb_client_version(id(Msg, TrUserData), TrUserData);
      pb_upload_avatar -> encode_msg_pb_upload_avatar(id(Msg, TrUserData), TrUserData);
      pb_avatar -> encode_msg_pb_avatar(id(Msg, TrUserData), TrUserData);
      pb_avatars -> encode_msg_pb_avatars(id(Msg, TrUserData), TrUserData);
      pb_media_url -> encode_msg_pb_media_url(id(Msg, TrUserData), TrUserData);
      pb_upload_media -> encode_msg_pb_upload_media(id(Msg, TrUserData), TrUserData);
      pb_contact -> encode_msg_pb_contact(id(Msg, TrUserData), TrUserData);
      pb_contact_list -> encode_msg_pb_contact_list(id(Msg, TrUserData), TrUserData);
      pb_seen_receipt -> encode_msg_pb_seen_receipt(id(Msg, TrUserData), TrUserData);
      pb_delivery_receipt -> encode_msg_pb_delivery_receipt(id(Msg, TrUserData), TrUserData);
      pb_feedpost -> encode_msg_pb_feedpost(id(Msg, TrUserData), TrUserData);
      pb_comment -> encode_msg_pb_comment(id(Msg, TrUserData), TrUserData);
      pb_feed_item -> encode_msg_pb_feed_item(id(Msg, TrUserData), TrUserData);
      pb_feed_node_items -> encode_msg_pb_feed_node_items(id(Msg, TrUserData), TrUserData);
      pb_whisper_keys -> encode_msg_pb_whisper_keys(id(Msg, TrUserData), TrUserData);
      pb_push_token -> encode_msg_pb_push_token(id(Msg, TrUserData), TrUserData);
      pb_push_register -> encode_msg_pb_push_register(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_pb_chat(Msg, TrUserData) -> encode_msg_pb_chat(Msg, <<>>, TrUserData).


encode_msg_pb_chat(#pb_chat{timestamp = F1, payload = F2, enc_payload = F3}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case iolist_size(TrF2) of
		    0 -> B1;
		    _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     case iolist_size(TrF3) of
	       0 -> B2;
	       _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
	     end
	   end
    end.

encode_msg_pb_ping(_Msg, _TrUserData) -> <<>>.

encode_msg_pb_iq_payload(Msg, TrUserData) -> encode_msg_pb_iq_payload(Msg, <<>>, TrUserData).


encode_msg_pb_iq_payload(#pb_iq_payload{content = F1}, Bin, TrUserData) ->
    if F1 =:= undefined -> Bin;
       true ->
	   case id(F1, TrUserData) of
	     {upload_media, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_mfield_pb_iq_payload_upload_media(TrTF1, <<Bin/binary, 10>>, TrUserData) end;
	     {contact_list, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_mfield_pb_iq_payload_contact_list(TrTF1, <<Bin/binary, 18>>, TrUserData) end;
	     {upload_avatar, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_mfield_pb_iq_payload_upload_avatar(TrTF1, <<Bin/binary, 26>>, TrUserData) end;
	     {avatar, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_mfield_pb_iq_payload_avatar(TrTF1, <<Bin/binary, 34>>, TrUserData) end;
	     {avatars, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_mfield_pb_iq_payload_avatars(TrTF1, <<Bin/binary, 42>>, TrUserData) end;
	     {client_mode, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_mfield_pb_iq_payload_client_mode(TrTF1, <<Bin/binary, 50>>, TrUserData) end;
	     {client_version, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_mfield_pb_iq_payload_client_version(TrTF1, <<Bin/binary, 58>>, TrUserData) end;
	     {push_register, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_mfield_pb_iq_payload_push_register(TrTF1, <<Bin/binary, 66>>, TrUserData) end;
	     {whisper_keys, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_mfield_pb_iq_payload_whisper_keys(TrTF1, <<Bin/binary, 74>>, TrUserData) end;
	     {ping, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_mfield_pb_iq_payload_ping(TrTF1, <<Bin/binary, 82>>, TrUserData) end;
	     {feed_item, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_mfield_pb_iq_payload_feed_item(TrTF1, <<Bin/binary, 90>>, TrUserData) end;
	     {feed_node_items, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_mfield_pb_iq_payload_feed_node_items(TrTF1, <<Bin/binary, 98>>, TrUserData) end
	   end
    end.

encode_msg_pb_msg_payload(Msg, TrUserData) -> encode_msg_pb_msg_payload(Msg, <<>>, TrUserData).


encode_msg_pb_msg_payload(#pb_msg_payload{content = F1}, Bin, TrUserData) ->
    if F1 =:= undefined -> Bin;
       true ->
	   case id(F1, TrUserData) of
	     {contact_list, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_mfield_pb_msg_payload_contact_list(TrTF1, <<Bin/binary, 10>>, TrUserData) end;
	     {avatar, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_mfield_pb_msg_payload_avatar(TrTF1, <<Bin/binary, 18>>, TrUserData) end;
	     {whisper_keys, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_mfield_pb_msg_payload_whisper_keys(TrTF1, <<Bin/binary, 26>>, TrUserData) end;
	     {seen, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_mfield_pb_msg_payload_seen(TrTF1, <<Bin/binary, 34>>, TrUserData) end;
	     {delivery, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_mfield_pb_msg_payload_delivery(TrTF1, <<Bin/binary, 42>>, TrUserData) end;
	     {chat, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_mfield_pb_msg_payload_chat(TrTF1, <<Bin/binary, 50>>, TrUserData) end;
	     {feed_item, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_mfield_pb_msg_payload_feed_item(TrTF1, <<Bin/binary, 58>>, TrUserData) end;
	     {feed_node_items, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_mfield_pb_msg_payload_feed_node_items(TrTF1, <<Bin/binary, 66>>, TrUserData) end
	   end
    end.

encode_msg_pb_ha_iq(Msg, TrUserData) -> encode_msg_pb_ha_iq(Msg, <<>>, TrUserData).


encode_msg_pb_ha_iq(#pb_ha_iq{id = F1, type = F2, payload = F3}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= get; TrF2 =:= 0 -> B1;
		     true -> 'e_enum_pb_ha_iq.Type'(TrF2, <<B1/binary, 16>>, TrUserData)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     if TrF3 =:= undefined -> B2;
		true -> e_mfield_pb_ha_iq_payload(TrF3, <<B2/binary, 26>>, TrUserData)
	     end
	   end
    end.

encode_msg_pb_ha_message(Msg, TrUserData) -> encode_msg_pb_ha_message(Msg, <<>>, TrUserData).


encode_msg_pb_ha_message(#pb_ha_message{id = F1, type = F2, to_uid = F3, from_uid = F4, payload = F5}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= chat; TrF2 =:= 0 -> B1;
		     true -> 'e_enum_pb_ha_message.Type'(TrF2, <<B1/binary, 16>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true -> e_type_int64(TrF3, <<B2/binary, 24>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= 0 -> B3;
		     true -> e_type_int64(TrF4, <<B3/binary, 32>>, TrUserData)
		  end
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     if TrF5 =:= undefined -> B4;
		true -> e_mfield_pb_ha_message_payload(TrF5, <<B4/binary, 42>>, TrUserData)
	     end
	   end
    end.

encode_msg_pb_ha_presence(Msg, TrUserData) -> encode_msg_pb_ha_presence(Msg, <<>>, TrUserData).


encode_msg_pb_ha_presence(#pb_ha_presence{id = F1, type = F2, uid = F3, last_seen = F4}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= available; TrF2 =:= 0 -> B1;
		     true -> 'e_enum_pb_ha_presence.Type'(TrF2, <<B1/binary, 16>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true -> e_type_int64(TrF3, <<B2/binary, 24>>, TrUserData)
		  end
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     if TrF4 =:= 0 -> B3;
		true -> e_type_int64(TrF4, <<B3/binary, 32>>, TrUserData)
	     end
	   end
    end.

encode_msg_pb_ha_ack(Msg, TrUserData) -> encode_msg_pb_ha_ack(Msg, <<>>, TrUserData).


encode_msg_pb_ha_ack(#pb_ha_ack{id = F1, timestamp = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 0 -> B1;
		true -> e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
	     end
	   end
    end.

encode_msg_pb_ha_error(Msg, TrUserData) -> encode_msg_pb_ha_error(Msg, <<>>, TrUserData).


encode_msg_pb_ha_error(#pb_ha_error{reason = F1}, Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     case is_empty_string(TrF1) of
	       true -> Bin;
	       false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	     end
	   end
    end.

encode_msg_pb_packet(Msg, TrUserData) -> encode_msg_pb_packet(Msg, <<>>, TrUserData).


encode_msg_pb_packet(#pb_packet{stanza = F1}, Bin, TrUserData) ->
    if F1 =:= undefined -> Bin;
       true ->
	   case id(F1, TrUserData) of
	     {msg, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_mfield_pb_packet_msg(TrTF1, <<Bin/binary, 10>>, TrUserData) end;
	     {iq, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_mfield_pb_packet_iq(TrTF1, <<Bin/binary, 18>>, TrUserData) end;
	     {ack, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_mfield_pb_packet_ack(TrTF1, <<Bin/binary, 26>>, TrUserData) end;
	     {presence, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_mfield_pb_packet_presence(TrTF1, <<Bin/binary, 34>>, TrUserData) end;
	     {error, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_mfield_pb_packet_error(TrTF1, <<Bin/binary, 42>>, TrUserData) end
	   end
    end.

encode_msg_pb_auth_request(Msg, TrUserData) -> encode_msg_pb_auth_request(Msg, <<>>, TrUserData).


encode_msg_pb_auth_request(#pb_auth_request{uid = F1, pwd = F2, cm = F3, cv = F4, resource = F5}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= undefined -> B2;
		     true -> e_mfield_pb_auth_request_cm(TrF3, <<B2/binary, 26>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= undefined -> B3;
		     true -> e_mfield_pb_auth_request_cv(TrF4, <<B3/binary, 34>>, TrUserData)
		  end
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     case is_empty_string(TrF5) of
	       true -> B4;
	       false -> e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
	     end
	   end
    end.

encode_msg_pb_auth_result(Msg, TrUserData) -> encode_msg_pb_auth_result(Msg, <<>>, TrUserData).


encode_msg_pb_auth_result(#pb_auth_result{result = F1, reason = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case is_empty_string(TrF2) of
	       true -> B1;
	       false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	     end
	   end
    end.

encode_msg_pb_client_mode(Msg, TrUserData) -> encode_msg_pb_client_mode(Msg, <<>>, TrUserData).


encode_msg_pb_client_mode(#pb_client_mode{mode = F1}, Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= active; TrF1 =:= 0 -> Bin;
		true -> 'e_enum_pb_client_mode.Mode'(TrF1, <<Bin/binary, 8>>, TrUserData)
	     end
	   end
    end.

encode_msg_pb_client_version(Msg, TrUserData) -> encode_msg_pb_client_version(Msg, <<>>, TrUserData).


encode_msg_pb_client_version(#pb_client_version{version = F1, expires_in_seconds = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 0 -> B1;
		true -> e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
	     end
	   end
    end.

encode_msg_pb_upload_avatar(Msg, TrUserData) -> encode_msg_pb_upload_avatar(Msg, <<>>, TrUserData).


encode_msg_pb_upload_avatar(#pb_upload_avatar{id = F1, data = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case iolist_size(TrF2) of
	       0 -> B1;
	       _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
	     end
	   end
    end.

encode_msg_pb_avatar(Msg, TrUserData) -> encode_msg_pb_avatar(Msg, <<>>, TrUserData).


encode_msg_pb_avatar(#pb_avatar{id = F1, uid = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 0 -> B1;
		true -> e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
	     end
	   end
    end.

encode_msg_pb_avatars(Msg, TrUserData) -> encode_msg_pb_avatars(Msg, <<>>, TrUserData).


encode_msg_pb_avatars(#pb_avatars{avatars = F1}, Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true -> e_field_pb_avatars_avatars(TrF1, Bin, TrUserData)
      end
    end.

encode_msg_pb_media_url(Msg, TrUserData) -> encode_msg_pb_media_url(Msg, <<>>, TrUserData).


encode_msg_pb_media_url(#pb_media_url{get = F1, put = F2, patch = F3}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     case is_empty_string(TrF3) of
	       true -> B2;
	       false -> e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
	     end
	   end
    end.

encode_msg_pb_upload_media(Msg, TrUserData) -> encode_msg_pb_upload_media(Msg, <<>>, TrUserData).


encode_msg_pb_upload_media(#pb_upload_media{size = F1, url = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= undefined -> B1;
		true -> e_mfield_pb_upload_media_url(TrF2, <<B1/binary, 18>>, TrUserData)
	     end
	   end
    end.

encode_msg_pb_contact(Msg, TrUserData) -> encode_msg_pb_contact(Msg, <<>>, TrUserData).


encode_msg_pb_contact(#pb_contact{action = F1, raw = F2, normalized = F3, uid = F4, avatar_id = F5, role = F6}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= add; TrF1 =:= 0 -> Bin;
		     true -> 'e_enum_pb_contact.Action'(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case is_empty_string(TrF3) of
		    true -> B2;
		    false -> e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= 0 -> B3;
		     true -> e_type_int64(TrF4, <<B3/binary, 32>>, TrUserData)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  case is_empty_string(TrF5) of
		    true -> B4;
		    false -> e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
		  end
		end
	 end,
    if F6 == undefined -> B5;
       true ->
	   begin
	     TrF6 = id(F6, TrUserData),
	     if TrF6 =:= friend; TrF6 =:= 0 -> B5;
		true -> 'e_enum_pb_contact.Role'(TrF6, <<B5/binary, 48>>, TrUserData)
	     end
	   end
    end.

encode_msg_pb_contact_list(Msg, TrUserData) -> encode_msg_pb_contact_list(Msg, <<>>, TrUserData).


encode_msg_pb_contact_list(#pb_contact_list{type = F1, sync_id = F2, batch_index = F3, is_last = F4, contacts = F5}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= full; TrF1 =:= 0 -> Bin;
		     true -> 'e_enum_pb_contact_list.Type'(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true -> e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= false -> B3;
		     true -> e_type_bool(TrF4, <<B3/binary, 32>>, TrUserData)
		  end
		end
	 end,
    begin
      TrF5 = id(F5, TrUserData),
      if TrF5 == [] -> B4;
	 true -> e_field_pb_contact_list_contacts(TrF5, B4, TrUserData)
      end
    end.

encode_msg_pb_seen_receipt(Msg, TrUserData) -> encode_msg_pb_seen_receipt(Msg, <<>>, TrUserData).


encode_msg_pb_seen_receipt(#pb_seen_receipt{id = F1, thread_id = F2, timestamp = F3}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     if TrF3 =:= 0 -> B2;
		true -> e_type_int64(TrF3, <<B2/binary, 24>>, TrUserData)
	     end
	   end
    end.

encode_msg_pb_delivery_receipt(Msg, TrUserData) -> encode_msg_pb_delivery_receipt(Msg, <<>>, TrUserData).


encode_msg_pb_delivery_receipt(#pb_delivery_receipt{id = F1, thread_id = F2, timestamp = F3}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     if TrF3 =:= 0 -> B2;
		true -> e_type_int64(TrF3, <<B2/binary, 24>>, TrUserData)
	     end
	   end
    end.

encode_msg_pb_feedpost(Msg, TrUserData) -> encode_msg_pb_feedpost(Msg, <<>>, TrUserData).


encode_msg_pb_feedpost(#pb_feedpost{id = F1, payload = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case iolist_size(TrF2) of
	       0 -> B1;
	       _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
	     end
	   end
    end.

encode_msg_pb_comment(Msg, TrUserData) -> encode_msg_pb_comment(Msg, <<>>, TrUserData).


encode_msg_pb_comment(#pb_comment{id = F1, publisher_uid = F2, publisher_name = F3, post_id = F4, payload = F5}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case is_empty_string(TrF3) of
		    true -> B2;
		    false -> e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  case is_empty_string(TrF4) of
		    true -> B3;
		    false -> e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
		  end
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     case iolist_size(TrF5) of
	       0 -> B4;
	       _ -> e_type_bytes(TrF5, <<B4/binary, 42>>, TrUserData)
	     end
	   end
    end.

encode_msg_pb_feed_item(Msg, TrUserData) -> encode_msg_pb_feed_item(Msg, <<>>, TrUserData).


encode_msg_pb_feed_item(#pb_feed_item{action = F1, timestamp = F2, item = F3}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= publish; TrF1 =:= 0 -> Bin;
		     true -> 'e_enum_pb_feed_item.Action'(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
		  end
		end
	 end,
    if F3 =:= undefined -> B2;
       true ->
	   case id(F3, TrUserData) of
	     {feedpost, TF3} -> begin TrTF3 = id(TF3, TrUserData), e_mfield_pb_feed_item_feedpost(TrTF3, <<B2/binary, 26>>, TrUserData) end;
	     {comment, TF3} -> begin TrTF3 = id(TF3, TrUserData), e_mfield_pb_feed_item_comment(TrTF3, <<B2/binary, 34>>, TrUserData) end
	   end
    end.

encode_msg_pb_feed_node_items(Msg, TrUserData) -> encode_msg_pb_feed_node_items(Msg, <<>>, TrUserData).


encode_msg_pb_feed_node_items(#pb_feed_node_items{uid = F1, items = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true -> e_field_pb_feed_node_items_items(TrF2, B1, TrUserData)
      end
    end.

encode_msg_pb_whisper_keys(Msg, TrUserData) -> encode_msg_pb_whisper_keys(Msg, <<>>, TrUserData).


encode_msg_pb_whisper_keys(#pb_whisper_keys{uid = F1, action = F2, identity_key = F3, signed_key = F4, otp_key_count = F5, one_time_keys = F6}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= normal; TrF2 =:= 0 -> B1;
		     true -> 'e_enum_pb_whisper_keys.Action'(TrF2, <<B1/binary, 16>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case iolist_size(TrF3) of
		    0 -> B2;
		    _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  case iolist_size(TrF4) of
		    0 -> B3;
		    _ -> e_type_bytes(TrF4, <<B3/binary, 34>>, TrUserData)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  if TrF5 =:= 0 -> B4;
		     true -> e_type_int32(TrF5, <<B4/binary, 40>>, TrUserData)
		  end
		end
	 end,
    begin
      TrF6 = id(F6, TrUserData),
      if TrF6 == [] -> B5;
	 true -> e_field_pb_whisper_keys_one_time_keys(TrF6, B5, TrUserData)
      end
    end.

encode_msg_pb_push_token(Msg, TrUserData) -> encode_msg_pb_push_token(Msg, <<>>, TrUserData).


encode_msg_pb_push_token(#pb_push_token{os = F1, token = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= android; TrF1 =:= 0 -> Bin;
		     true -> 'e_enum_pb_push_token.Os'(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case is_empty_string(TrF2) of
	       true -> B1;
	       false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	     end
	   end
    end.

encode_msg_pb_push_register(Msg, TrUserData) -> encode_msg_pb_push_register(Msg, <<>>, TrUserData).


encode_msg_pb_push_register(#pb_push_register{push_token = F1}, Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= undefined -> Bin;
		true -> e_mfield_pb_push_register_push_token(TrF1, <<Bin/binary, 10>>, TrUserData)
	     end
	   end
    end.

e_mfield_pb_iq_payload_upload_media(Msg, Bin, TrUserData) -> SubBin = encode_msg_pb_upload_media(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

e_mfield_pb_iq_payload_contact_list(Msg, Bin, TrUserData) -> SubBin = encode_msg_pb_contact_list(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

e_mfield_pb_iq_payload_upload_avatar(Msg, Bin, TrUserData) -> SubBin = encode_msg_pb_upload_avatar(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

e_mfield_pb_iq_payload_avatar(Msg, Bin, TrUserData) -> SubBin = encode_msg_pb_avatar(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

e_mfield_pb_iq_payload_avatars(Msg, Bin, TrUserData) -> SubBin = encode_msg_pb_avatars(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

e_mfield_pb_iq_payload_client_mode(Msg, Bin, TrUserData) -> SubBin = encode_msg_pb_client_mode(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

e_mfield_pb_iq_payload_client_version(Msg, Bin, TrUserData) -> SubBin = encode_msg_pb_client_version(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

e_mfield_pb_iq_payload_push_register(Msg, Bin, TrUserData) -> SubBin = encode_msg_pb_push_register(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

e_mfield_pb_iq_payload_whisper_keys(Msg, Bin, TrUserData) -> SubBin = encode_msg_pb_whisper_keys(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

e_mfield_pb_iq_payload_ping(_Msg, Bin, _TrUserData) -> <<Bin/binary, 0>>.

e_mfield_pb_iq_payload_feed_item(Msg, Bin, TrUserData) -> SubBin = encode_msg_pb_feed_item(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

e_mfield_pb_iq_payload_feed_node_items(Msg, Bin, TrUserData) -> SubBin = encode_msg_pb_feed_node_items(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

e_mfield_pb_msg_payload_contact_list(Msg, Bin, TrUserData) -> SubBin = encode_msg_pb_contact_list(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

e_mfield_pb_msg_payload_avatar(Msg, Bin, TrUserData) -> SubBin = encode_msg_pb_avatar(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

e_mfield_pb_msg_payload_whisper_keys(Msg, Bin, TrUserData) -> SubBin = encode_msg_pb_whisper_keys(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

e_mfield_pb_msg_payload_seen(Msg, Bin, TrUserData) -> SubBin = encode_msg_pb_seen_receipt(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

e_mfield_pb_msg_payload_delivery(Msg, Bin, TrUserData) -> SubBin = encode_msg_pb_delivery_receipt(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

e_mfield_pb_msg_payload_chat(Msg, Bin, TrUserData) -> SubBin = encode_msg_pb_chat(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

e_mfield_pb_msg_payload_feed_item(Msg, Bin, TrUserData) -> SubBin = encode_msg_pb_feed_item(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

e_mfield_pb_msg_payload_feed_node_items(Msg, Bin, TrUserData) -> SubBin = encode_msg_pb_feed_node_items(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

e_mfield_pb_ha_iq_payload(Msg, Bin, TrUserData) -> SubBin = encode_msg_pb_iq_payload(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

e_mfield_pb_ha_message_payload(Msg, Bin, TrUserData) -> SubBin = encode_msg_pb_msg_payload(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

e_mfield_pb_packet_msg(Msg, Bin, TrUserData) -> SubBin = encode_msg_pb_ha_message(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

e_mfield_pb_packet_iq(Msg, Bin, TrUserData) -> SubBin = encode_msg_pb_ha_iq(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

e_mfield_pb_packet_ack(Msg, Bin, TrUserData) -> SubBin = encode_msg_pb_ha_ack(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

e_mfield_pb_packet_presence(Msg, Bin, TrUserData) -> SubBin = encode_msg_pb_ha_presence(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

e_mfield_pb_packet_error(Msg, Bin, TrUserData) -> SubBin = encode_msg_pb_ha_error(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

e_mfield_pb_auth_request_cm(Msg, Bin, TrUserData) -> SubBin = encode_msg_pb_client_mode(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

e_mfield_pb_auth_request_cv(Msg, Bin, TrUserData) -> SubBin = encode_msg_pb_client_version(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

e_mfield_pb_avatars_avatars(Msg, Bin, TrUserData) -> SubBin = encode_msg_pb_avatar(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

e_field_pb_avatars_avatars([Elem | Rest], Bin, TrUserData) -> Bin2 = <<Bin/binary, 10>>, Bin3 = e_mfield_pb_avatars_avatars(id(Elem, TrUserData), Bin2, TrUserData), e_field_pb_avatars_avatars(Rest, Bin3, TrUserData);
e_field_pb_avatars_avatars([], Bin, _TrUserData) -> Bin.

e_mfield_pb_upload_media_url(Msg, Bin, TrUserData) -> SubBin = encode_msg_pb_media_url(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

e_mfield_pb_contact_list_contacts(Msg, Bin, TrUserData) -> SubBin = encode_msg_pb_contact(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

e_field_pb_contact_list_contacts([Elem | Rest], Bin, TrUserData) -> Bin2 = <<Bin/binary, 42>>, Bin3 = e_mfield_pb_contact_list_contacts(id(Elem, TrUserData), Bin2, TrUserData), e_field_pb_contact_list_contacts(Rest, Bin3, TrUserData);
e_field_pb_contact_list_contacts([], Bin, _TrUserData) -> Bin.

e_mfield_pb_feed_item_feedpost(Msg, Bin, TrUserData) -> SubBin = encode_msg_pb_feedpost(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

e_mfield_pb_feed_item_comment(Msg, Bin, TrUserData) -> SubBin = encode_msg_pb_comment(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

e_mfield_pb_feed_node_items_items(Msg, Bin, TrUserData) -> SubBin = encode_msg_pb_feed_item(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

e_field_pb_feed_node_items_items([Elem | Rest], Bin, TrUserData) -> Bin2 = <<Bin/binary, 18>>, Bin3 = e_mfield_pb_feed_node_items_items(id(Elem, TrUserData), Bin2, TrUserData), e_field_pb_feed_node_items_items(Rest, Bin3, TrUserData);
e_field_pb_feed_node_items_items([], Bin, _TrUserData) -> Bin.

e_field_pb_whisper_keys_one_time_keys([Elem | Rest], Bin, TrUserData) -> Bin2 = <<Bin/binary, 50>>, Bin3 = e_type_bytes(id(Elem, TrUserData), Bin2, TrUserData), e_field_pb_whisper_keys_one_time_keys(Rest, Bin3, TrUserData);
e_field_pb_whisper_keys_one_time_keys([], Bin, _TrUserData) -> Bin.

e_mfield_pb_push_register_push_token(Msg, Bin, TrUserData) -> SubBin = encode_msg_pb_push_token(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

'e_enum_pb_ha_iq.Type'(get, Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_pb_ha_iq.Type'(set, Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_pb_ha_iq.Type'(result, Bin, _TrUserData) -> <<Bin/binary, 2>>;
'e_enum_pb_ha_iq.Type'(error, Bin, _TrUserData) -> <<Bin/binary, 3>>;
'e_enum_pb_ha_iq.Type'(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_pb_ha_message.Type'(chat, Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_pb_ha_message.Type'(error, Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_pb_ha_message.Type'(groupchat, Bin, _TrUserData) -> <<Bin/binary, 2>>;
'e_enum_pb_ha_message.Type'(headline, Bin, _TrUserData) -> <<Bin/binary, 3>>;
'e_enum_pb_ha_message.Type'(normal, Bin, _TrUserData) -> <<Bin/binary, 4>>;
'e_enum_pb_ha_message.Type'(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_pb_ha_presence.Type'(available, Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_pb_ha_presence.Type'(away, Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_pb_ha_presence.Type'(subscribe, Bin, _TrUserData) -> <<Bin/binary, 2>>;
'e_enum_pb_ha_presence.Type'(unsubscribe, Bin, _TrUserData) -> <<Bin/binary, 3>>;
'e_enum_pb_ha_presence.Type'(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_pb_client_mode.Mode'(active, Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_pb_client_mode.Mode'(passive, Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_pb_client_mode.Mode'(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_pb_contact.Action'(add, Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_pb_contact.Action'(delete, Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_pb_contact.Action'(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_pb_contact.Role'(friend, Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_pb_contact.Role'(none, Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_pb_contact.Role'(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_pb_contact_list.Type'(full, Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_pb_contact_list.Type'(delta, Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_pb_contact_list.Type'(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_pb_feed_item.Action'(publish, Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_pb_feed_item.Action'(retract, Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_pb_feed_item.Action'(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_pb_whisper_keys.Action'(normal, Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_pb_whisper_keys.Action'(add, Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_pb_whisper_keys.Action'(count, Bin, _TrUserData) -> <<Bin/binary, 2>>;
'e_enum_pb_whisper_keys.Action'(get, Bin, _TrUserData) -> <<Bin/binary, 3>>;
'e_enum_pb_whisper_keys.Action'(set, Bin, _TrUserData) -> <<Bin/binary, 4>>;
'e_enum_pb_whisper_keys.Action'(update, Bin, _TrUserData) -> <<Bin/binary, 5>>;
'e_enum_pb_whisper_keys.Action'(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_pb_push_token.Os'(android, Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_pb_push_token.Os'(ios, Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_pb_push_token.Os'(ios_dev, Bin, _TrUserData) -> <<Bin/binary, 2>>;
'e_enum_pb_push_token.Os'(V, Bin, _TrUserData) -> e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) -> <<N:64/unsigned-native>> = <<Value:64/signed-native>>, e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) -> <<N:64/unsigned-native>> = <<Value:64/signed-native>>, e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) -> Utf8 = unicode:characters_to_binary(S), Bin2 = e_varint(byte_size(Utf8), Bin), <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) -> Bin2 = e_varint(byte_size(Bytes), Bin), <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) -> BytesBin = iolist_to_binary(Bytes), Bin2 = e_varint(byte_size(BytesBin), Bin), <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) -> Bin2 = <<Bin/binary, (N band 127 bor 128)>>, e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) -> not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B) when is_binary(B), byte_size(B) =/= 0 -> true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) -> TrUserData = proplists:get_value(user_data, Opts), decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(pb_chat, Bin, TrUserData) -> id(decode_msg_pb_chat(Bin, TrUserData), TrUserData);
decode_msg_2_doit(pb_ping, Bin, TrUserData) -> id(decode_msg_pb_ping(Bin, TrUserData), TrUserData);
decode_msg_2_doit(pb_iq_payload, Bin, TrUserData) -> id(decode_msg_pb_iq_payload(Bin, TrUserData), TrUserData);
decode_msg_2_doit(pb_msg_payload, Bin, TrUserData) -> id(decode_msg_pb_msg_payload(Bin, TrUserData), TrUserData);
decode_msg_2_doit(pb_ha_iq, Bin, TrUserData) -> id(decode_msg_pb_ha_iq(Bin, TrUserData), TrUserData);
decode_msg_2_doit(pb_ha_message, Bin, TrUserData) -> id(decode_msg_pb_ha_message(Bin, TrUserData), TrUserData);
decode_msg_2_doit(pb_ha_presence, Bin, TrUserData) -> id(decode_msg_pb_ha_presence(Bin, TrUserData), TrUserData);
decode_msg_2_doit(pb_ha_ack, Bin, TrUserData) -> id(decode_msg_pb_ha_ack(Bin, TrUserData), TrUserData);
decode_msg_2_doit(pb_ha_error, Bin, TrUserData) -> id(decode_msg_pb_ha_error(Bin, TrUserData), TrUserData);
decode_msg_2_doit(pb_packet, Bin, TrUserData) -> id(decode_msg_pb_packet(Bin, TrUserData), TrUserData);
decode_msg_2_doit(pb_auth_request, Bin, TrUserData) -> id(decode_msg_pb_auth_request(Bin, TrUserData), TrUserData);
decode_msg_2_doit(pb_auth_result, Bin, TrUserData) -> id(decode_msg_pb_auth_result(Bin, TrUserData), TrUserData);
decode_msg_2_doit(pb_client_mode, Bin, TrUserData) -> id(decode_msg_pb_client_mode(Bin, TrUserData), TrUserData);
decode_msg_2_doit(pb_client_version, Bin, TrUserData) -> id(decode_msg_pb_client_version(Bin, TrUserData), TrUserData);
decode_msg_2_doit(pb_upload_avatar, Bin, TrUserData) -> id(decode_msg_pb_upload_avatar(Bin, TrUserData), TrUserData);
decode_msg_2_doit(pb_avatar, Bin, TrUserData) -> id(decode_msg_pb_avatar(Bin, TrUserData), TrUserData);
decode_msg_2_doit(pb_avatars, Bin, TrUserData) -> id(decode_msg_pb_avatars(Bin, TrUserData), TrUserData);
decode_msg_2_doit(pb_media_url, Bin, TrUserData) -> id(decode_msg_pb_media_url(Bin, TrUserData), TrUserData);
decode_msg_2_doit(pb_upload_media, Bin, TrUserData) -> id(decode_msg_pb_upload_media(Bin, TrUserData), TrUserData);
decode_msg_2_doit(pb_contact, Bin, TrUserData) -> id(decode_msg_pb_contact(Bin, TrUserData), TrUserData);
decode_msg_2_doit(pb_contact_list, Bin, TrUserData) -> id(decode_msg_pb_contact_list(Bin, TrUserData), TrUserData);
decode_msg_2_doit(pb_seen_receipt, Bin, TrUserData) -> id(decode_msg_pb_seen_receipt(Bin, TrUserData), TrUserData);
decode_msg_2_doit(pb_delivery_receipt, Bin, TrUserData) -> id(decode_msg_pb_delivery_receipt(Bin, TrUserData), TrUserData);
decode_msg_2_doit(pb_feedpost, Bin, TrUserData) -> id(decode_msg_pb_feedpost(Bin, TrUserData), TrUserData);
decode_msg_2_doit(pb_comment, Bin, TrUserData) -> id(decode_msg_pb_comment(Bin, TrUserData), TrUserData);
decode_msg_2_doit(pb_feed_item, Bin, TrUserData) -> id(decode_msg_pb_feed_item(Bin, TrUserData), TrUserData);
decode_msg_2_doit(pb_feed_node_items, Bin, TrUserData) -> id(decode_msg_pb_feed_node_items(Bin, TrUserData), TrUserData);
decode_msg_2_doit(pb_whisper_keys, Bin, TrUserData) -> id(decode_msg_pb_whisper_keys(Bin, TrUserData), TrUserData);
decode_msg_2_doit(pb_push_token, Bin, TrUserData) -> id(decode_msg_pb_push_token(Bin, TrUserData), TrUserData);
decode_msg_2_doit(pb_push_register, Bin, TrUserData) -> id(decode_msg_pb_push_register(Bin, TrUserData), TrUserData).



decode_msg_pb_chat(Bin, TrUserData) -> dfp_read_field_def_pb_chat(Bin, 0, 0, id(0, TrUserData), id(<<>>, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_pb_chat(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_pb_chat_timestamp(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_pb_chat(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_pb_chat_payload(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_pb_chat(<<26, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_pb_chat_enc_payload(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_pb_chat(<<>>, 0, 0, F@_1, F@_2, F@_3, _) -> #pb_chat{timestamp = F@_1, payload = F@_2, enc_payload = F@_3};
dfp_read_field_def_pb_chat(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_pb_chat(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_pb_chat(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_pb_chat(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_pb_chat(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_pb_chat_timestamp(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
      18 -> d_field_pb_chat_payload(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
      26 -> d_field_pb_chat_enc_payload(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_pb_chat(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
	    1 -> skip_64_pb_chat(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
	    2 -> skip_length_delimited_pb_chat(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
	    3 -> skip_group_pb_chat(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, TrUserData);
	    5 -> skip_32_pb_chat(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
	  end
    end;
dg_read_field_def_pb_chat(<<>>, 0, 0, F@_1, F@_2, F@_3, _) -> #pb_chat{timestamp = F@_1, payload = F@_2, enc_payload = F@_3}.

d_field_pb_chat_timestamp(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_pb_chat_timestamp(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_pb_chat_timestamp(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest}, dfp_read_field_def_pb_chat(RestF, 0, 0, NewFValue, F@_2, F@_3, TrUserData).

d_field_pb_chat_payload(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_pb_chat_payload(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_pb_chat_payload(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end, dfp_read_field_def_pb_chat(RestF, 0, 0, F@_1, NewFValue, F@_3, TrUserData).

d_field_pb_chat_enc_payload(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_pb_chat_enc_payload(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_pb_chat_enc_payload(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end, dfp_read_field_def_pb_chat(RestF, 0, 0, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_pb_chat(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_pb_chat(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
skip_varint_pb_chat(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_pb_chat(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_pb_chat(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_pb_chat(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_pb_chat(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_pb_chat(Rest2, 0, 0, F@_1, F@_2, F@_3, TrUserData).

skip_group_pb_chat(Bin, FNum, Z2, F@_1, F@_2, F@_3, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_pb_chat(Rest, 0, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_32_pb_chat(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_pb_chat(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_64_pb_chat(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_pb_chat(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

decode_msg_pb_ping(Bin, TrUserData) -> dfp_read_field_def_pb_ping(Bin, 0, 0, TrUserData).

dfp_read_field_def_pb_ping(<<>>, 0, 0, _) -> #pb_ping{};
dfp_read_field_def_pb_ping(Other, Z1, Z2, TrUserData) -> dg_read_field_def_pb_ping(Other, Z1, Z2, TrUserData).

dg_read_field_def_pb_ping(<<1:1, X:7, Rest/binary>>, N, Acc, TrUserData) when N < 32 - 7 -> dg_read_field_def_pb_ping(Rest, N + 7, X bsl N + Acc, TrUserData);
dg_read_field_def_pb_ping(<<0:1, X:7, Rest/binary>>, N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_pb_ping(Rest, 0, 0, TrUserData);
      1 -> skip_64_pb_ping(Rest, 0, 0, TrUserData);
      2 -> skip_length_delimited_pb_ping(Rest, 0, 0, TrUserData);
      3 -> skip_group_pb_ping(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_pb_ping(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_pb_ping(<<>>, 0, 0, _) -> #pb_ping{}.

skip_varint_pb_ping(<<1:1, _:7, Rest/binary>>, Z1, Z2, TrUserData) -> skip_varint_pb_ping(Rest, Z1, Z2, TrUserData);
skip_varint_pb_ping(<<0:1, _:7, Rest/binary>>, Z1, Z2, TrUserData) -> dfp_read_field_def_pb_ping(Rest, Z1, Z2, TrUserData).

skip_length_delimited_pb_ping(<<1:1, X:7, Rest/binary>>, N, Acc, TrUserData) when N < 57 -> skip_length_delimited_pb_ping(Rest, N + 7, X bsl N + Acc, TrUserData);
skip_length_delimited_pb_ping(<<0:1, X:7, Rest/binary>>, N, Acc, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_pb_ping(Rest2, 0, 0, TrUserData).

skip_group_pb_ping(Bin, FNum, Z2, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_pb_ping(Rest, 0, Z2, TrUserData).

skip_32_pb_ping(<<_:32, Rest/binary>>, Z1, Z2, TrUserData) -> dfp_read_field_def_pb_ping(Rest, Z1, Z2, TrUserData).

skip_64_pb_ping(<<_:64, Rest/binary>>, Z1, Z2, TrUserData) -> dfp_read_field_def_pb_ping(Rest, Z1, Z2, TrUserData).

decode_msg_pb_iq_payload(Bin, TrUserData) -> dfp_read_field_def_pb_iq_payload(Bin, 0, 0, id(undefined, TrUserData), TrUserData).

dfp_read_field_def_pb_iq_payload(<<10, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_pb_iq_payload_upload_media(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_pb_iq_payload(<<18, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_pb_iq_payload_contact_list(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_pb_iq_payload(<<26, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_pb_iq_payload_upload_avatar(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_pb_iq_payload(<<34, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_pb_iq_payload_avatar(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_pb_iq_payload(<<42, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_pb_iq_payload_avatars(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_pb_iq_payload(<<50, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_pb_iq_payload_client_mode(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_pb_iq_payload(<<58, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_pb_iq_payload_client_version(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_pb_iq_payload(<<66, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_pb_iq_payload_push_register(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_pb_iq_payload(<<74, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_pb_iq_payload_whisper_keys(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_pb_iq_payload(<<82, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_pb_iq_payload_ping(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_pb_iq_payload(<<90, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_pb_iq_payload_feed_item(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_pb_iq_payload(<<98, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_pb_iq_payload_feed_node_items(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_pb_iq_payload(<<>>, 0, 0, F@_1, _) -> #pb_iq_payload{content = F@_1};
dfp_read_field_def_pb_iq_payload(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_pb_iq_payload(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_pb_iq_payload(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_pb_iq_payload(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_pb_iq_payload(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_pb_iq_payload_upload_media(Rest, 0, 0, F@_1, TrUserData);
      18 -> d_field_pb_iq_payload_contact_list(Rest, 0, 0, F@_1, TrUserData);
      26 -> d_field_pb_iq_payload_upload_avatar(Rest, 0, 0, F@_1, TrUserData);
      34 -> d_field_pb_iq_payload_avatar(Rest, 0, 0, F@_1, TrUserData);
      42 -> d_field_pb_iq_payload_avatars(Rest, 0, 0, F@_1, TrUserData);
      50 -> d_field_pb_iq_payload_client_mode(Rest, 0, 0, F@_1, TrUserData);
      58 -> d_field_pb_iq_payload_client_version(Rest, 0, 0, F@_1, TrUserData);
      66 -> d_field_pb_iq_payload_push_register(Rest, 0, 0, F@_1, TrUserData);
      74 -> d_field_pb_iq_payload_whisper_keys(Rest, 0, 0, F@_1, TrUserData);
      82 -> d_field_pb_iq_payload_ping(Rest, 0, 0, F@_1, TrUserData);
      90 -> d_field_pb_iq_payload_feed_item(Rest, 0, 0, F@_1, TrUserData);
      98 -> d_field_pb_iq_payload_feed_node_items(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_pb_iq_payload(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_pb_iq_payload(Rest, 0, 0, F@_1, TrUserData);
	    2 -> skip_length_delimited_pb_iq_payload(Rest, 0, 0, F@_1, TrUserData);
	    3 -> skip_group_pb_iq_payload(Rest, Key bsr 3, 0, F@_1, TrUserData);
	    5 -> skip_32_pb_iq_payload(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_pb_iq_payload(<<>>, 0, 0, F@_1, _) -> #pb_iq_payload{content = F@_1}.

d_field_pb_iq_payload_upload_media(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_pb_iq_payload_upload_media(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_pb_iq_payload_upload_media(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_pb_upload_media(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_pb_iq_payload(RestF, 0, 0,
				     case Prev of
				       undefined -> id({upload_media, NewFValue}, TrUserData);
				       {upload_media, MVPrev} -> id({upload_media, merge_msg_pb_upload_media(MVPrev, NewFValue, TrUserData)}, TrUserData);
				       _ -> id({upload_media, NewFValue}, TrUserData)
				     end,
				     TrUserData).

d_field_pb_iq_payload_contact_list(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_pb_iq_payload_contact_list(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_pb_iq_payload_contact_list(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_pb_contact_list(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_pb_iq_payload(RestF, 0, 0,
				     case Prev of
				       undefined -> id({contact_list, NewFValue}, TrUserData);
				       {contact_list, MVPrev} -> id({contact_list, merge_msg_pb_contact_list(MVPrev, NewFValue, TrUserData)}, TrUserData);
				       _ -> id({contact_list, NewFValue}, TrUserData)
				     end,
				     TrUserData).

d_field_pb_iq_payload_upload_avatar(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_pb_iq_payload_upload_avatar(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_pb_iq_payload_upload_avatar(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_pb_upload_avatar(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_pb_iq_payload(RestF, 0, 0,
				     case Prev of
				       undefined -> id({upload_avatar, NewFValue}, TrUserData);
				       {upload_avatar, MVPrev} -> id({upload_avatar, merge_msg_pb_upload_avatar(MVPrev, NewFValue, TrUserData)}, TrUserData);
				       _ -> id({upload_avatar, NewFValue}, TrUserData)
				     end,
				     TrUserData).

d_field_pb_iq_payload_avatar(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_pb_iq_payload_avatar(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_pb_iq_payload_avatar(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_pb_avatar(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_pb_iq_payload(RestF, 0, 0,
				     case Prev of
				       undefined -> id({avatar, NewFValue}, TrUserData);
				       {avatar, MVPrev} -> id({avatar, merge_msg_pb_avatar(MVPrev, NewFValue, TrUserData)}, TrUserData);
				       _ -> id({avatar, NewFValue}, TrUserData)
				     end,
				     TrUserData).

d_field_pb_iq_payload_avatars(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_pb_iq_payload_avatars(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_pb_iq_payload_avatars(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_pb_avatars(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_pb_iq_payload(RestF, 0, 0,
				     case Prev of
				       undefined -> id({avatars, NewFValue}, TrUserData);
				       {avatars, MVPrev} -> id({avatars, merge_msg_pb_avatars(MVPrev, NewFValue, TrUserData)}, TrUserData);
				       _ -> id({avatars, NewFValue}, TrUserData)
				     end,
				     TrUserData).

d_field_pb_iq_payload_client_mode(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_pb_iq_payload_client_mode(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_pb_iq_payload_client_mode(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_pb_client_mode(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_pb_iq_payload(RestF, 0, 0,
				     case Prev of
				       undefined -> id({client_mode, NewFValue}, TrUserData);
				       {client_mode, MVPrev} -> id({client_mode, merge_msg_pb_client_mode(MVPrev, NewFValue, TrUserData)}, TrUserData);
				       _ -> id({client_mode, NewFValue}, TrUserData)
				     end,
				     TrUserData).

d_field_pb_iq_payload_client_version(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_pb_iq_payload_client_version(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_pb_iq_payload_client_version(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_pb_client_version(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_pb_iq_payload(RestF, 0, 0,
				     case Prev of
				       undefined -> id({client_version, NewFValue}, TrUserData);
				       {client_version, MVPrev} -> id({client_version, merge_msg_pb_client_version(MVPrev, NewFValue, TrUserData)}, TrUserData);
				       _ -> id({client_version, NewFValue}, TrUserData)
				     end,
				     TrUserData).

d_field_pb_iq_payload_push_register(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_pb_iq_payload_push_register(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_pb_iq_payload_push_register(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_pb_push_register(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_pb_iq_payload(RestF, 0, 0,
				     case Prev of
				       undefined -> id({push_register, NewFValue}, TrUserData);
				       {push_register, MVPrev} -> id({push_register, merge_msg_pb_push_register(MVPrev, NewFValue, TrUserData)}, TrUserData);
				       _ -> id({push_register, NewFValue}, TrUserData)
				     end,
				     TrUserData).

d_field_pb_iq_payload_whisper_keys(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_pb_iq_payload_whisper_keys(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_pb_iq_payload_whisper_keys(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_pb_whisper_keys(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_pb_iq_payload(RestF, 0, 0,
				     case Prev of
				       undefined -> id({whisper_keys, NewFValue}, TrUserData);
				       {whisper_keys, MVPrev} -> id({whisper_keys, merge_msg_pb_whisper_keys(MVPrev, NewFValue, TrUserData)}, TrUserData);
				       _ -> id({whisper_keys, NewFValue}, TrUserData)
				     end,
				     TrUserData).

d_field_pb_iq_payload_ping(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_pb_iq_payload_ping(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_pb_iq_payload_ping(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_pb_ping(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_pb_iq_payload(RestF, 0, 0,
				     case Prev of
				       undefined -> id({ping, NewFValue}, TrUserData);
				       {ping, MVPrev} -> id({ping, merge_msg_pb_ping(MVPrev, NewFValue, TrUserData)}, TrUserData);
				       _ -> id({ping, NewFValue}, TrUserData)
				     end,
				     TrUserData).

d_field_pb_iq_payload_feed_item(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_pb_iq_payload_feed_item(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_pb_iq_payload_feed_item(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_pb_feed_item(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_pb_iq_payload(RestF, 0, 0,
				     case Prev of
				       undefined -> id({feed_item, NewFValue}, TrUserData);
				       {feed_item, MVPrev} -> id({feed_item, merge_msg_pb_feed_item(MVPrev, NewFValue, TrUserData)}, TrUserData);
				       _ -> id({feed_item, NewFValue}, TrUserData)
				     end,
				     TrUserData).

d_field_pb_iq_payload_feed_node_items(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_pb_iq_payload_feed_node_items(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_pb_iq_payload_feed_node_items(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_pb_feed_node_items(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_pb_iq_payload(RestF, 0, 0,
				     case Prev of
				       undefined -> id({feed_node_items, NewFValue}, TrUserData);
				       {feed_node_items, MVPrev} -> id({feed_node_items, merge_msg_pb_feed_node_items(MVPrev, NewFValue, TrUserData)}, TrUserData);
				       _ -> id({feed_node_items, NewFValue}, TrUserData)
				     end,
				     TrUserData).

skip_varint_pb_iq_payload(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_pb_iq_payload(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_pb_iq_payload(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_pb_iq_payload(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_pb_iq_payload(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_pb_iq_payload(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_pb_iq_payload(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_pb_iq_payload(Rest2, 0, 0, F@_1, TrUserData).

skip_group_pb_iq_payload(Bin, FNum, Z2, F@_1, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_pb_iq_payload(Rest, 0, Z2, F@_1, TrUserData).

skip_32_pb_iq_payload(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_pb_iq_payload(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_pb_iq_payload(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_pb_iq_payload(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_pb_msg_payload(Bin, TrUserData) -> dfp_read_field_def_pb_msg_payload(Bin, 0, 0, id(undefined, TrUserData), TrUserData).

dfp_read_field_def_pb_msg_payload(<<10, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_pb_msg_payload_contact_list(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_pb_msg_payload(<<18, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_pb_msg_payload_avatar(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_pb_msg_payload(<<26, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_pb_msg_payload_whisper_keys(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_pb_msg_payload(<<34, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_pb_msg_payload_seen(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_pb_msg_payload(<<42, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_pb_msg_payload_delivery(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_pb_msg_payload(<<50, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_pb_msg_payload_chat(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_pb_msg_payload(<<58, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_pb_msg_payload_feed_item(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_pb_msg_payload(<<66, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_pb_msg_payload_feed_node_items(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_pb_msg_payload(<<>>, 0, 0, F@_1, _) -> #pb_msg_payload{content = F@_1};
dfp_read_field_def_pb_msg_payload(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_pb_msg_payload(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_pb_msg_payload(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_pb_msg_payload(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_pb_msg_payload(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_pb_msg_payload_contact_list(Rest, 0, 0, F@_1, TrUserData);
      18 -> d_field_pb_msg_payload_avatar(Rest, 0, 0, F@_1, TrUserData);
      26 -> d_field_pb_msg_payload_whisper_keys(Rest, 0, 0, F@_1, TrUserData);
      34 -> d_field_pb_msg_payload_seen(Rest, 0, 0, F@_1, TrUserData);
      42 -> d_field_pb_msg_payload_delivery(Rest, 0, 0, F@_1, TrUserData);
      50 -> d_field_pb_msg_payload_chat(Rest, 0, 0, F@_1, TrUserData);
      58 -> d_field_pb_msg_payload_feed_item(Rest, 0, 0, F@_1, TrUserData);
      66 -> d_field_pb_msg_payload_feed_node_items(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_pb_msg_payload(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_pb_msg_payload(Rest, 0, 0, F@_1, TrUserData);
	    2 -> skip_length_delimited_pb_msg_payload(Rest, 0, 0, F@_1, TrUserData);
	    3 -> skip_group_pb_msg_payload(Rest, Key bsr 3, 0, F@_1, TrUserData);
	    5 -> skip_32_pb_msg_payload(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_pb_msg_payload(<<>>, 0, 0, F@_1, _) -> #pb_msg_payload{content = F@_1}.

d_field_pb_msg_payload_contact_list(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_pb_msg_payload_contact_list(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_pb_msg_payload_contact_list(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_pb_contact_list(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_pb_msg_payload(RestF, 0, 0,
				      case Prev of
					undefined -> id({contact_list, NewFValue}, TrUserData);
					{contact_list, MVPrev} -> id({contact_list, merge_msg_pb_contact_list(MVPrev, NewFValue, TrUserData)}, TrUserData);
					_ -> id({contact_list, NewFValue}, TrUserData)
				      end,
				      TrUserData).

d_field_pb_msg_payload_avatar(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_pb_msg_payload_avatar(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_pb_msg_payload_avatar(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_pb_avatar(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_pb_msg_payload(RestF, 0, 0,
				      case Prev of
					undefined -> id({avatar, NewFValue}, TrUserData);
					{avatar, MVPrev} -> id({avatar, merge_msg_pb_avatar(MVPrev, NewFValue, TrUserData)}, TrUserData);
					_ -> id({avatar, NewFValue}, TrUserData)
				      end,
				      TrUserData).

d_field_pb_msg_payload_whisper_keys(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_pb_msg_payload_whisper_keys(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_pb_msg_payload_whisper_keys(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_pb_whisper_keys(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_pb_msg_payload(RestF, 0, 0,
				      case Prev of
					undefined -> id({whisper_keys, NewFValue}, TrUserData);
					{whisper_keys, MVPrev} -> id({whisper_keys, merge_msg_pb_whisper_keys(MVPrev, NewFValue, TrUserData)}, TrUserData);
					_ -> id({whisper_keys, NewFValue}, TrUserData)
				      end,
				      TrUserData).

d_field_pb_msg_payload_seen(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_pb_msg_payload_seen(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_pb_msg_payload_seen(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_pb_seen_receipt(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_pb_msg_payload(RestF, 0, 0,
				      case Prev of
					undefined -> id({seen, NewFValue}, TrUserData);
					{seen, MVPrev} -> id({seen, merge_msg_pb_seen_receipt(MVPrev, NewFValue, TrUserData)}, TrUserData);
					_ -> id({seen, NewFValue}, TrUserData)
				      end,
				      TrUserData).

d_field_pb_msg_payload_delivery(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_pb_msg_payload_delivery(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_pb_msg_payload_delivery(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_pb_delivery_receipt(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_pb_msg_payload(RestF, 0, 0,
				      case Prev of
					undefined -> id({delivery, NewFValue}, TrUserData);
					{delivery, MVPrev} -> id({delivery, merge_msg_pb_delivery_receipt(MVPrev, NewFValue, TrUserData)}, TrUserData);
					_ -> id({delivery, NewFValue}, TrUserData)
				      end,
				      TrUserData).

d_field_pb_msg_payload_chat(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_pb_msg_payload_chat(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_pb_msg_payload_chat(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_pb_chat(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_pb_msg_payload(RestF, 0, 0,
				      case Prev of
					undefined -> id({chat, NewFValue}, TrUserData);
					{chat, MVPrev} -> id({chat, merge_msg_pb_chat(MVPrev, NewFValue, TrUserData)}, TrUserData);
					_ -> id({chat, NewFValue}, TrUserData)
				      end,
				      TrUserData).

d_field_pb_msg_payload_feed_item(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_pb_msg_payload_feed_item(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_pb_msg_payload_feed_item(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_pb_feed_item(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_pb_msg_payload(RestF, 0, 0,
				      case Prev of
					undefined -> id({feed_item, NewFValue}, TrUserData);
					{feed_item, MVPrev} -> id({feed_item, merge_msg_pb_feed_item(MVPrev, NewFValue, TrUserData)}, TrUserData);
					_ -> id({feed_item, NewFValue}, TrUserData)
				      end,
				      TrUserData).

d_field_pb_msg_payload_feed_node_items(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_pb_msg_payload_feed_node_items(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_pb_msg_payload_feed_node_items(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_pb_feed_node_items(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_pb_msg_payload(RestF, 0, 0,
				      case Prev of
					undefined -> id({feed_node_items, NewFValue}, TrUserData);
					{feed_node_items, MVPrev} -> id({feed_node_items, merge_msg_pb_feed_node_items(MVPrev, NewFValue, TrUserData)}, TrUserData);
					_ -> id({feed_node_items, NewFValue}, TrUserData)
				      end,
				      TrUserData).

skip_varint_pb_msg_payload(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_pb_msg_payload(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_pb_msg_payload(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_pb_msg_payload(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_pb_msg_payload(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_pb_msg_payload(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_pb_msg_payload(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_pb_msg_payload(Rest2, 0, 0, F@_1, TrUserData).

skip_group_pb_msg_payload(Bin, FNum, Z2, F@_1, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_pb_msg_payload(Rest, 0, Z2, F@_1, TrUserData).

skip_32_pb_msg_payload(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_pb_msg_payload(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_pb_msg_payload(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_pb_msg_payload(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_pb_ha_iq(Bin, TrUserData) -> dfp_read_field_def_pb_ha_iq(Bin, 0, 0, id(<<>>, TrUserData), id(get, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_pb_ha_iq(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_pb_ha_iq_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_pb_ha_iq(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_pb_ha_iq_type(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_pb_ha_iq(<<26, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_pb_ha_iq_payload(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_pb_ha_iq(<<>>, 0, 0, F@_1, F@_2, F@_3, _) -> #pb_ha_iq{id = F@_1, type = F@_2, payload = F@_3};
dfp_read_field_def_pb_ha_iq(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_pb_ha_iq(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_pb_ha_iq(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_pb_ha_iq(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_pb_ha_iq(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_pb_ha_iq_id(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
      16 -> d_field_pb_ha_iq_type(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
      26 -> d_field_pb_ha_iq_payload(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_pb_ha_iq(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
	    1 -> skip_64_pb_ha_iq(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
	    2 -> skip_length_delimited_pb_ha_iq(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
	    3 -> skip_group_pb_ha_iq(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, TrUserData);
	    5 -> skip_32_pb_ha_iq(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
	  end
    end;
dg_read_field_def_pb_ha_iq(<<>>, 0, 0, F@_1, F@_2, F@_3, _) -> #pb_ha_iq{id = F@_1, type = F@_2, payload = F@_3}.

d_field_pb_ha_iq_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_pb_ha_iq_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_pb_ha_iq_id(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end, dfp_read_field_def_pb_ha_iq(RestF, 0, 0, NewFValue, F@_2, F@_3, TrUserData).

d_field_pb_ha_iq_type(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_pb_ha_iq_type(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_pb_ha_iq_type(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_pb_ha_iq.Type'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest}, dfp_read_field_def_pb_ha_iq(RestF, 0, 0, F@_1, NewFValue, F@_3, TrUserData).

d_field_pb_ha_iq_payload(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_pb_ha_iq_payload(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_pb_ha_iq_payload(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_pb_iq_payload(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_pb_ha_iq(RestF, 0, 0, F@_1, F@_2,
				if Prev == undefined -> NewFValue;
				   true -> merge_msg_pb_iq_payload(Prev, NewFValue, TrUserData)
				end,
				TrUserData).

skip_varint_pb_ha_iq(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_pb_ha_iq(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
skip_varint_pb_ha_iq(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_pb_ha_iq(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_pb_ha_iq(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_pb_ha_iq(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_pb_ha_iq(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_pb_ha_iq(Rest2, 0, 0, F@_1, F@_2, F@_3, TrUserData).

skip_group_pb_ha_iq(Bin, FNum, Z2, F@_1, F@_2, F@_3, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_pb_ha_iq(Rest, 0, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_32_pb_ha_iq(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_pb_ha_iq(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_64_pb_ha_iq(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_pb_ha_iq(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

decode_msg_pb_ha_message(Bin, TrUserData) -> dfp_read_field_def_pb_ha_message(Bin, 0, 0, id(<<>>, TrUserData), id(chat, TrUserData), id(0, TrUserData), id(0, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_pb_ha_message(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_pb_ha_message_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_pb_ha_message(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_pb_ha_message_type(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_pb_ha_message(<<24, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_pb_ha_message_to_uid(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_pb_ha_message(<<32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_pb_ha_message_from_uid(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_pb_ha_message(<<42, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_pb_ha_message_payload(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_pb_ha_message(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, _) -> #pb_ha_message{id = F@_1, type = F@_2, to_uid = F@_3, from_uid = F@_4, payload = F@_5};
dfp_read_field_def_pb_ha_message(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dg_read_field_def_pb_ha_message(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_pb_ha_message(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 32 - 7 -> dg_read_field_def_pb_ha_message(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_pb_ha_message(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_pb_ha_message_id(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
      16 -> d_field_pb_ha_message_type(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
      24 -> d_field_pb_ha_message_to_uid(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
      32 -> d_field_pb_ha_message_from_uid(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
      42 -> d_field_pb_ha_message_payload(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_pb_ha_message(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
	    1 -> skip_64_pb_ha_message(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
	    2 -> skip_length_delimited_pb_ha_message(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
	    3 -> skip_group_pb_ha_message(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
	    5 -> skip_32_pb_ha_message(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
	  end
    end;
dg_read_field_def_pb_ha_message(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, _) -> #pb_ha_message{id = F@_1, type = F@_2, to_uid = F@_3, from_uid = F@_4, payload = F@_5}.

d_field_pb_ha_message_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_pb_ha_message_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_pb_ha_message_id(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end, dfp_read_field_def_pb_ha_message(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_pb_ha_message_type(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_pb_ha_message_type(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_pb_ha_message_type(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_pb_ha_message.Type'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_pb_ha_message(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_pb_ha_message_to_uid(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_pb_ha_message_to_uid(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_pb_ha_message_to_uid(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest}, dfp_read_field_def_pb_ha_message(RestF, 0, 0, F@_1, F@_2, NewFValue, F@_4, F@_5, TrUserData).

d_field_pb_ha_message_from_uid(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_pb_ha_message_from_uid(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_pb_ha_message_from_uid(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest}, dfp_read_field_def_pb_ha_message(RestF, 0, 0, F@_1, F@_2, F@_3, NewFValue, F@_5, TrUserData).

d_field_pb_ha_message_payload(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_pb_ha_message_payload(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_pb_ha_message_payload(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_pb_msg_payload(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_pb_ha_message(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4,
				     if Prev == undefined -> NewFValue;
					true -> merge_msg_pb_msg_payload(Prev, NewFValue, TrUserData)
				     end,
				     TrUserData).

skip_varint_pb_ha_message(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> skip_varint_pb_ha_message(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_varint_pb_ha_message(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_pb_ha_message(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_pb_ha_message(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> skip_length_delimited_pb_ha_message(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_length_delimited_pb_ha_message(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_pb_ha_message(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_pb_ha_message(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_pb_ha_message(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_pb_ha_message(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_pb_ha_message(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_64_pb_ha_message(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_pb_ha_message(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

decode_msg_pb_ha_presence(Bin, TrUserData) -> dfp_read_field_def_pb_ha_presence(Bin, 0, 0, id(<<>>, TrUserData), id(available, TrUserData), id(0, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_pb_ha_presence(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_pb_ha_presence_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_pb_ha_presence(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_pb_ha_presence_type(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_pb_ha_presence(<<24, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_pb_ha_presence_uid(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_pb_ha_presence(<<32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_pb_ha_presence_last_seen(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_pb_ha_presence(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, _) -> #pb_ha_presence{id = F@_1, type = F@_2, uid = F@_3, last_seen = F@_4};
dfp_read_field_def_pb_ha_presence(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dg_read_field_def_pb_ha_presence(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_pb_ha_presence(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> dg_read_field_def_pb_ha_presence(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_pb_ha_presence(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_pb_ha_presence_id(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
      16 -> d_field_pb_ha_presence_type(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
      24 -> d_field_pb_ha_presence_uid(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
      32 -> d_field_pb_ha_presence_last_seen(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_pb_ha_presence(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
	    1 -> skip_64_pb_ha_presence(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
	    2 -> skip_length_delimited_pb_ha_presence(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
	    3 -> skip_group_pb_ha_presence(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
	    5 -> skip_32_pb_ha_presence(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData)
	  end
    end;
dg_read_field_def_pb_ha_presence(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, _) -> #pb_ha_presence{id = F@_1, type = F@_2, uid = F@_3, last_seen = F@_4}.

d_field_pb_ha_presence_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_pb_ha_presence_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_pb_ha_presence_id(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end, dfp_read_field_def_pb_ha_presence(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, TrUserData).

d_field_pb_ha_presence_type(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_pb_ha_presence_type(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_pb_ha_presence_type(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_pb_ha_presence.Type'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_pb_ha_presence(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, TrUserData).

d_field_pb_ha_presence_uid(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_pb_ha_presence_uid(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_pb_ha_presence_uid(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest}, dfp_read_field_def_pb_ha_presence(RestF, 0, 0, F@_1, F@_2, NewFValue, F@_4, TrUserData).

d_field_pb_ha_presence_last_seen(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_pb_ha_presence_last_seen(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_pb_ha_presence_last_seen(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest}, dfp_read_field_def_pb_ha_presence(RestF, 0, 0, F@_1, F@_2, F@_3, NewFValue, TrUserData).

skip_varint_pb_ha_presence(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> skip_varint_pb_ha_presence(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_pb_ha_presence(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_pb_ha_presence(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_pb_ha_presence(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> skip_length_delimited_pb_ha_presence(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_pb_ha_presence(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_pb_ha_presence(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_pb_ha_presence(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_pb_ha_presence(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_pb_ha_presence(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_pb_ha_presence(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_pb_ha_presence(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_pb_ha_presence(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

decode_msg_pb_ha_ack(Bin, TrUserData) -> dfp_read_field_def_pb_ha_ack(Bin, 0, 0, id(<<>>, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_pb_ha_ack(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_pb_ha_ack_id(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_pb_ha_ack(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_pb_ha_ack_timestamp(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_pb_ha_ack(<<>>, 0, 0, F@_1, F@_2, _) -> #pb_ha_ack{id = F@_1, timestamp = F@_2};
dfp_read_field_def_pb_ha_ack(Other, Z1, Z2, F@_1, F@_2, TrUserData) -> dg_read_field_def_pb_ha_ack(Other, Z1, Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_pb_ha_ack(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_pb_ha_ack(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_pb_ha_ack(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_pb_ha_ack_id(Rest, 0, 0, F@_1, F@_2, TrUserData);
      16 -> d_field_pb_ha_ack_timestamp(Rest, 0, 0, F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_pb_ha_ack(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_pb_ha_ack(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 -> skip_length_delimited_pb_ha_ack(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    3 -> skip_group_pb_ha_ack(Rest, Key bsr 3, 0, F@_1, F@_2, TrUserData);
	    5 -> skip_32_pb_ha_ack(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_pb_ha_ack(<<>>, 0, 0, F@_1, F@_2, _) -> #pb_ha_ack{id = F@_1, timestamp = F@_2}.

d_field_pb_ha_ack_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_pb_ha_ack_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_pb_ha_ack_id(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end, dfp_read_field_def_pb_ha_ack(RestF, 0, 0, NewFValue, F@_2, TrUserData).

d_field_pb_ha_ack_timestamp(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_pb_ha_ack_timestamp(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_pb_ha_ack_timestamp(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest}, dfp_read_field_def_pb_ha_ack(RestF, 0, 0, F@_1, NewFValue, TrUserData).

skip_varint_pb_ha_ack(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> skip_varint_pb_ha_ack(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_pb_ha_ack(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_pb_ha_ack(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_pb_ha_ack(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_pb_ha_ack(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_pb_ha_ack(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_pb_ha_ack(Rest2, 0, 0, F@_1, F@_2, TrUserData).

skip_group_pb_ha_ack(Bin, FNum, Z2, F@_1, F@_2, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_pb_ha_ack(Rest, 0, Z2, F@_1, F@_2, TrUserData).

skip_32_pb_ha_ack(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_pb_ha_ack(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_64_pb_ha_ack(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_pb_ha_ack(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

decode_msg_pb_ha_error(Bin, TrUserData) -> dfp_read_field_def_pb_ha_error(Bin, 0, 0, id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_pb_ha_error(<<10, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_pb_ha_error_reason(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_pb_ha_error(<<>>, 0, 0, F@_1, _) -> #pb_ha_error{reason = F@_1};
dfp_read_field_def_pb_ha_error(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_pb_ha_error(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_pb_ha_error(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_pb_ha_error(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_pb_ha_error(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_pb_ha_error_reason(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_pb_ha_error(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_pb_ha_error(Rest, 0, 0, F@_1, TrUserData);
	    2 -> skip_length_delimited_pb_ha_error(Rest, 0, 0, F@_1, TrUserData);
	    3 -> skip_group_pb_ha_error(Rest, Key bsr 3, 0, F@_1, TrUserData);
	    5 -> skip_32_pb_ha_error(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_pb_ha_error(<<>>, 0, 0, F@_1, _) -> #pb_ha_error{reason = F@_1}.

d_field_pb_ha_error_reason(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_pb_ha_error_reason(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_pb_ha_error_reason(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end, dfp_read_field_def_pb_ha_error(RestF, 0, 0, NewFValue, TrUserData).

skip_varint_pb_ha_error(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_pb_ha_error(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_pb_ha_error(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_pb_ha_error(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_pb_ha_error(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_pb_ha_error(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_pb_ha_error(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_pb_ha_error(Rest2, 0, 0, F@_1, TrUserData).

skip_group_pb_ha_error(Bin, FNum, Z2, F@_1, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_pb_ha_error(Rest, 0, Z2, F@_1, TrUserData).

skip_32_pb_ha_error(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_pb_ha_error(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_pb_ha_error(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_pb_ha_error(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_pb_packet(Bin, TrUserData) -> dfp_read_field_def_pb_packet(Bin, 0, 0, id(undefined, TrUserData), TrUserData).

dfp_read_field_def_pb_packet(<<10, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_pb_packet_msg(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_pb_packet(<<18, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_pb_packet_iq(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_pb_packet(<<26, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_pb_packet_ack(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_pb_packet(<<34, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_pb_packet_presence(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_pb_packet(<<42, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_pb_packet_error(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_pb_packet(<<>>, 0, 0, F@_1, _) -> #pb_packet{stanza = F@_1};
dfp_read_field_def_pb_packet(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_pb_packet(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_pb_packet(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_pb_packet(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_pb_packet(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_pb_packet_msg(Rest, 0, 0, F@_1, TrUserData);
      18 -> d_field_pb_packet_iq(Rest, 0, 0, F@_1, TrUserData);
      26 -> d_field_pb_packet_ack(Rest, 0, 0, F@_1, TrUserData);
      34 -> d_field_pb_packet_presence(Rest, 0, 0, F@_1, TrUserData);
      42 -> d_field_pb_packet_error(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_pb_packet(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_pb_packet(Rest, 0, 0, F@_1, TrUserData);
	    2 -> skip_length_delimited_pb_packet(Rest, 0, 0, F@_1, TrUserData);
	    3 -> skip_group_pb_packet(Rest, Key bsr 3, 0, F@_1, TrUserData);
	    5 -> skip_32_pb_packet(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_pb_packet(<<>>, 0, 0, F@_1, _) -> #pb_packet{stanza = F@_1}.

d_field_pb_packet_msg(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_pb_packet_msg(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_pb_packet_msg(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_pb_ha_message(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_pb_packet(RestF, 0, 0,
				 case Prev of
				   undefined -> id({msg, NewFValue}, TrUserData);
				   {msg, MVPrev} -> id({msg, merge_msg_pb_ha_message(MVPrev, NewFValue, TrUserData)}, TrUserData);
				   _ -> id({msg, NewFValue}, TrUserData)
				 end,
				 TrUserData).

d_field_pb_packet_iq(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_pb_packet_iq(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_pb_packet_iq(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_pb_ha_iq(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_pb_packet(RestF, 0, 0,
				 case Prev of
				   undefined -> id({iq, NewFValue}, TrUserData);
				   {iq, MVPrev} -> id({iq, merge_msg_pb_ha_iq(MVPrev, NewFValue, TrUserData)}, TrUserData);
				   _ -> id({iq, NewFValue}, TrUserData)
				 end,
				 TrUserData).

d_field_pb_packet_ack(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_pb_packet_ack(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_pb_packet_ack(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_pb_ha_ack(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_pb_packet(RestF, 0, 0,
				 case Prev of
				   undefined -> id({ack, NewFValue}, TrUserData);
				   {ack, MVPrev} -> id({ack, merge_msg_pb_ha_ack(MVPrev, NewFValue, TrUserData)}, TrUserData);
				   _ -> id({ack, NewFValue}, TrUserData)
				 end,
				 TrUserData).

d_field_pb_packet_presence(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_pb_packet_presence(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_pb_packet_presence(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_pb_ha_presence(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_pb_packet(RestF, 0, 0,
				 case Prev of
				   undefined -> id({presence, NewFValue}, TrUserData);
				   {presence, MVPrev} -> id({presence, merge_msg_pb_ha_presence(MVPrev, NewFValue, TrUserData)}, TrUserData);
				   _ -> id({presence, NewFValue}, TrUserData)
				 end,
				 TrUserData).

d_field_pb_packet_error(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_pb_packet_error(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_pb_packet_error(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_pb_ha_error(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_pb_packet(RestF, 0, 0,
				 case Prev of
				   undefined -> id({error, NewFValue}, TrUserData);
				   {error, MVPrev} -> id({error, merge_msg_pb_ha_error(MVPrev, NewFValue, TrUserData)}, TrUserData);
				   _ -> id({error, NewFValue}, TrUserData)
				 end,
				 TrUserData).

skip_varint_pb_packet(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_pb_packet(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_pb_packet(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_pb_packet(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_pb_packet(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_pb_packet(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_pb_packet(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_pb_packet(Rest2, 0, 0, F@_1, TrUserData).

skip_group_pb_packet(Bin, FNum, Z2, F@_1, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_pb_packet(Rest, 0, Z2, F@_1, TrUserData).

skip_32_pb_packet(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_pb_packet(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_pb_packet(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_pb_packet(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_pb_auth_request(Bin, TrUserData) -> dfp_read_field_def_pb_auth_request(Bin, 0, 0, id(0, TrUserData), id(<<>>, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_pb_auth_request(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_pb_auth_request_uid(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_pb_auth_request(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_pb_auth_request_pwd(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_pb_auth_request(<<26, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_pb_auth_request_cm(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_pb_auth_request(<<34, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_pb_auth_request_cv(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_pb_auth_request(<<42, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_pb_auth_request_resource(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_pb_auth_request(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, _) -> #pb_auth_request{uid = F@_1, pwd = F@_2, cm = F@_3, cv = F@_4, resource = F@_5};
dfp_read_field_def_pb_auth_request(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dg_read_field_def_pb_auth_request(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_pb_auth_request(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 32 - 7 -> dg_read_field_def_pb_auth_request(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_pb_auth_request(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_pb_auth_request_uid(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
      18 -> d_field_pb_auth_request_pwd(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
      26 -> d_field_pb_auth_request_cm(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
      34 -> d_field_pb_auth_request_cv(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
      42 -> d_field_pb_auth_request_resource(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_pb_auth_request(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
	    1 -> skip_64_pb_auth_request(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
	    2 -> skip_length_delimited_pb_auth_request(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
	    3 -> skip_group_pb_auth_request(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
	    5 -> skip_32_pb_auth_request(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
	  end
    end;
dg_read_field_def_pb_auth_request(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, _) -> #pb_auth_request{uid = F@_1, pwd = F@_2, cm = F@_3, cv = F@_4, resource = F@_5}.

d_field_pb_auth_request_uid(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_pb_auth_request_uid(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_pb_auth_request_uid(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest}, dfp_read_field_def_pb_auth_request(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_pb_auth_request_pwd(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_pb_auth_request_pwd(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_pb_auth_request_pwd(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end, dfp_read_field_def_pb_auth_request(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_pb_auth_request_cm(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_pb_auth_request_cm(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_pb_auth_request_cm(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, Prev, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_pb_client_mode(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_pb_auth_request(RestF, 0, 0, F@_1, F@_2,
				       if Prev == undefined -> NewFValue;
					  true -> merge_msg_pb_client_mode(Prev, NewFValue, TrUserData)
				       end,
				       F@_4, F@_5, TrUserData).

d_field_pb_auth_request_cv(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_pb_auth_request_cv(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_pb_auth_request_cv(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, Prev, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_pb_client_version(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_pb_auth_request(RestF, 0, 0, F@_1, F@_2, F@_3,
				       if Prev == undefined -> NewFValue;
					  true -> merge_msg_pb_client_version(Prev, NewFValue, TrUserData)
				       end,
				       F@_5, TrUserData).

d_field_pb_auth_request_resource(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_pb_auth_request_resource(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_pb_auth_request_resource(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end, dfp_read_field_def_pb_auth_request(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, NewFValue, TrUserData).

skip_varint_pb_auth_request(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> skip_varint_pb_auth_request(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_varint_pb_auth_request(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_pb_auth_request(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_pb_auth_request(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> skip_length_delimited_pb_auth_request(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_length_delimited_pb_auth_request(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_pb_auth_request(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_pb_auth_request(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_pb_auth_request(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_pb_auth_request(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_pb_auth_request(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_64_pb_auth_request(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_pb_auth_request(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

decode_msg_pb_auth_result(Bin, TrUserData) -> dfp_read_field_def_pb_auth_result(Bin, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_pb_auth_result(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_pb_auth_result_result(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_pb_auth_result(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_pb_auth_result_reason(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_pb_auth_result(<<>>, 0, 0, F@_1, F@_2, _) -> #pb_auth_result{result = F@_1, reason = F@_2};
dfp_read_field_def_pb_auth_result(Other, Z1, Z2, F@_1, F@_2, TrUserData) -> dg_read_field_def_pb_auth_result(Other, Z1, Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_pb_auth_result(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_pb_auth_result(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_pb_auth_result(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_pb_auth_result_result(Rest, 0, 0, F@_1, F@_2, TrUserData);
      18 -> d_field_pb_auth_result_reason(Rest, 0, 0, F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_pb_auth_result(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_pb_auth_result(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 -> skip_length_delimited_pb_auth_result(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    3 -> skip_group_pb_auth_result(Rest, Key bsr 3, 0, F@_1, F@_2, TrUserData);
	    5 -> skip_32_pb_auth_result(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_pb_auth_result(<<>>, 0, 0, F@_1, F@_2, _) -> #pb_auth_result{result = F@_1, reason = F@_2}.

d_field_pb_auth_result_result(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_pb_auth_result_result(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_pb_auth_result_result(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end, dfp_read_field_def_pb_auth_result(RestF, 0, 0, NewFValue, F@_2, TrUserData).

d_field_pb_auth_result_reason(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_pb_auth_result_reason(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_pb_auth_result_reason(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end, dfp_read_field_def_pb_auth_result(RestF, 0, 0, F@_1, NewFValue, TrUserData).

skip_varint_pb_auth_result(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> skip_varint_pb_auth_result(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_pb_auth_result(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_pb_auth_result(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_pb_auth_result(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_pb_auth_result(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_pb_auth_result(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_pb_auth_result(Rest2, 0, 0, F@_1, F@_2, TrUserData).

skip_group_pb_auth_result(Bin, FNum, Z2, F@_1, F@_2, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_pb_auth_result(Rest, 0, Z2, F@_1, F@_2, TrUserData).

skip_32_pb_auth_result(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_pb_auth_result(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_64_pb_auth_result(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_pb_auth_result(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

decode_msg_pb_client_mode(Bin, TrUserData) -> dfp_read_field_def_pb_client_mode(Bin, 0, 0, id(active, TrUserData), TrUserData).

dfp_read_field_def_pb_client_mode(<<8, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_pb_client_mode_mode(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_pb_client_mode(<<>>, 0, 0, F@_1, _) -> #pb_client_mode{mode = F@_1};
dfp_read_field_def_pb_client_mode(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_pb_client_mode(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_pb_client_mode(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_pb_client_mode(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_pb_client_mode(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_pb_client_mode_mode(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_pb_client_mode(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_pb_client_mode(Rest, 0, 0, F@_1, TrUserData);
	    2 -> skip_length_delimited_pb_client_mode(Rest, 0, 0, F@_1, TrUserData);
	    3 -> skip_group_pb_client_mode(Rest, Key bsr 3, 0, F@_1, TrUserData);
	    5 -> skip_32_pb_client_mode(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_pb_client_mode(<<>>, 0, 0, F@_1, _) -> #pb_client_mode{mode = F@_1}.

d_field_pb_client_mode_mode(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_pb_client_mode_mode(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_pb_client_mode_mode(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_pb_client_mode.Mode'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest}, dfp_read_field_def_pb_client_mode(RestF, 0, 0, NewFValue, TrUserData).

skip_varint_pb_client_mode(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_pb_client_mode(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_pb_client_mode(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_pb_client_mode(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_pb_client_mode(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_pb_client_mode(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_pb_client_mode(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_pb_client_mode(Rest2, 0, 0, F@_1, TrUserData).

skip_group_pb_client_mode(Bin, FNum, Z2, F@_1, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_pb_client_mode(Rest, 0, Z2, F@_1, TrUserData).

skip_32_pb_client_mode(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_pb_client_mode(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_pb_client_mode(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_pb_client_mode(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_pb_client_version(Bin, TrUserData) -> dfp_read_field_def_pb_client_version(Bin, 0, 0, id(<<>>, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_pb_client_version(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_pb_client_version_version(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_pb_client_version(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_pb_client_version_expires_in_seconds(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_pb_client_version(<<>>, 0, 0, F@_1, F@_2, _) -> #pb_client_version{version = F@_1, expires_in_seconds = F@_2};
dfp_read_field_def_pb_client_version(Other, Z1, Z2, F@_1, F@_2, TrUserData) -> dg_read_field_def_pb_client_version(Other, Z1, Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_pb_client_version(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_pb_client_version(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_pb_client_version(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_pb_client_version_version(Rest, 0, 0, F@_1, F@_2, TrUserData);
      16 -> d_field_pb_client_version_expires_in_seconds(Rest, 0, 0, F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_pb_client_version(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_pb_client_version(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 -> skip_length_delimited_pb_client_version(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    3 -> skip_group_pb_client_version(Rest, Key bsr 3, 0, F@_1, F@_2, TrUserData);
	    5 -> skip_32_pb_client_version(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_pb_client_version(<<>>, 0, 0, F@_1, F@_2, _) -> #pb_client_version{version = F@_1, expires_in_seconds = F@_2}.

d_field_pb_client_version_version(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_pb_client_version_version(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_pb_client_version_version(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end, dfp_read_field_def_pb_client_version(RestF, 0, 0, NewFValue, F@_2, TrUserData).

d_field_pb_client_version_expires_in_seconds(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_pb_client_version_expires_in_seconds(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_pb_client_version_expires_in_seconds(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest}, dfp_read_field_def_pb_client_version(RestF, 0, 0, F@_1, NewFValue, TrUserData).

skip_varint_pb_client_version(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> skip_varint_pb_client_version(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_pb_client_version(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_pb_client_version(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_pb_client_version(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_pb_client_version(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_pb_client_version(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_pb_client_version(Rest2, 0, 0, F@_1, F@_2, TrUserData).

skip_group_pb_client_version(Bin, FNum, Z2, F@_1, F@_2, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_pb_client_version(Rest, 0, Z2, F@_1, F@_2, TrUserData).

skip_32_pb_client_version(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_pb_client_version(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_64_pb_client_version(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_pb_client_version(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

decode_msg_pb_upload_avatar(Bin, TrUserData) -> dfp_read_field_def_pb_upload_avatar(Bin, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_pb_upload_avatar(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_pb_upload_avatar_id(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_pb_upload_avatar(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_pb_upload_avatar_data(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_pb_upload_avatar(<<>>, 0, 0, F@_1, F@_2, _) -> #pb_upload_avatar{id = F@_1, data = F@_2};
dfp_read_field_def_pb_upload_avatar(Other, Z1, Z2, F@_1, F@_2, TrUserData) -> dg_read_field_def_pb_upload_avatar(Other, Z1, Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_pb_upload_avatar(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_pb_upload_avatar(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_pb_upload_avatar(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_pb_upload_avatar_id(Rest, 0, 0, F@_1, F@_2, TrUserData);
      18 -> d_field_pb_upload_avatar_data(Rest, 0, 0, F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_pb_upload_avatar(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_pb_upload_avatar(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 -> skip_length_delimited_pb_upload_avatar(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    3 -> skip_group_pb_upload_avatar(Rest, Key bsr 3, 0, F@_1, F@_2, TrUserData);
	    5 -> skip_32_pb_upload_avatar(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_pb_upload_avatar(<<>>, 0, 0, F@_1, F@_2, _) -> #pb_upload_avatar{id = F@_1, data = F@_2}.

d_field_pb_upload_avatar_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_pb_upload_avatar_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_pb_upload_avatar_id(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end, dfp_read_field_def_pb_upload_avatar(RestF, 0, 0, NewFValue, F@_2, TrUserData).

d_field_pb_upload_avatar_data(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_pb_upload_avatar_data(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_pb_upload_avatar_data(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end, dfp_read_field_def_pb_upload_avatar(RestF, 0, 0, F@_1, NewFValue, TrUserData).

skip_varint_pb_upload_avatar(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> skip_varint_pb_upload_avatar(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_pb_upload_avatar(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_pb_upload_avatar(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_pb_upload_avatar(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_pb_upload_avatar(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_pb_upload_avatar(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_pb_upload_avatar(Rest2, 0, 0, F@_1, F@_2, TrUserData).

skip_group_pb_upload_avatar(Bin, FNum, Z2, F@_1, F@_2, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_pb_upload_avatar(Rest, 0, Z2, F@_1, F@_2, TrUserData).

skip_32_pb_upload_avatar(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_pb_upload_avatar(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_64_pb_upload_avatar(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_pb_upload_avatar(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

decode_msg_pb_avatar(Bin, TrUserData) -> dfp_read_field_def_pb_avatar(Bin, 0, 0, id(<<>>, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_pb_avatar(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_pb_avatar_id(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_pb_avatar(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_pb_avatar_uid(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_pb_avatar(<<>>, 0, 0, F@_1, F@_2, _) -> #pb_avatar{id = F@_1, uid = F@_2};
dfp_read_field_def_pb_avatar(Other, Z1, Z2, F@_1, F@_2, TrUserData) -> dg_read_field_def_pb_avatar(Other, Z1, Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_pb_avatar(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_pb_avatar(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_pb_avatar(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_pb_avatar_id(Rest, 0, 0, F@_1, F@_2, TrUserData);
      16 -> d_field_pb_avatar_uid(Rest, 0, 0, F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_pb_avatar(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_pb_avatar(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 -> skip_length_delimited_pb_avatar(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    3 -> skip_group_pb_avatar(Rest, Key bsr 3, 0, F@_1, F@_2, TrUserData);
	    5 -> skip_32_pb_avatar(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_pb_avatar(<<>>, 0, 0, F@_1, F@_2, _) -> #pb_avatar{id = F@_1, uid = F@_2}.

d_field_pb_avatar_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_pb_avatar_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_pb_avatar_id(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end, dfp_read_field_def_pb_avatar(RestF, 0, 0, NewFValue, F@_2, TrUserData).

d_field_pb_avatar_uid(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_pb_avatar_uid(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_pb_avatar_uid(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest}, dfp_read_field_def_pb_avatar(RestF, 0, 0, F@_1, NewFValue, TrUserData).

skip_varint_pb_avatar(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> skip_varint_pb_avatar(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_pb_avatar(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_pb_avatar(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_pb_avatar(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_pb_avatar(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_pb_avatar(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_pb_avatar(Rest2, 0, 0, F@_1, F@_2, TrUserData).

skip_group_pb_avatar(Bin, FNum, Z2, F@_1, F@_2, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_pb_avatar(Rest, 0, Z2, F@_1, F@_2, TrUserData).

skip_32_pb_avatar(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_pb_avatar(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_64_pb_avatar(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_pb_avatar(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

decode_msg_pb_avatars(Bin, TrUserData) -> dfp_read_field_def_pb_avatars(Bin, 0, 0, id([], TrUserData), TrUserData).

dfp_read_field_def_pb_avatars(<<10, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_pb_avatars_avatars(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_pb_avatars(<<>>, 0, 0, R1, TrUserData) -> #pb_avatars{avatars = lists_reverse(R1, TrUserData)};
dfp_read_field_def_pb_avatars(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_pb_avatars(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_pb_avatars(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_pb_avatars(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_pb_avatars(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_pb_avatars_avatars(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_pb_avatars(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_pb_avatars(Rest, 0, 0, F@_1, TrUserData);
	    2 -> skip_length_delimited_pb_avatars(Rest, 0, 0, F@_1, TrUserData);
	    3 -> skip_group_pb_avatars(Rest, Key bsr 3, 0, F@_1, TrUserData);
	    5 -> skip_32_pb_avatars(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_pb_avatars(<<>>, 0, 0, R1, TrUserData) -> #pb_avatars{avatars = lists_reverse(R1, TrUserData)}.

d_field_pb_avatars_avatars(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_pb_avatars_avatars(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_pb_avatars_avatars(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_pb_avatar(Bs, TrUserData), TrUserData), Rest2} end, dfp_read_field_def_pb_avatars(RestF, 0, 0, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_pb_avatars(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_pb_avatars(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_pb_avatars(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_pb_avatars(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_pb_avatars(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_pb_avatars(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_pb_avatars(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_pb_avatars(Rest2, 0, 0, F@_1, TrUserData).

skip_group_pb_avatars(Bin, FNum, Z2, F@_1, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_pb_avatars(Rest, 0, Z2, F@_1, TrUserData).

skip_32_pb_avatars(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_pb_avatars(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_pb_avatars(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_pb_avatars(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_pb_media_url(Bin, TrUserData) -> dfp_read_field_def_pb_media_url(Bin, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_pb_media_url(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_pb_media_url_get(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_pb_media_url(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_pb_media_url_put(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_pb_media_url(<<26, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_pb_media_url_patch(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_pb_media_url(<<>>, 0, 0, F@_1, F@_2, F@_3, _) -> #pb_media_url{get = F@_1, put = F@_2, patch = F@_3};
dfp_read_field_def_pb_media_url(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_pb_media_url(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_pb_media_url(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_pb_media_url(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_pb_media_url(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_pb_media_url_get(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
      18 -> d_field_pb_media_url_put(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
      26 -> d_field_pb_media_url_patch(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_pb_media_url(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
	    1 -> skip_64_pb_media_url(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
	    2 -> skip_length_delimited_pb_media_url(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
	    3 -> skip_group_pb_media_url(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, TrUserData);
	    5 -> skip_32_pb_media_url(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
	  end
    end;
dg_read_field_def_pb_media_url(<<>>, 0, 0, F@_1, F@_2, F@_3, _) -> #pb_media_url{get = F@_1, put = F@_2, patch = F@_3}.

d_field_pb_media_url_get(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_pb_media_url_get(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_pb_media_url_get(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end, dfp_read_field_def_pb_media_url(RestF, 0, 0, NewFValue, F@_2, F@_3, TrUserData).

d_field_pb_media_url_put(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_pb_media_url_put(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_pb_media_url_put(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end, dfp_read_field_def_pb_media_url(RestF, 0, 0, F@_1, NewFValue, F@_3, TrUserData).

d_field_pb_media_url_patch(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_pb_media_url_patch(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_pb_media_url_patch(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end, dfp_read_field_def_pb_media_url(RestF, 0, 0, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_pb_media_url(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_pb_media_url(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
skip_varint_pb_media_url(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_pb_media_url(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_pb_media_url(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_pb_media_url(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_pb_media_url(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_pb_media_url(Rest2, 0, 0, F@_1, F@_2, F@_3, TrUserData).

skip_group_pb_media_url(Bin, FNum, Z2, F@_1, F@_2, F@_3, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_pb_media_url(Rest, 0, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_32_pb_media_url(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_pb_media_url(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_64_pb_media_url(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_pb_media_url(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

decode_msg_pb_upload_media(Bin, TrUserData) -> dfp_read_field_def_pb_upload_media(Bin, 0, 0, id(0, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_pb_upload_media(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_pb_upload_media_size(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_pb_upload_media(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_pb_upload_media_url(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_pb_upload_media(<<>>, 0, 0, F@_1, F@_2, _) -> #pb_upload_media{size = F@_1, url = F@_2};
dfp_read_field_def_pb_upload_media(Other, Z1, Z2, F@_1, F@_2, TrUserData) -> dg_read_field_def_pb_upload_media(Other, Z1, Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_pb_upload_media(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_pb_upload_media(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_pb_upload_media(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_pb_upload_media_size(Rest, 0, 0, F@_1, F@_2, TrUserData);
      18 -> d_field_pb_upload_media_url(Rest, 0, 0, F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_pb_upload_media(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_pb_upload_media(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 -> skip_length_delimited_pb_upload_media(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    3 -> skip_group_pb_upload_media(Rest, Key bsr 3, 0, F@_1, F@_2, TrUserData);
	    5 -> skip_32_pb_upload_media(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_pb_upload_media(<<>>, 0, 0, F@_1, F@_2, _) -> #pb_upload_media{size = F@_1, url = F@_2}.

d_field_pb_upload_media_size(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_pb_upload_media_size(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_pb_upload_media_size(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest}, dfp_read_field_def_pb_upload_media(RestF, 0, 0, NewFValue, F@_2, TrUserData).

d_field_pb_upload_media_url(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_pb_upload_media_url(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_pb_upload_media_url(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_pb_media_url(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_pb_upload_media(RestF, 0, 0, F@_1,
				       if Prev == undefined -> NewFValue;
					  true -> merge_msg_pb_media_url(Prev, NewFValue, TrUserData)
				       end,
				       TrUserData).

skip_varint_pb_upload_media(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> skip_varint_pb_upload_media(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_pb_upload_media(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_pb_upload_media(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_pb_upload_media(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_pb_upload_media(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_pb_upload_media(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_pb_upload_media(Rest2, 0, 0, F@_1, F@_2, TrUserData).

skip_group_pb_upload_media(Bin, FNum, Z2, F@_1, F@_2, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_pb_upload_media(Rest, 0, Z2, F@_1, F@_2, TrUserData).

skip_32_pb_upload_media(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_pb_upload_media(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_64_pb_upload_media(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_pb_upload_media(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

decode_msg_pb_contact(Bin, TrUserData) -> dfp_read_field_def_pb_contact(Bin, 0, 0, id(add, TrUserData), id(<<>>, TrUserData), id(<<>>, TrUserData), id(0, TrUserData), id(<<>>, TrUserData), id(friend, TrUserData), TrUserData).

dfp_read_field_def_pb_contact(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_pb_contact_action(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_pb_contact(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_pb_contact_raw(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_pb_contact(<<26, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_pb_contact_normalized(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_pb_contact(<<32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_pb_contact_uid(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_pb_contact(<<42, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_pb_contact_avatar_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_pb_contact(<<48, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_pb_contact_role(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_pb_contact(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _) -> #pb_contact{action = F@_1, raw = F@_2, normalized = F@_3, uid = F@_4, avatar_id = F@_5, role = F@_6};
dfp_read_field_def_pb_contact(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dg_read_field_def_pb_contact(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

dg_read_field_def_pb_contact(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 32 - 7 -> dg_read_field_def_pb_contact(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dg_read_field_def_pb_contact(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_pb_contact_action(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
      18 -> d_field_pb_contact_raw(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
      26 -> d_field_pb_contact_normalized(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
      32 -> d_field_pb_contact_uid(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
      42 -> d_field_pb_contact_avatar_id(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
      48 -> d_field_pb_contact_role(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_pb_contact(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
	    1 -> skip_64_pb_contact(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
	    2 -> skip_length_delimited_pb_contact(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
	    3 -> skip_group_pb_contact(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
	    5 -> skip_32_pb_contact(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
	  end
    end;
dg_read_field_def_pb_contact(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _) -> #pb_contact{action = F@_1, raw = F@_2, normalized = F@_3, uid = F@_4, avatar_id = F@_5, role = F@_6}.

d_field_pb_contact_action(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_pb_contact_action(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_pb_contact_action(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_pb_contact.Action'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_pb_contact(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_pb_contact_raw(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_pb_contact_raw(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_pb_contact_raw(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end, dfp_read_field_def_pb_contact(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_pb_contact_normalized(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_pb_contact_normalized(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_pb_contact_normalized(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end, dfp_read_field_def_pb_contact(RestF, 0, 0, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, TrUserData).

d_field_pb_contact_uid(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_pb_contact_uid(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_pb_contact_uid(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest}, dfp_read_field_def_pb_contact(RestF, 0, 0, F@_1, F@_2, F@_3, NewFValue, F@_5, F@_6, TrUserData).

d_field_pb_contact_avatar_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_pb_contact_avatar_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_pb_contact_avatar_id(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end, dfp_read_field_def_pb_contact(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, NewFValue, F@_6, TrUserData).

d_field_pb_contact_role(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_pb_contact_role(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_pb_contact_role(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_pb_contact.Role'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_pb_contact(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, NewFValue, TrUserData).

skip_varint_pb_contact(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> skip_varint_pb_contact(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
skip_varint_pb_contact(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dfp_read_field_def_pb_contact(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_length_delimited_pb_contact(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> skip_length_delimited_pb_contact(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
skip_length_delimited_pb_contact(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_pb_contact(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_group_pb_contact(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_pb_contact(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_32_pb_contact(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dfp_read_field_def_pb_contact(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_64_pb_contact(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dfp_read_field_def_pb_contact(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

decode_msg_pb_contact_list(Bin, TrUserData) -> dfp_read_field_def_pb_contact_list(Bin, 0, 0, id(full, TrUserData), id(<<>>, TrUserData), id(0, TrUserData), id(false, TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_pb_contact_list(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_pb_contact_list_type(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_pb_contact_list(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_pb_contact_list_sync_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_pb_contact_list(<<24, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_pb_contact_list_batch_index(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_pb_contact_list(<<32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_pb_contact_list_is_last(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_pb_contact_list(<<42, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_pb_contact_list_contacts(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_pb_contact_list(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, R1, TrUserData) -> #pb_contact_list{type = F@_1, sync_id = F@_2, batch_index = F@_3, is_last = F@_4, contacts = lists_reverse(R1, TrUserData)};
dfp_read_field_def_pb_contact_list(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dg_read_field_def_pb_contact_list(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_pb_contact_list(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 32 - 7 -> dg_read_field_def_pb_contact_list(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_pb_contact_list(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_pb_contact_list_type(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
      18 -> d_field_pb_contact_list_sync_id(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
      24 -> d_field_pb_contact_list_batch_index(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
      32 -> d_field_pb_contact_list_is_last(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
      42 -> d_field_pb_contact_list_contacts(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_pb_contact_list(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
	    1 -> skip_64_pb_contact_list(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
	    2 -> skip_length_delimited_pb_contact_list(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
	    3 -> skip_group_pb_contact_list(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
	    5 -> skip_32_pb_contact_list(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
	  end
    end;
dg_read_field_def_pb_contact_list(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, R1, TrUserData) -> #pb_contact_list{type = F@_1, sync_id = F@_2, batch_index = F@_3, is_last = F@_4, contacts = lists_reverse(R1, TrUserData)}.

d_field_pb_contact_list_type(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_pb_contact_list_type(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_pb_contact_list_type(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_pb_contact_list.Type'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_pb_contact_list(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_pb_contact_list_sync_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_pb_contact_list_sync_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_pb_contact_list_sync_id(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end, dfp_read_field_def_pb_contact_list(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_pb_contact_list_batch_index(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_pb_contact_list_batch_index(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_pb_contact_list_batch_index(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest}, dfp_read_field_def_pb_contact_list(RestF, 0, 0, F@_1, F@_2, NewFValue, F@_4, F@_5, TrUserData).

d_field_pb_contact_list_is_last(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_pb_contact_list_is_last(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_pb_contact_list_is_last(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest}, dfp_read_field_def_pb_contact_list(RestF, 0, 0, F@_1, F@_2, F@_3, NewFValue, F@_5, TrUserData).

d_field_pb_contact_list_contacts(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_pb_contact_list_contacts(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_pb_contact_list_contacts(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_pb_contact(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_pb_contact_list(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_pb_contact_list(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> skip_varint_pb_contact_list(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_varint_pb_contact_list(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_pb_contact_list(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_pb_contact_list(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> skip_length_delimited_pb_contact_list(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_length_delimited_pb_contact_list(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_pb_contact_list(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_pb_contact_list(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_pb_contact_list(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_pb_contact_list(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_pb_contact_list(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_64_pb_contact_list(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_pb_contact_list(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

decode_msg_pb_seen_receipt(Bin, TrUserData) -> dfp_read_field_def_pb_seen_receipt(Bin, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_pb_seen_receipt(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_pb_seen_receipt_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_pb_seen_receipt(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_pb_seen_receipt_thread_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_pb_seen_receipt(<<24, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_pb_seen_receipt_timestamp(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_pb_seen_receipt(<<>>, 0, 0, F@_1, F@_2, F@_3, _) -> #pb_seen_receipt{id = F@_1, thread_id = F@_2, timestamp = F@_3};
dfp_read_field_def_pb_seen_receipt(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_pb_seen_receipt(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_pb_seen_receipt(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_pb_seen_receipt(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_pb_seen_receipt(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_pb_seen_receipt_id(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
      18 -> d_field_pb_seen_receipt_thread_id(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
      24 -> d_field_pb_seen_receipt_timestamp(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_pb_seen_receipt(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
	    1 -> skip_64_pb_seen_receipt(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
	    2 -> skip_length_delimited_pb_seen_receipt(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
	    3 -> skip_group_pb_seen_receipt(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, TrUserData);
	    5 -> skip_32_pb_seen_receipt(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
	  end
    end;
dg_read_field_def_pb_seen_receipt(<<>>, 0, 0, F@_1, F@_2, F@_3, _) -> #pb_seen_receipt{id = F@_1, thread_id = F@_2, timestamp = F@_3}.

d_field_pb_seen_receipt_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_pb_seen_receipt_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_pb_seen_receipt_id(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end, dfp_read_field_def_pb_seen_receipt(RestF, 0, 0, NewFValue, F@_2, F@_3, TrUserData).

d_field_pb_seen_receipt_thread_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_pb_seen_receipt_thread_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_pb_seen_receipt_thread_id(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end, dfp_read_field_def_pb_seen_receipt(RestF, 0, 0, F@_1, NewFValue, F@_3, TrUserData).

d_field_pb_seen_receipt_timestamp(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_pb_seen_receipt_timestamp(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_pb_seen_receipt_timestamp(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest}, dfp_read_field_def_pb_seen_receipt(RestF, 0, 0, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_pb_seen_receipt(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_pb_seen_receipt(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
skip_varint_pb_seen_receipt(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_pb_seen_receipt(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_pb_seen_receipt(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_pb_seen_receipt(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_pb_seen_receipt(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_pb_seen_receipt(Rest2, 0, 0, F@_1, F@_2, F@_3, TrUserData).

skip_group_pb_seen_receipt(Bin, FNum, Z2, F@_1, F@_2, F@_3, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_pb_seen_receipt(Rest, 0, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_32_pb_seen_receipt(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_pb_seen_receipt(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_64_pb_seen_receipt(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_pb_seen_receipt(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

decode_msg_pb_delivery_receipt(Bin, TrUserData) -> dfp_read_field_def_pb_delivery_receipt(Bin, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_pb_delivery_receipt(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_pb_delivery_receipt_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_pb_delivery_receipt(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_pb_delivery_receipt_thread_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_pb_delivery_receipt(<<24, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_pb_delivery_receipt_timestamp(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_pb_delivery_receipt(<<>>, 0, 0, F@_1, F@_2, F@_3, _) -> #pb_delivery_receipt{id = F@_1, thread_id = F@_2, timestamp = F@_3};
dfp_read_field_def_pb_delivery_receipt(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_pb_delivery_receipt(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_pb_delivery_receipt(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_pb_delivery_receipt(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_pb_delivery_receipt(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_pb_delivery_receipt_id(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
      18 -> d_field_pb_delivery_receipt_thread_id(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
      24 -> d_field_pb_delivery_receipt_timestamp(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_pb_delivery_receipt(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
	    1 -> skip_64_pb_delivery_receipt(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
	    2 -> skip_length_delimited_pb_delivery_receipt(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
	    3 -> skip_group_pb_delivery_receipt(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, TrUserData);
	    5 -> skip_32_pb_delivery_receipt(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
	  end
    end;
dg_read_field_def_pb_delivery_receipt(<<>>, 0, 0, F@_1, F@_2, F@_3, _) -> #pb_delivery_receipt{id = F@_1, thread_id = F@_2, timestamp = F@_3}.

d_field_pb_delivery_receipt_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_pb_delivery_receipt_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_pb_delivery_receipt_id(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end, dfp_read_field_def_pb_delivery_receipt(RestF, 0, 0, NewFValue, F@_2, F@_3, TrUserData).

d_field_pb_delivery_receipt_thread_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_pb_delivery_receipt_thread_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_pb_delivery_receipt_thread_id(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end, dfp_read_field_def_pb_delivery_receipt(RestF, 0, 0, F@_1, NewFValue, F@_3, TrUserData).

d_field_pb_delivery_receipt_timestamp(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_pb_delivery_receipt_timestamp(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_pb_delivery_receipt_timestamp(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest}, dfp_read_field_def_pb_delivery_receipt(RestF, 0, 0, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_pb_delivery_receipt(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_pb_delivery_receipt(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
skip_varint_pb_delivery_receipt(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_pb_delivery_receipt(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_pb_delivery_receipt(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_pb_delivery_receipt(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_pb_delivery_receipt(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_pb_delivery_receipt(Rest2, 0, 0, F@_1, F@_2, F@_3, TrUserData).

skip_group_pb_delivery_receipt(Bin, FNum, Z2, F@_1, F@_2, F@_3, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_pb_delivery_receipt(Rest, 0, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_32_pb_delivery_receipt(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_pb_delivery_receipt(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_64_pb_delivery_receipt(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_pb_delivery_receipt(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

decode_msg_pb_feedpost(Bin, TrUserData) -> dfp_read_field_def_pb_feedpost(Bin, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_pb_feedpost(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_pb_feedpost_id(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_pb_feedpost(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_pb_feedpost_payload(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_pb_feedpost(<<>>, 0, 0, F@_1, F@_2, _) -> #pb_feedpost{id = F@_1, payload = F@_2};
dfp_read_field_def_pb_feedpost(Other, Z1, Z2, F@_1, F@_2, TrUserData) -> dg_read_field_def_pb_feedpost(Other, Z1, Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_pb_feedpost(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_pb_feedpost(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_pb_feedpost(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_pb_feedpost_id(Rest, 0, 0, F@_1, F@_2, TrUserData);
      18 -> d_field_pb_feedpost_payload(Rest, 0, 0, F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_pb_feedpost(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_pb_feedpost(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 -> skip_length_delimited_pb_feedpost(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    3 -> skip_group_pb_feedpost(Rest, Key bsr 3, 0, F@_1, F@_2, TrUserData);
	    5 -> skip_32_pb_feedpost(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_pb_feedpost(<<>>, 0, 0, F@_1, F@_2, _) -> #pb_feedpost{id = F@_1, payload = F@_2}.

d_field_pb_feedpost_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_pb_feedpost_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_pb_feedpost_id(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end, dfp_read_field_def_pb_feedpost(RestF, 0, 0, NewFValue, F@_2, TrUserData).

d_field_pb_feedpost_payload(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_pb_feedpost_payload(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_pb_feedpost_payload(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end, dfp_read_field_def_pb_feedpost(RestF, 0, 0, F@_1, NewFValue, TrUserData).

skip_varint_pb_feedpost(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> skip_varint_pb_feedpost(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_pb_feedpost(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_pb_feedpost(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_pb_feedpost(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_pb_feedpost(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_pb_feedpost(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_pb_feedpost(Rest2, 0, 0, F@_1, F@_2, TrUserData).

skip_group_pb_feedpost(Bin, FNum, Z2, F@_1, F@_2, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_pb_feedpost(Rest, 0, Z2, F@_1, F@_2, TrUserData).

skip_32_pb_feedpost(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_pb_feedpost(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_64_pb_feedpost(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_pb_feedpost(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

decode_msg_pb_comment(Bin, TrUserData) -> dfp_read_field_def_pb_comment(Bin, 0, 0, id(<<>>, TrUserData), id(0, TrUserData), id(<<>>, TrUserData), id(<<>>, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_pb_comment(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_pb_comment_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_pb_comment(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_pb_comment_publisher_uid(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_pb_comment(<<26, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_pb_comment_publisher_name(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_pb_comment(<<34, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_pb_comment_post_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_pb_comment(<<42, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_pb_comment_payload(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_pb_comment(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, _) -> #pb_comment{id = F@_1, publisher_uid = F@_2, publisher_name = F@_3, post_id = F@_4, payload = F@_5};
dfp_read_field_def_pb_comment(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dg_read_field_def_pb_comment(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_pb_comment(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 32 - 7 -> dg_read_field_def_pb_comment(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_pb_comment(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_pb_comment_id(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
      16 -> d_field_pb_comment_publisher_uid(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
      26 -> d_field_pb_comment_publisher_name(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
      34 -> d_field_pb_comment_post_id(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
      42 -> d_field_pb_comment_payload(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_pb_comment(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
	    1 -> skip_64_pb_comment(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
	    2 -> skip_length_delimited_pb_comment(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
	    3 -> skip_group_pb_comment(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
	    5 -> skip_32_pb_comment(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
	  end
    end;
dg_read_field_def_pb_comment(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, _) -> #pb_comment{id = F@_1, publisher_uid = F@_2, publisher_name = F@_3, post_id = F@_4, payload = F@_5}.

d_field_pb_comment_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_pb_comment_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_pb_comment_id(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end, dfp_read_field_def_pb_comment(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_pb_comment_publisher_uid(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_pb_comment_publisher_uid(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_pb_comment_publisher_uid(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest}, dfp_read_field_def_pb_comment(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_pb_comment_publisher_name(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_pb_comment_publisher_name(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_pb_comment_publisher_name(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end, dfp_read_field_def_pb_comment(RestF, 0, 0, F@_1, F@_2, NewFValue, F@_4, F@_5, TrUserData).

d_field_pb_comment_post_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_pb_comment_post_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_pb_comment_post_id(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end, dfp_read_field_def_pb_comment(RestF, 0, 0, F@_1, F@_2, F@_3, NewFValue, F@_5, TrUserData).

d_field_pb_comment_payload(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_pb_comment_payload(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_pb_comment_payload(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end, dfp_read_field_def_pb_comment(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, NewFValue, TrUserData).

skip_varint_pb_comment(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> skip_varint_pb_comment(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_varint_pb_comment(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_pb_comment(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_pb_comment(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> skip_length_delimited_pb_comment(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_length_delimited_pb_comment(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_pb_comment(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_pb_comment(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_pb_comment(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_pb_comment(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_pb_comment(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_64_pb_comment(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_pb_comment(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

decode_msg_pb_feed_item(Bin, TrUserData) -> dfp_read_field_def_pb_feed_item(Bin, 0, 0, id(publish, TrUserData), id(0, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_pb_feed_item(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_pb_feed_item_action(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_pb_feed_item(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_pb_feed_item_timestamp(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_pb_feed_item(<<26, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_pb_feed_item_feedpost(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_pb_feed_item(<<34, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_pb_feed_item_comment(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_pb_feed_item(<<>>, 0, 0, F@_1, F@_2, F@_3, _) -> #pb_feed_item{action = F@_1, timestamp = F@_2, item = F@_3};
dfp_read_field_def_pb_feed_item(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_pb_feed_item(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_pb_feed_item(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_pb_feed_item(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_pb_feed_item(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_pb_feed_item_action(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
      16 -> d_field_pb_feed_item_timestamp(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
      26 -> d_field_pb_feed_item_feedpost(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
      34 -> d_field_pb_feed_item_comment(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_pb_feed_item(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
	    1 -> skip_64_pb_feed_item(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
	    2 -> skip_length_delimited_pb_feed_item(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
	    3 -> skip_group_pb_feed_item(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, TrUserData);
	    5 -> skip_32_pb_feed_item(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
	  end
    end;
dg_read_field_def_pb_feed_item(<<>>, 0, 0, F@_1, F@_2, F@_3, _) -> #pb_feed_item{action = F@_1, timestamp = F@_2, item = F@_3}.

d_field_pb_feed_item_action(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_pb_feed_item_action(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_pb_feed_item_action(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_pb_feed_item.Action'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_pb_feed_item(RestF, 0, 0, NewFValue, F@_2, F@_3, TrUserData).

d_field_pb_feed_item_timestamp(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_pb_feed_item_timestamp(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_pb_feed_item_timestamp(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest}, dfp_read_field_def_pb_feed_item(RestF, 0, 0, F@_1, NewFValue, F@_3, TrUserData).

d_field_pb_feed_item_feedpost(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_pb_feed_item_feedpost(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_pb_feed_item_feedpost(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_pb_feedpost(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_pb_feed_item(RestF, 0, 0, F@_1, F@_2,
				    case Prev of
				      undefined -> id({feedpost, NewFValue}, TrUserData);
				      {feedpost, MVPrev} -> id({feedpost, merge_msg_pb_feedpost(MVPrev, NewFValue, TrUserData)}, TrUserData);
				      _ -> id({feedpost, NewFValue}, TrUserData)
				    end,
				    TrUserData).

d_field_pb_feed_item_comment(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_pb_feed_item_comment(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_pb_feed_item_comment(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_pb_comment(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_pb_feed_item(RestF, 0, 0, F@_1, F@_2,
				    case Prev of
				      undefined -> id({comment, NewFValue}, TrUserData);
				      {comment, MVPrev} -> id({comment, merge_msg_pb_comment(MVPrev, NewFValue, TrUserData)}, TrUserData);
				      _ -> id({comment, NewFValue}, TrUserData)
				    end,
				    TrUserData).

skip_varint_pb_feed_item(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_pb_feed_item(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
skip_varint_pb_feed_item(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_pb_feed_item(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_pb_feed_item(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_pb_feed_item(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_pb_feed_item(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_pb_feed_item(Rest2, 0, 0, F@_1, F@_2, F@_3, TrUserData).

skip_group_pb_feed_item(Bin, FNum, Z2, F@_1, F@_2, F@_3, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_pb_feed_item(Rest, 0, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_32_pb_feed_item(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_pb_feed_item(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_64_pb_feed_item(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_pb_feed_item(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

decode_msg_pb_feed_node_items(Bin, TrUserData) -> dfp_read_field_def_pb_feed_node_items(Bin, 0, 0, id(0, TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_pb_feed_node_items(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_pb_feed_node_items_uid(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_pb_feed_node_items(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_pb_feed_node_items_items(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_pb_feed_node_items(<<>>, 0, 0, F@_1, R1, TrUserData) -> #pb_feed_node_items{uid = F@_1, items = lists_reverse(R1, TrUserData)};
dfp_read_field_def_pb_feed_node_items(Other, Z1, Z2, F@_1, F@_2, TrUserData) -> dg_read_field_def_pb_feed_node_items(Other, Z1, Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_pb_feed_node_items(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_pb_feed_node_items(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_pb_feed_node_items(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_pb_feed_node_items_uid(Rest, 0, 0, F@_1, F@_2, TrUserData);
      18 -> d_field_pb_feed_node_items_items(Rest, 0, 0, F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_pb_feed_node_items(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_pb_feed_node_items(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 -> skip_length_delimited_pb_feed_node_items(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    3 -> skip_group_pb_feed_node_items(Rest, Key bsr 3, 0, F@_1, F@_2, TrUserData);
	    5 -> skip_32_pb_feed_node_items(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_pb_feed_node_items(<<>>, 0, 0, F@_1, R1, TrUserData) -> #pb_feed_node_items{uid = F@_1, items = lists_reverse(R1, TrUserData)}.

d_field_pb_feed_node_items_uid(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_pb_feed_node_items_uid(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_pb_feed_node_items_uid(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest}, dfp_read_field_def_pb_feed_node_items(RestF, 0, 0, NewFValue, F@_2, TrUserData).

d_field_pb_feed_node_items_items(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_pb_feed_node_items_items(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_pb_feed_node_items_items(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_pb_feed_item(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_pb_feed_node_items(RestF, 0, 0, F@_1, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_pb_feed_node_items(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> skip_varint_pb_feed_node_items(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_pb_feed_node_items(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_pb_feed_node_items(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_pb_feed_node_items(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_pb_feed_node_items(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_pb_feed_node_items(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_pb_feed_node_items(Rest2, 0, 0, F@_1, F@_2, TrUserData).

skip_group_pb_feed_node_items(Bin, FNum, Z2, F@_1, F@_2, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_pb_feed_node_items(Rest, 0, Z2, F@_1, F@_2, TrUserData).

skip_32_pb_feed_node_items(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_pb_feed_node_items(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_64_pb_feed_node_items(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_pb_feed_node_items(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

decode_msg_pb_whisper_keys(Bin, TrUserData) -> dfp_read_field_def_pb_whisper_keys(Bin, 0, 0, id(0, TrUserData), id(normal, TrUserData), id(<<>>, TrUserData), id(<<>>, TrUserData), id(0, TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_pb_whisper_keys(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_pb_whisper_keys_uid(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_pb_whisper_keys(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_pb_whisper_keys_action(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_pb_whisper_keys(<<26, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_pb_whisper_keys_identity_key(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_pb_whisper_keys(<<34, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_pb_whisper_keys_signed_key(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_pb_whisper_keys(<<40, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_pb_whisper_keys_otp_key_count(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_pb_whisper_keys(<<50, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_pb_whisper_keys_one_time_keys(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_pb_whisper_keys(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, R1, TrUserData) -> #pb_whisper_keys{uid = F@_1, action = F@_2, identity_key = F@_3, signed_key = F@_4, otp_key_count = F@_5, one_time_keys = lists_reverse(R1, TrUserData)};
dfp_read_field_def_pb_whisper_keys(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dg_read_field_def_pb_whisper_keys(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

dg_read_field_def_pb_whisper_keys(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 32 - 7 -> dg_read_field_def_pb_whisper_keys(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dg_read_field_def_pb_whisper_keys(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_pb_whisper_keys_uid(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
      16 -> d_field_pb_whisper_keys_action(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
      26 -> d_field_pb_whisper_keys_identity_key(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
      34 -> d_field_pb_whisper_keys_signed_key(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
      40 -> d_field_pb_whisper_keys_otp_key_count(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
      50 -> d_field_pb_whisper_keys_one_time_keys(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_pb_whisper_keys(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
	    1 -> skip_64_pb_whisper_keys(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
	    2 -> skip_length_delimited_pb_whisper_keys(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
	    3 -> skip_group_pb_whisper_keys(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
	    5 -> skip_32_pb_whisper_keys(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
	  end
    end;
dg_read_field_def_pb_whisper_keys(<<>>, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, R1, TrUserData) -> #pb_whisper_keys{uid = F@_1, action = F@_2, identity_key = F@_3, signed_key = F@_4, otp_key_count = F@_5, one_time_keys = lists_reverse(R1, TrUserData)}.

d_field_pb_whisper_keys_uid(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_pb_whisper_keys_uid(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_pb_whisper_keys_uid(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest}, dfp_read_field_def_pb_whisper_keys(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_pb_whisper_keys_action(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_pb_whisper_keys_action(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_pb_whisper_keys_action(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_pb_whisper_keys.Action'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_pb_whisper_keys(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_pb_whisper_keys_identity_key(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_pb_whisper_keys_identity_key(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_pb_whisper_keys_identity_key(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end, dfp_read_field_def_pb_whisper_keys(RestF, 0, 0, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, TrUserData).

d_field_pb_whisper_keys_signed_key(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_pb_whisper_keys_signed_key(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_pb_whisper_keys_signed_key(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end, dfp_read_field_def_pb_whisper_keys(RestF, 0, 0, F@_1, F@_2, F@_3, NewFValue, F@_5, F@_6, TrUserData).

d_field_pb_whisper_keys_otp_key_count(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_pb_whisper_keys_otp_key_count(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_pb_whisper_keys_otp_key_count(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest}, dfp_read_field_def_pb_whisper_keys(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, NewFValue, F@_6, TrUserData).

d_field_pb_whisper_keys_one_time_keys(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_pb_whisper_keys_one_time_keys(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_pb_whisper_keys_one_time_keys(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_pb_whisper_keys(RestF, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_pb_whisper_keys(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> skip_varint_pb_whisper_keys(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
skip_varint_pb_whisper_keys(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dfp_read_field_def_pb_whisper_keys(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_length_delimited_pb_whisper_keys(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> skip_length_delimited_pb_whisper_keys(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
skip_length_delimited_pb_whisper_keys(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_pb_whisper_keys(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_group_pb_whisper_keys(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_pb_whisper_keys(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_32_pb_whisper_keys(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dfp_read_field_def_pb_whisper_keys(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_64_pb_whisper_keys(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dfp_read_field_def_pb_whisper_keys(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

decode_msg_pb_push_token(Bin, TrUserData) -> dfp_read_field_def_pb_push_token(Bin, 0, 0, id(android, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_pb_push_token(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_pb_push_token_os(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_pb_push_token(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_pb_push_token_token(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_pb_push_token(<<>>, 0, 0, F@_1, F@_2, _) -> #pb_push_token{os = F@_1, token = F@_2};
dfp_read_field_def_pb_push_token(Other, Z1, Z2, F@_1, F@_2, TrUserData) -> dg_read_field_def_pb_push_token(Other, Z1, Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_pb_push_token(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_pb_push_token(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_pb_push_token(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_pb_push_token_os(Rest, 0, 0, F@_1, F@_2, TrUserData);
      18 -> d_field_pb_push_token_token(Rest, 0, 0, F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_pb_push_token(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_pb_push_token(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 -> skip_length_delimited_pb_push_token(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    3 -> skip_group_pb_push_token(Rest, Key bsr 3, 0, F@_1, F@_2, TrUserData);
	    5 -> skip_32_pb_push_token(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_pb_push_token(<<>>, 0, 0, F@_1, F@_2, _) -> #pb_push_token{os = F@_1, token = F@_2}.

d_field_pb_push_token_os(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_pb_push_token_os(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_pb_push_token_os(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_pb_push_token.Os'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest}, dfp_read_field_def_pb_push_token(RestF, 0, 0, NewFValue, F@_2, TrUserData).

d_field_pb_push_token_token(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_pb_push_token_token(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_pb_push_token_token(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end, dfp_read_field_def_pb_push_token(RestF, 0, 0, F@_1, NewFValue, TrUserData).

skip_varint_pb_push_token(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> skip_varint_pb_push_token(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_pb_push_token(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_pb_push_token(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_pb_push_token(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_pb_push_token(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_pb_push_token(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_pb_push_token(Rest2, 0, 0, F@_1, F@_2, TrUserData).

skip_group_pb_push_token(Bin, FNum, Z2, F@_1, F@_2, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_pb_push_token(Rest, 0, Z2, F@_1, F@_2, TrUserData).

skip_32_pb_push_token(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_pb_push_token(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_64_pb_push_token(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_pb_push_token(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

decode_msg_pb_push_register(Bin, TrUserData) -> dfp_read_field_def_pb_push_register(Bin, 0, 0, id(undefined, TrUserData), TrUserData).

dfp_read_field_def_pb_push_register(<<10, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_pb_push_register_push_token(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_pb_push_register(<<>>, 0, 0, F@_1, _) -> #pb_push_register{push_token = F@_1};
dfp_read_field_def_pb_push_register(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_pb_push_register(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_pb_push_register(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_pb_push_register(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_pb_push_register(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_pb_push_register_push_token(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_pb_push_register(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_pb_push_register(Rest, 0, 0, F@_1, TrUserData);
	    2 -> skip_length_delimited_pb_push_register(Rest, 0, 0, F@_1, TrUserData);
	    3 -> skip_group_pb_push_register(Rest, Key bsr 3, 0, F@_1, TrUserData);
	    5 -> skip_32_pb_push_register(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_pb_push_register(<<>>, 0, 0, F@_1, _) -> #pb_push_register{push_token = F@_1}.

d_field_pb_push_register_push_token(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_pb_push_register_push_token(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_pb_push_register_push_token(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_pb_push_token(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_pb_push_register(RestF, 0, 0,
					if Prev == undefined -> NewFValue;
					   true -> merge_msg_pb_push_token(Prev, NewFValue, TrUserData)
					end,
					TrUserData).

skip_varint_pb_push_register(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_pb_push_register(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_pb_push_register(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_pb_push_register(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_pb_push_register(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_pb_push_register(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_pb_push_register(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_pb_push_register(Rest2, 0, 0, F@_1, TrUserData).

skip_group_pb_push_register(Bin, FNum, Z2, F@_1, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_pb_push_register(Rest, 0, Z2, F@_1, TrUserData).

skip_32_pb_push_register(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_pb_push_register(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_pb_push_register(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_pb_push_register(Rest, Z1, Z2, F@_1, TrUserData).

'd_enum_pb_ha_iq.Type'(0) -> get;
'd_enum_pb_ha_iq.Type'(1) -> set;
'd_enum_pb_ha_iq.Type'(2) -> result;
'd_enum_pb_ha_iq.Type'(3) -> error;
'd_enum_pb_ha_iq.Type'(V) -> V.

'd_enum_pb_ha_message.Type'(0) -> chat;
'd_enum_pb_ha_message.Type'(1) -> error;
'd_enum_pb_ha_message.Type'(2) -> groupchat;
'd_enum_pb_ha_message.Type'(3) -> headline;
'd_enum_pb_ha_message.Type'(4) -> normal;
'd_enum_pb_ha_message.Type'(V) -> V.

'd_enum_pb_ha_presence.Type'(0) -> available;
'd_enum_pb_ha_presence.Type'(1) -> away;
'd_enum_pb_ha_presence.Type'(2) -> subscribe;
'd_enum_pb_ha_presence.Type'(3) -> unsubscribe;
'd_enum_pb_ha_presence.Type'(V) -> V.

'd_enum_pb_client_mode.Mode'(0) -> active;
'd_enum_pb_client_mode.Mode'(1) -> passive;
'd_enum_pb_client_mode.Mode'(V) -> V.

'd_enum_pb_contact.Action'(0) -> add;
'd_enum_pb_contact.Action'(1) -> delete;
'd_enum_pb_contact.Action'(V) -> V.

'd_enum_pb_contact.Role'(0) -> friend;
'd_enum_pb_contact.Role'(1) -> none;
'd_enum_pb_contact.Role'(V) -> V.

'd_enum_pb_contact_list.Type'(0) -> full;
'd_enum_pb_contact_list.Type'(1) -> delta;
'd_enum_pb_contact_list.Type'(V) -> V.

'd_enum_pb_feed_item.Action'(0) -> publish;
'd_enum_pb_feed_item.Action'(1) -> retract;
'd_enum_pb_feed_item.Action'(V) -> V.

'd_enum_pb_whisper_keys.Action'(0) -> normal;
'd_enum_pb_whisper_keys.Action'(1) -> add;
'd_enum_pb_whisper_keys.Action'(2) -> count;
'd_enum_pb_whisper_keys.Action'(3) -> get;
'd_enum_pb_whisper_keys.Action'(4) -> set;
'd_enum_pb_whisper_keys.Action'(5) -> update;
'd_enum_pb_whisper_keys.Action'(V) -> V.

'd_enum_pb_push_token.Os'(0) -> android;
'd_enum_pb_push_token.Os'(1) -> ios;
'd_enum_pb_push_token.Os'(2) -> ios_dev;
'd_enum_pb_push_token.Os'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) when element(1, Prev) =:= element(1, New) -> merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) -> merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts) when element(1, Prev) =:= element(1, New), is_list(Opts) -> merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      pb_chat -> merge_msg_pb_chat(Prev, New, TrUserData);
      pb_ping -> merge_msg_pb_ping(Prev, New, TrUserData);
      pb_iq_payload -> merge_msg_pb_iq_payload(Prev, New, TrUserData);
      pb_msg_payload -> merge_msg_pb_msg_payload(Prev, New, TrUserData);
      pb_ha_iq -> merge_msg_pb_ha_iq(Prev, New, TrUserData);
      pb_ha_message -> merge_msg_pb_ha_message(Prev, New, TrUserData);
      pb_ha_presence -> merge_msg_pb_ha_presence(Prev, New, TrUserData);
      pb_ha_ack -> merge_msg_pb_ha_ack(Prev, New, TrUserData);
      pb_ha_error -> merge_msg_pb_ha_error(Prev, New, TrUserData);
      pb_packet -> merge_msg_pb_packet(Prev, New, TrUserData);
      pb_auth_request -> merge_msg_pb_auth_request(Prev, New, TrUserData);
      pb_auth_result -> merge_msg_pb_auth_result(Prev, New, TrUserData);
      pb_client_mode -> merge_msg_pb_client_mode(Prev, New, TrUserData);
      pb_client_version -> merge_msg_pb_client_version(Prev, New, TrUserData);
      pb_upload_avatar -> merge_msg_pb_upload_avatar(Prev, New, TrUserData);
      pb_avatar -> merge_msg_pb_avatar(Prev, New, TrUserData);
      pb_avatars -> merge_msg_pb_avatars(Prev, New, TrUserData);
      pb_media_url -> merge_msg_pb_media_url(Prev, New, TrUserData);
      pb_upload_media -> merge_msg_pb_upload_media(Prev, New, TrUserData);
      pb_contact -> merge_msg_pb_contact(Prev, New, TrUserData);
      pb_contact_list -> merge_msg_pb_contact_list(Prev, New, TrUserData);
      pb_seen_receipt -> merge_msg_pb_seen_receipt(Prev, New, TrUserData);
      pb_delivery_receipt -> merge_msg_pb_delivery_receipt(Prev, New, TrUserData);
      pb_feedpost -> merge_msg_pb_feedpost(Prev, New, TrUserData);
      pb_comment -> merge_msg_pb_comment(Prev, New, TrUserData);
      pb_feed_item -> merge_msg_pb_feed_item(Prev, New, TrUserData);
      pb_feed_node_items -> merge_msg_pb_feed_node_items(Prev, New, TrUserData);
      pb_whisper_keys -> merge_msg_pb_whisper_keys(Prev, New, TrUserData);
      pb_push_token -> merge_msg_pb_push_token(Prev, New, TrUserData);
      pb_push_register -> merge_msg_pb_push_register(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_pb_chat/3}).
merge_msg_pb_chat(#pb_chat{timestamp = PFtimestamp, payload = PFpayload, enc_payload = PFenc_payload}, #pb_chat{timestamp = NFtimestamp, payload = NFpayload, enc_payload = NFenc_payload}, _) ->
    #pb_chat{timestamp =
		 if NFtimestamp =:= undefined -> PFtimestamp;
		    true -> NFtimestamp
		 end,
	     payload =
		 if NFpayload =:= undefined -> PFpayload;
		    true -> NFpayload
		 end,
	     enc_payload =
		 if NFenc_payload =:= undefined -> PFenc_payload;
		    true -> NFenc_payload
		 end}.

-compile({nowarn_unused_function,merge_msg_pb_ping/3}).
merge_msg_pb_ping(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_pb_iq_payload/3}).
merge_msg_pb_iq_payload(#pb_iq_payload{content = PFcontent}, #pb_iq_payload{content = NFcontent}, TrUserData) ->
    #pb_iq_payload{content =
		       case {PFcontent, NFcontent} of
			 {{upload_media, OPFcontent}, {upload_media, ONFcontent}} -> {upload_media, merge_msg_pb_upload_media(OPFcontent, ONFcontent, TrUserData)};
			 {{contact_list, OPFcontent}, {contact_list, ONFcontent}} -> {contact_list, merge_msg_pb_contact_list(OPFcontent, ONFcontent, TrUserData)};
			 {{upload_avatar, OPFcontent}, {upload_avatar, ONFcontent}} -> {upload_avatar, merge_msg_pb_upload_avatar(OPFcontent, ONFcontent, TrUserData)};
			 {{avatar, OPFcontent}, {avatar, ONFcontent}} -> {avatar, merge_msg_pb_avatar(OPFcontent, ONFcontent, TrUserData)};
			 {{avatars, OPFcontent}, {avatars, ONFcontent}} -> {avatars, merge_msg_pb_avatars(OPFcontent, ONFcontent, TrUserData)};
			 {{client_mode, OPFcontent}, {client_mode, ONFcontent}} -> {client_mode, merge_msg_pb_client_mode(OPFcontent, ONFcontent, TrUserData)};
			 {{client_version, OPFcontent}, {client_version, ONFcontent}} -> {client_version, merge_msg_pb_client_version(OPFcontent, ONFcontent, TrUserData)};
			 {{push_register, OPFcontent}, {push_register, ONFcontent}} -> {push_register, merge_msg_pb_push_register(OPFcontent, ONFcontent, TrUserData)};
			 {{whisper_keys, OPFcontent}, {whisper_keys, ONFcontent}} -> {whisper_keys, merge_msg_pb_whisper_keys(OPFcontent, ONFcontent, TrUserData)};
			 {{ping, OPFcontent}, {ping, ONFcontent}} -> {ping, merge_msg_pb_ping(OPFcontent, ONFcontent, TrUserData)};
			 {{feed_item, OPFcontent}, {feed_item, ONFcontent}} -> {feed_item, merge_msg_pb_feed_item(OPFcontent, ONFcontent, TrUserData)};
			 {{feed_node_items, OPFcontent}, {feed_node_items, ONFcontent}} -> {feed_node_items, merge_msg_pb_feed_node_items(OPFcontent, ONFcontent, TrUserData)};
			 {_, undefined} -> PFcontent;
			 _ -> NFcontent
		       end}.

-compile({nowarn_unused_function,merge_msg_pb_msg_payload/3}).
merge_msg_pb_msg_payload(#pb_msg_payload{content = PFcontent}, #pb_msg_payload{content = NFcontent}, TrUserData) ->
    #pb_msg_payload{content =
			case {PFcontent, NFcontent} of
			  {{contact_list, OPFcontent}, {contact_list, ONFcontent}} -> {contact_list, merge_msg_pb_contact_list(OPFcontent, ONFcontent, TrUserData)};
			  {{avatar, OPFcontent}, {avatar, ONFcontent}} -> {avatar, merge_msg_pb_avatar(OPFcontent, ONFcontent, TrUserData)};
			  {{whisper_keys, OPFcontent}, {whisper_keys, ONFcontent}} -> {whisper_keys, merge_msg_pb_whisper_keys(OPFcontent, ONFcontent, TrUserData)};
			  {{seen, OPFcontent}, {seen, ONFcontent}} -> {seen, merge_msg_pb_seen_receipt(OPFcontent, ONFcontent, TrUserData)};
			  {{delivery, OPFcontent}, {delivery, ONFcontent}} -> {delivery, merge_msg_pb_delivery_receipt(OPFcontent, ONFcontent, TrUserData)};
			  {{chat, OPFcontent}, {chat, ONFcontent}} -> {chat, merge_msg_pb_chat(OPFcontent, ONFcontent, TrUserData)};
			  {{feed_item, OPFcontent}, {feed_item, ONFcontent}} -> {feed_item, merge_msg_pb_feed_item(OPFcontent, ONFcontent, TrUserData)};
			  {{feed_node_items, OPFcontent}, {feed_node_items, ONFcontent}} -> {feed_node_items, merge_msg_pb_feed_node_items(OPFcontent, ONFcontent, TrUserData)};
			  {_, undefined} -> PFcontent;
			  _ -> NFcontent
			end}.

-compile({nowarn_unused_function,merge_msg_pb_ha_iq/3}).
merge_msg_pb_ha_iq(#pb_ha_iq{id = PFid, type = PFtype, payload = PFpayload}, #pb_ha_iq{id = NFid, type = NFtype, payload = NFpayload}, TrUserData) ->
    #pb_ha_iq{id =
		  if NFid =:= undefined -> PFid;
		     true -> NFid
		  end,
	      type =
		  if NFtype =:= undefined -> PFtype;
		     true -> NFtype
		  end,
	      payload =
		  if PFpayload /= undefined, NFpayload /= undefined -> merge_msg_pb_iq_payload(PFpayload, NFpayload, TrUserData);
		     PFpayload == undefined -> NFpayload;
		     NFpayload == undefined -> PFpayload
		  end}.

-compile({nowarn_unused_function,merge_msg_pb_ha_message/3}).
merge_msg_pb_ha_message(#pb_ha_message{id = PFid, type = PFtype, to_uid = PFto_uid, from_uid = PFfrom_uid, payload = PFpayload}, #pb_ha_message{id = NFid, type = NFtype, to_uid = NFto_uid, from_uid = NFfrom_uid, payload = NFpayload}, TrUserData) ->
    #pb_ha_message{id =
		       if NFid =:= undefined -> PFid;
			  true -> NFid
		       end,
		   type =
		       if NFtype =:= undefined -> PFtype;
			  true -> NFtype
		       end,
		   to_uid =
		       if NFto_uid =:= undefined -> PFto_uid;
			  true -> NFto_uid
		       end,
		   from_uid =
		       if NFfrom_uid =:= undefined -> PFfrom_uid;
			  true -> NFfrom_uid
		       end,
		   payload =
		       if PFpayload /= undefined, NFpayload /= undefined -> merge_msg_pb_msg_payload(PFpayload, NFpayload, TrUserData);
			  PFpayload == undefined -> NFpayload;
			  NFpayload == undefined -> PFpayload
		       end}.

-compile({nowarn_unused_function,merge_msg_pb_ha_presence/3}).
merge_msg_pb_ha_presence(#pb_ha_presence{id = PFid, type = PFtype, uid = PFuid, last_seen = PFlast_seen}, #pb_ha_presence{id = NFid, type = NFtype, uid = NFuid, last_seen = NFlast_seen}, _) ->
    #pb_ha_presence{id =
			if NFid =:= undefined -> PFid;
			   true -> NFid
			end,
		    type =
			if NFtype =:= undefined -> PFtype;
			   true -> NFtype
			end,
		    uid =
			if NFuid =:= undefined -> PFuid;
			   true -> NFuid
			end,
		    last_seen =
			if NFlast_seen =:= undefined -> PFlast_seen;
			   true -> NFlast_seen
			end}.

-compile({nowarn_unused_function,merge_msg_pb_ha_ack/3}).
merge_msg_pb_ha_ack(#pb_ha_ack{id = PFid, timestamp = PFtimestamp}, #pb_ha_ack{id = NFid, timestamp = NFtimestamp}, _) ->
    #pb_ha_ack{id =
		   if NFid =:= undefined -> PFid;
		      true -> NFid
		   end,
	       timestamp =
		   if NFtimestamp =:= undefined -> PFtimestamp;
		      true -> NFtimestamp
		   end}.

-compile({nowarn_unused_function,merge_msg_pb_ha_error/3}).
merge_msg_pb_ha_error(#pb_ha_error{reason = PFreason}, #pb_ha_error{reason = NFreason}, _) ->
    #pb_ha_error{reason =
		     if NFreason =:= undefined -> PFreason;
			true -> NFreason
		     end}.

-compile({nowarn_unused_function,merge_msg_pb_packet/3}).
merge_msg_pb_packet(#pb_packet{stanza = PFstanza}, #pb_packet{stanza = NFstanza}, TrUserData) ->
    #pb_packet{stanza =
		   case {PFstanza, NFstanza} of
		     {{msg, OPFstanza}, {msg, ONFstanza}} -> {msg, merge_msg_pb_ha_message(OPFstanza, ONFstanza, TrUserData)};
		     {{iq, OPFstanza}, {iq, ONFstanza}} -> {iq, merge_msg_pb_ha_iq(OPFstanza, ONFstanza, TrUserData)};
		     {{ack, OPFstanza}, {ack, ONFstanza}} -> {ack, merge_msg_pb_ha_ack(OPFstanza, ONFstanza, TrUserData)};
		     {{presence, OPFstanza}, {presence, ONFstanza}} -> {presence, merge_msg_pb_ha_presence(OPFstanza, ONFstanza, TrUserData)};
		     {{error, OPFstanza}, {error, ONFstanza}} -> {error, merge_msg_pb_ha_error(OPFstanza, ONFstanza, TrUserData)};
		     {_, undefined} -> PFstanza;
		     _ -> NFstanza
		   end}.

-compile({nowarn_unused_function,merge_msg_pb_auth_request/3}).
merge_msg_pb_auth_request(#pb_auth_request{uid = PFuid, pwd = PFpwd, cm = PFcm, cv = PFcv, resource = PFresource}, #pb_auth_request{uid = NFuid, pwd = NFpwd, cm = NFcm, cv = NFcv, resource = NFresource}, TrUserData) ->
    #pb_auth_request{uid =
			 if NFuid =:= undefined -> PFuid;
			    true -> NFuid
			 end,
		     pwd =
			 if NFpwd =:= undefined -> PFpwd;
			    true -> NFpwd
			 end,
		     cm =
			 if PFcm /= undefined, NFcm /= undefined -> merge_msg_pb_client_mode(PFcm, NFcm, TrUserData);
			    PFcm == undefined -> NFcm;
			    NFcm == undefined -> PFcm
			 end,
		     cv =
			 if PFcv /= undefined, NFcv /= undefined -> merge_msg_pb_client_version(PFcv, NFcv, TrUserData);
			    PFcv == undefined -> NFcv;
			    NFcv == undefined -> PFcv
			 end,
		     resource =
			 if NFresource =:= undefined -> PFresource;
			    true -> NFresource
			 end}.

-compile({nowarn_unused_function,merge_msg_pb_auth_result/3}).
merge_msg_pb_auth_result(#pb_auth_result{result = PFresult, reason = PFreason}, #pb_auth_result{result = NFresult, reason = NFreason}, _) ->
    #pb_auth_result{result =
			if NFresult =:= undefined -> PFresult;
			   true -> NFresult
			end,
		    reason =
			if NFreason =:= undefined -> PFreason;
			   true -> NFreason
			end}.

-compile({nowarn_unused_function,merge_msg_pb_client_mode/3}).
merge_msg_pb_client_mode(#pb_client_mode{mode = PFmode}, #pb_client_mode{mode = NFmode}, _) ->
    #pb_client_mode{mode =
			if NFmode =:= undefined -> PFmode;
			   true -> NFmode
			end}.

-compile({nowarn_unused_function,merge_msg_pb_client_version/3}).
merge_msg_pb_client_version(#pb_client_version{version = PFversion, expires_in_seconds = PFexpires_in_seconds}, #pb_client_version{version = NFversion, expires_in_seconds = NFexpires_in_seconds}, _) ->
    #pb_client_version{version =
			   if NFversion =:= undefined -> PFversion;
			      true -> NFversion
			   end,
		       expires_in_seconds =
			   if NFexpires_in_seconds =:= undefined -> PFexpires_in_seconds;
			      true -> NFexpires_in_seconds
			   end}.

-compile({nowarn_unused_function,merge_msg_pb_upload_avatar/3}).
merge_msg_pb_upload_avatar(#pb_upload_avatar{id = PFid, data = PFdata}, #pb_upload_avatar{id = NFid, data = NFdata}, _) ->
    #pb_upload_avatar{id =
			  if NFid =:= undefined -> PFid;
			     true -> NFid
			  end,
		      data =
			  if NFdata =:= undefined -> PFdata;
			     true -> NFdata
			  end}.

-compile({nowarn_unused_function,merge_msg_pb_avatar/3}).
merge_msg_pb_avatar(#pb_avatar{id = PFid, uid = PFuid}, #pb_avatar{id = NFid, uid = NFuid}, _) ->
    #pb_avatar{id =
		   if NFid =:= undefined -> PFid;
		      true -> NFid
		   end,
	       uid =
		   if NFuid =:= undefined -> PFuid;
		      true -> NFuid
		   end}.

-compile({nowarn_unused_function,merge_msg_pb_avatars/3}).
merge_msg_pb_avatars(#pb_avatars{avatars = PFavatars}, #pb_avatars{avatars = NFavatars}, TrUserData) ->
    #pb_avatars{avatars =
		    if PFavatars /= undefined, NFavatars /= undefined -> 'erlang_++'(PFavatars, NFavatars, TrUserData);
		       PFavatars == undefined -> NFavatars;
		       NFavatars == undefined -> PFavatars
		    end}.

-compile({nowarn_unused_function,merge_msg_pb_media_url/3}).
merge_msg_pb_media_url(#pb_media_url{get = PFget, put = PFput, patch = PFpatch}, #pb_media_url{get = NFget, put = NFput, patch = NFpatch}, _) ->
    #pb_media_url{get =
		      if NFget =:= undefined -> PFget;
			 true -> NFget
		      end,
		  put =
		      if NFput =:= undefined -> PFput;
			 true -> NFput
		      end,
		  patch =
		      if NFpatch =:= undefined -> PFpatch;
			 true -> NFpatch
		      end}.

-compile({nowarn_unused_function,merge_msg_pb_upload_media/3}).
merge_msg_pb_upload_media(#pb_upload_media{size = PFsize, url = PFurl}, #pb_upload_media{size = NFsize, url = NFurl}, TrUserData) ->
    #pb_upload_media{size =
			 if NFsize =:= undefined -> PFsize;
			    true -> NFsize
			 end,
		     url =
			 if PFurl /= undefined, NFurl /= undefined -> merge_msg_pb_media_url(PFurl, NFurl, TrUserData);
			    PFurl == undefined -> NFurl;
			    NFurl == undefined -> PFurl
			 end}.

-compile({nowarn_unused_function,merge_msg_pb_contact/3}).
merge_msg_pb_contact(#pb_contact{action = PFaction, raw = PFraw, normalized = PFnormalized, uid = PFuid, avatar_id = PFavatar_id, role = PFrole},
		     #pb_contact{action = NFaction, raw = NFraw, normalized = NFnormalized, uid = NFuid, avatar_id = NFavatar_id, role = NFrole}, _) ->
    #pb_contact{action =
		    if NFaction =:= undefined -> PFaction;
		       true -> NFaction
		    end,
		raw =
		    if NFraw =:= undefined -> PFraw;
		       true -> NFraw
		    end,
		normalized =
		    if NFnormalized =:= undefined -> PFnormalized;
		       true -> NFnormalized
		    end,
		uid =
		    if NFuid =:= undefined -> PFuid;
		       true -> NFuid
		    end,
		avatar_id =
		    if NFavatar_id =:= undefined -> PFavatar_id;
		       true -> NFavatar_id
		    end,
		role =
		    if NFrole =:= undefined -> PFrole;
		       true -> NFrole
		    end}.

-compile({nowarn_unused_function,merge_msg_pb_contact_list/3}).
merge_msg_pb_contact_list(#pb_contact_list{type = PFtype, sync_id = PFsync_id, batch_index = PFbatch_index, is_last = PFis_last, contacts = PFcontacts},
			  #pb_contact_list{type = NFtype, sync_id = NFsync_id, batch_index = NFbatch_index, is_last = NFis_last, contacts = NFcontacts}, TrUserData) ->
    #pb_contact_list{type =
			 if NFtype =:= undefined -> PFtype;
			    true -> NFtype
			 end,
		     sync_id =
			 if NFsync_id =:= undefined -> PFsync_id;
			    true -> NFsync_id
			 end,
		     batch_index =
			 if NFbatch_index =:= undefined -> PFbatch_index;
			    true -> NFbatch_index
			 end,
		     is_last =
			 if NFis_last =:= undefined -> PFis_last;
			    true -> NFis_last
			 end,
		     contacts =
			 if PFcontacts /= undefined, NFcontacts /= undefined -> 'erlang_++'(PFcontacts, NFcontacts, TrUserData);
			    PFcontacts == undefined -> NFcontacts;
			    NFcontacts == undefined -> PFcontacts
			 end}.

-compile({nowarn_unused_function,merge_msg_pb_seen_receipt/3}).
merge_msg_pb_seen_receipt(#pb_seen_receipt{id = PFid, thread_id = PFthread_id, timestamp = PFtimestamp}, #pb_seen_receipt{id = NFid, thread_id = NFthread_id, timestamp = NFtimestamp}, _) ->
    #pb_seen_receipt{id =
			 if NFid =:= undefined -> PFid;
			    true -> NFid
			 end,
		     thread_id =
			 if NFthread_id =:= undefined -> PFthread_id;
			    true -> NFthread_id
			 end,
		     timestamp =
			 if NFtimestamp =:= undefined -> PFtimestamp;
			    true -> NFtimestamp
			 end}.

-compile({nowarn_unused_function,merge_msg_pb_delivery_receipt/3}).
merge_msg_pb_delivery_receipt(#pb_delivery_receipt{id = PFid, thread_id = PFthread_id, timestamp = PFtimestamp}, #pb_delivery_receipt{id = NFid, thread_id = NFthread_id, timestamp = NFtimestamp}, _) ->
    #pb_delivery_receipt{id =
			     if NFid =:= undefined -> PFid;
				true -> NFid
			     end,
			 thread_id =
			     if NFthread_id =:= undefined -> PFthread_id;
				true -> NFthread_id
			     end,
			 timestamp =
			     if NFtimestamp =:= undefined -> PFtimestamp;
				true -> NFtimestamp
			     end}.

-compile({nowarn_unused_function,merge_msg_pb_feedpost/3}).
merge_msg_pb_feedpost(#pb_feedpost{id = PFid, payload = PFpayload}, #pb_feedpost{id = NFid, payload = NFpayload}, _) ->
    #pb_feedpost{id =
		     if NFid =:= undefined -> PFid;
			true -> NFid
		     end,
		 payload =
		     if NFpayload =:= undefined -> PFpayload;
			true -> NFpayload
		     end}.

-compile({nowarn_unused_function,merge_msg_pb_comment/3}).
merge_msg_pb_comment(#pb_comment{id = PFid, publisher_uid = PFpublisher_uid, publisher_name = PFpublisher_name, post_id = PFpost_id, payload = PFpayload},
		     #pb_comment{id = NFid, publisher_uid = NFpublisher_uid, publisher_name = NFpublisher_name, post_id = NFpost_id, payload = NFpayload}, _) ->
    #pb_comment{id =
		    if NFid =:= undefined -> PFid;
		       true -> NFid
		    end,
		publisher_uid =
		    if NFpublisher_uid =:= undefined -> PFpublisher_uid;
		       true -> NFpublisher_uid
		    end,
		publisher_name =
		    if NFpublisher_name =:= undefined -> PFpublisher_name;
		       true -> NFpublisher_name
		    end,
		post_id =
		    if NFpost_id =:= undefined -> PFpost_id;
		       true -> NFpost_id
		    end,
		payload =
		    if NFpayload =:= undefined -> PFpayload;
		       true -> NFpayload
		    end}.

-compile({nowarn_unused_function,merge_msg_pb_feed_item/3}).
merge_msg_pb_feed_item(#pb_feed_item{action = PFaction, timestamp = PFtimestamp, item = PFitem}, #pb_feed_item{action = NFaction, timestamp = NFtimestamp, item = NFitem}, TrUserData) ->
    #pb_feed_item{action =
		      if NFaction =:= undefined -> PFaction;
			 true -> NFaction
		      end,
		  timestamp =
		      if NFtimestamp =:= undefined -> PFtimestamp;
			 true -> NFtimestamp
		      end,
		  item =
		      case {PFitem, NFitem} of
			{{feedpost, OPFitem}, {feedpost, ONFitem}} -> {feedpost, merge_msg_pb_feedpost(OPFitem, ONFitem, TrUserData)};
			{{comment, OPFitem}, {comment, ONFitem}} -> {comment, merge_msg_pb_comment(OPFitem, ONFitem, TrUserData)};
			{_, undefined} -> PFitem;
			_ -> NFitem
		      end}.

-compile({nowarn_unused_function,merge_msg_pb_feed_node_items/3}).
merge_msg_pb_feed_node_items(#pb_feed_node_items{uid = PFuid, items = PFitems}, #pb_feed_node_items{uid = NFuid, items = NFitems}, TrUserData) ->
    #pb_feed_node_items{uid =
			    if NFuid =:= undefined -> PFuid;
			       true -> NFuid
			    end,
			items =
			    if PFitems /= undefined, NFitems /= undefined -> 'erlang_++'(PFitems, NFitems, TrUserData);
			       PFitems == undefined -> NFitems;
			       NFitems == undefined -> PFitems
			    end}.

-compile({nowarn_unused_function,merge_msg_pb_whisper_keys/3}).
merge_msg_pb_whisper_keys(#pb_whisper_keys{uid = PFuid, action = PFaction, identity_key = PFidentity_key, signed_key = PFsigned_key, otp_key_count = PFotp_key_count, one_time_keys = PFone_time_keys},
			  #pb_whisper_keys{uid = NFuid, action = NFaction, identity_key = NFidentity_key, signed_key = NFsigned_key, otp_key_count = NFotp_key_count, one_time_keys = NFone_time_keys}, TrUserData) ->
    #pb_whisper_keys{uid =
			 if NFuid =:= undefined -> PFuid;
			    true -> NFuid
			 end,
		     action =
			 if NFaction =:= undefined -> PFaction;
			    true -> NFaction
			 end,
		     identity_key =
			 if NFidentity_key =:= undefined -> PFidentity_key;
			    true -> NFidentity_key
			 end,
		     signed_key =
			 if NFsigned_key =:= undefined -> PFsigned_key;
			    true -> NFsigned_key
			 end,
		     otp_key_count =
			 if NFotp_key_count =:= undefined -> PFotp_key_count;
			    true -> NFotp_key_count
			 end,
		     one_time_keys =
			 if PFone_time_keys /= undefined, NFone_time_keys /= undefined -> 'erlang_++'(PFone_time_keys, NFone_time_keys, TrUserData);
			    PFone_time_keys == undefined -> NFone_time_keys;
			    NFone_time_keys == undefined -> PFone_time_keys
			 end}.

-compile({nowarn_unused_function,merge_msg_pb_push_token/3}).
merge_msg_pb_push_token(#pb_push_token{os = PFos, token = PFtoken}, #pb_push_token{os = NFos, token = NFtoken}, _) ->
    #pb_push_token{os =
		       if NFos =:= undefined -> PFos;
			  true -> NFos
		       end,
		   token =
		       if NFtoken =:= undefined -> PFtoken;
			  true -> NFtoken
		       end}.

-compile({nowarn_unused_function,merge_msg_pb_push_register/3}).
merge_msg_pb_push_register(#pb_push_register{push_token = PFpush_token}, #pb_push_register{push_token = NFpush_token}, TrUserData) ->
    #pb_push_register{push_token =
			  if PFpush_token /= undefined, NFpush_token /= undefined -> merge_msg_pb_push_token(PFpush_token, NFpush_token, TrUserData);
			     PFpush_token == undefined -> NFpush_token;
			     NFpush_token == undefined -> PFpush_token
			  end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), []);
verify_msg(X) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      pb_chat -> v_msg_pb_chat(Msg, [MsgName], TrUserData);
      pb_ping -> v_msg_pb_ping(Msg, [MsgName], TrUserData);
      pb_iq_payload -> v_msg_pb_iq_payload(Msg, [MsgName], TrUserData);
      pb_msg_payload -> v_msg_pb_msg_payload(Msg, [MsgName], TrUserData);
      pb_ha_iq -> v_msg_pb_ha_iq(Msg, [MsgName], TrUserData);
      pb_ha_message -> v_msg_pb_ha_message(Msg, [MsgName], TrUserData);
      pb_ha_presence -> v_msg_pb_ha_presence(Msg, [MsgName], TrUserData);
      pb_ha_ack -> v_msg_pb_ha_ack(Msg, [MsgName], TrUserData);
      pb_ha_error -> v_msg_pb_ha_error(Msg, [MsgName], TrUserData);
      pb_packet -> v_msg_pb_packet(Msg, [MsgName], TrUserData);
      pb_auth_request -> v_msg_pb_auth_request(Msg, [MsgName], TrUserData);
      pb_auth_result -> v_msg_pb_auth_result(Msg, [MsgName], TrUserData);
      pb_client_mode -> v_msg_pb_client_mode(Msg, [MsgName], TrUserData);
      pb_client_version -> v_msg_pb_client_version(Msg, [MsgName], TrUserData);
      pb_upload_avatar -> v_msg_pb_upload_avatar(Msg, [MsgName], TrUserData);
      pb_avatar -> v_msg_pb_avatar(Msg, [MsgName], TrUserData);
      pb_avatars -> v_msg_pb_avatars(Msg, [MsgName], TrUserData);
      pb_media_url -> v_msg_pb_media_url(Msg, [MsgName], TrUserData);
      pb_upload_media -> v_msg_pb_upload_media(Msg, [MsgName], TrUserData);
      pb_contact -> v_msg_pb_contact(Msg, [MsgName], TrUserData);
      pb_contact_list -> v_msg_pb_contact_list(Msg, [MsgName], TrUserData);
      pb_seen_receipt -> v_msg_pb_seen_receipt(Msg, [MsgName], TrUserData);
      pb_delivery_receipt -> v_msg_pb_delivery_receipt(Msg, [MsgName], TrUserData);
      pb_feedpost -> v_msg_pb_feedpost(Msg, [MsgName], TrUserData);
      pb_comment -> v_msg_pb_comment(Msg, [MsgName], TrUserData);
      pb_feed_item -> v_msg_pb_feed_item(Msg, [MsgName], TrUserData);
      pb_feed_node_items -> v_msg_pb_feed_node_items(Msg, [MsgName], TrUserData);
      pb_whisper_keys -> v_msg_pb_whisper_keys(Msg, [MsgName], TrUserData);
      pb_push_token -> v_msg_pb_push_token(Msg, [MsgName], TrUserData);
      pb_push_register -> v_msg_pb_push_register(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_pb_chat/3}).
-dialyzer({nowarn_function,v_msg_pb_chat/3}).
v_msg_pb_chat(#pb_chat{timestamp = F1, payload = F2, enc_payload = F3}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int64(F1, [timestamp | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [payload | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_bytes(F3, [enc_payload | Path], TrUserData)
    end,
    ok;
v_msg_pb_chat(X, Path, _TrUserData) -> mk_type_error({expected_msg, pb_chat}, X, Path).

-compile({nowarn_unused_function,v_msg_pb_ping/3}).
-dialyzer({nowarn_function,v_msg_pb_ping/3}).
v_msg_pb_ping(#pb_ping{}, _Path, _) -> ok;
v_msg_pb_ping(X, Path, _TrUserData) -> mk_type_error({expected_msg, pb_ping}, X, Path).

-compile({nowarn_unused_function,v_msg_pb_iq_payload/3}).
-dialyzer({nowarn_function,v_msg_pb_iq_payload/3}).
v_msg_pb_iq_payload(#pb_iq_payload{content = F1}, Path, TrUserData) ->
    case F1 of
      undefined -> ok;
      {upload_media, OF1} -> v_msg_pb_upload_media(OF1, [upload_media, content | Path], TrUserData);
      {contact_list, OF1} -> v_msg_pb_contact_list(OF1, [contact_list, content | Path], TrUserData);
      {upload_avatar, OF1} -> v_msg_pb_upload_avatar(OF1, [upload_avatar, content | Path], TrUserData);
      {avatar, OF1} -> v_msg_pb_avatar(OF1, [avatar, content | Path], TrUserData);
      {avatars, OF1} -> v_msg_pb_avatars(OF1, [avatars, content | Path], TrUserData);
      {client_mode, OF1} -> v_msg_pb_client_mode(OF1, [client_mode, content | Path], TrUserData);
      {client_version, OF1} -> v_msg_pb_client_version(OF1, [client_version, content | Path], TrUserData);
      {push_register, OF1} -> v_msg_pb_push_register(OF1, [push_register, content | Path], TrUserData);
      {whisper_keys, OF1} -> v_msg_pb_whisper_keys(OF1, [whisper_keys, content | Path], TrUserData);
      {ping, OF1} -> v_msg_pb_ping(OF1, [ping, content | Path], TrUserData);
      {feed_item, OF1} -> v_msg_pb_feed_item(OF1, [feed_item, content | Path], TrUserData);
      {feed_node_items, OF1} -> v_msg_pb_feed_node_items(OF1, [feed_node_items, content | Path], TrUserData);
      _ -> mk_type_error(invalid_oneof, F1, [content | Path])
    end,
    ok;
v_msg_pb_iq_payload(X, Path, _TrUserData) -> mk_type_error({expected_msg, pb_iq_payload}, X, Path).

-compile({nowarn_unused_function,v_msg_pb_msg_payload/3}).
-dialyzer({nowarn_function,v_msg_pb_msg_payload/3}).
v_msg_pb_msg_payload(#pb_msg_payload{content = F1}, Path, TrUserData) ->
    case F1 of
      undefined -> ok;
      {contact_list, OF1} -> v_msg_pb_contact_list(OF1, [contact_list, content | Path], TrUserData);
      {avatar, OF1} -> v_msg_pb_avatar(OF1, [avatar, content | Path], TrUserData);
      {whisper_keys, OF1} -> v_msg_pb_whisper_keys(OF1, [whisper_keys, content | Path], TrUserData);
      {seen, OF1} -> v_msg_pb_seen_receipt(OF1, [seen, content | Path], TrUserData);
      {delivery, OF1} -> v_msg_pb_delivery_receipt(OF1, [delivery, content | Path], TrUserData);
      {chat, OF1} -> v_msg_pb_chat(OF1, [chat, content | Path], TrUserData);
      {feed_item, OF1} -> v_msg_pb_feed_item(OF1, [feed_item, content | Path], TrUserData);
      {feed_node_items, OF1} -> v_msg_pb_feed_node_items(OF1, [feed_node_items, content | Path], TrUserData);
      _ -> mk_type_error(invalid_oneof, F1, [content | Path])
    end,
    ok;
v_msg_pb_msg_payload(X, Path, _TrUserData) -> mk_type_error({expected_msg, pb_msg_payload}, X, Path).

-compile({nowarn_unused_function,v_msg_pb_ha_iq/3}).
-dialyzer({nowarn_function,v_msg_pb_ha_iq/3}).
v_msg_pb_ha_iq(#pb_ha_iq{id = F1, type = F2, payload = F3}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> 'v_enum_pb_ha_iq.Type'(F2, [type | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_msg_pb_iq_payload(F3, [payload | Path], TrUserData)
    end,
    ok;
v_msg_pb_ha_iq(X, Path, _TrUserData) -> mk_type_error({expected_msg, pb_ha_iq}, X, Path).

-compile({nowarn_unused_function,v_msg_pb_ha_message/3}).
-dialyzer({nowarn_function,v_msg_pb_ha_message/3}).
v_msg_pb_ha_message(#pb_ha_message{id = F1, type = F2, to_uid = F3, from_uid = F4, payload = F5}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> 'v_enum_pb_ha_message.Type'(F2, [type | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_int64(F3, [to_uid | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_int64(F4, [from_uid | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_msg_pb_msg_payload(F5, [payload | Path], TrUserData)
    end,
    ok;
v_msg_pb_ha_message(X, Path, _TrUserData) -> mk_type_error({expected_msg, pb_ha_message}, X, Path).

-compile({nowarn_unused_function,v_msg_pb_ha_presence/3}).
-dialyzer({nowarn_function,v_msg_pb_ha_presence/3}).
v_msg_pb_ha_presence(#pb_ha_presence{id = F1, type = F2, uid = F3, last_seen = F4}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> 'v_enum_pb_ha_presence.Type'(F2, [type | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_int64(F3, [uid | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_int64(F4, [last_seen | Path], TrUserData)
    end,
    ok;
v_msg_pb_ha_presence(X, Path, _TrUserData) -> mk_type_error({expected_msg, pb_ha_presence}, X, Path).

-compile({nowarn_unused_function,v_msg_pb_ha_ack/3}).
-dialyzer({nowarn_function,v_msg_pb_ha_ack/3}).
v_msg_pb_ha_ack(#pb_ha_ack{id = F1, timestamp = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, [timestamp | Path], TrUserData)
    end,
    ok;
v_msg_pb_ha_ack(X, Path, _TrUserData) -> mk_type_error({expected_msg, pb_ha_ack}, X, Path).

-compile({nowarn_unused_function,v_msg_pb_ha_error/3}).
-dialyzer({nowarn_function,v_msg_pb_ha_error/3}).
v_msg_pb_ha_error(#pb_ha_error{reason = F1}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [reason | Path], TrUserData)
    end,
    ok;
v_msg_pb_ha_error(X, Path, _TrUserData) -> mk_type_error({expected_msg, pb_ha_error}, X, Path).

-compile({nowarn_unused_function,v_msg_pb_packet/3}).
-dialyzer({nowarn_function,v_msg_pb_packet/3}).
v_msg_pb_packet(#pb_packet{stanza = F1}, Path, TrUserData) ->
    case F1 of
      undefined -> ok;
      {msg, OF1} -> v_msg_pb_ha_message(OF1, [msg, stanza | Path], TrUserData);
      {iq, OF1} -> v_msg_pb_ha_iq(OF1, [iq, stanza | Path], TrUserData);
      {ack, OF1} -> v_msg_pb_ha_ack(OF1, [ack, stanza | Path], TrUserData);
      {presence, OF1} -> v_msg_pb_ha_presence(OF1, [presence, stanza | Path], TrUserData);
      {error, OF1} -> v_msg_pb_ha_error(OF1, [error, stanza | Path], TrUserData);
      _ -> mk_type_error(invalid_oneof, F1, [stanza | Path])
    end,
    ok;
v_msg_pb_packet(X, Path, _TrUserData) -> mk_type_error({expected_msg, pb_packet}, X, Path).

-compile({nowarn_unused_function,v_msg_pb_auth_request/3}).
-dialyzer({nowarn_function,v_msg_pb_auth_request/3}).
v_msg_pb_auth_request(#pb_auth_request{uid = F1, pwd = F2, cm = F3, cv = F4, resource = F5}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int64(F1, [uid | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [pwd | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_msg_pb_client_mode(F3, [cm | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_msg_pb_client_version(F4, [cv | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [resource | Path], TrUserData)
    end,
    ok;
v_msg_pb_auth_request(X, Path, _TrUserData) -> mk_type_error({expected_msg, pb_auth_request}, X, Path).

-compile({nowarn_unused_function,v_msg_pb_auth_result/3}).
-dialyzer({nowarn_function,v_msg_pb_auth_result/3}).
v_msg_pb_auth_result(#pb_auth_result{result = F1, reason = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [result | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [reason | Path], TrUserData)
    end,
    ok;
v_msg_pb_auth_result(X, Path, _TrUserData) -> mk_type_error({expected_msg, pb_auth_result}, X, Path).

-compile({nowarn_unused_function,v_msg_pb_client_mode/3}).
-dialyzer({nowarn_function,v_msg_pb_client_mode/3}).
v_msg_pb_client_mode(#pb_client_mode{mode = F1}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> 'v_enum_pb_client_mode.Mode'(F1, [mode | Path], TrUserData)
    end,
    ok;
v_msg_pb_client_mode(X, Path, _TrUserData) -> mk_type_error({expected_msg, pb_client_mode}, X, Path).

-compile({nowarn_unused_function,v_msg_pb_client_version/3}).
-dialyzer({nowarn_function,v_msg_pb_client_version/3}).
v_msg_pb_client_version(#pb_client_version{version = F1, expires_in_seconds = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [version | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, [expires_in_seconds | Path], TrUserData)
    end,
    ok;
v_msg_pb_client_version(X, Path, _TrUserData) -> mk_type_error({expected_msg, pb_client_version}, X, Path).

-compile({nowarn_unused_function,v_msg_pb_upload_avatar/3}).
-dialyzer({nowarn_function,v_msg_pb_upload_avatar/3}).
v_msg_pb_upload_avatar(#pb_upload_avatar{id = F1, data = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [data | Path], TrUserData)
    end,
    ok;
v_msg_pb_upload_avatar(X, Path, _TrUserData) -> mk_type_error({expected_msg, pb_upload_avatar}, X, Path).

-compile({nowarn_unused_function,v_msg_pb_avatar/3}).
-dialyzer({nowarn_function,v_msg_pb_avatar/3}).
v_msg_pb_avatar(#pb_avatar{id = F1, uid = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, [uid | Path], TrUserData)
    end,
    ok;
v_msg_pb_avatar(X, Path, _TrUserData) -> mk_type_error({expected_msg, pb_avatar}, X, Path).

-compile({nowarn_unused_function,v_msg_pb_avatars/3}).
-dialyzer({nowarn_function,v_msg_pb_avatars/3}).
v_msg_pb_avatars(#pb_avatars{avatars = F1}, Path, TrUserData) ->
    if is_list(F1) -> _ = [v_msg_pb_avatar(Elem, [avatars | Path], TrUserData) || Elem <- F1], ok;
       true -> mk_type_error({invalid_list_of, {msg, pb_avatar}}, F1, [avatars | Path])
    end,
    ok;
v_msg_pb_avatars(X, Path, _TrUserData) -> mk_type_error({expected_msg, pb_avatars}, X, Path).

-compile({nowarn_unused_function,v_msg_pb_media_url/3}).
-dialyzer({nowarn_function,v_msg_pb_media_url/3}).
v_msg_pb_media_url(#pb_media_url{get = F1, put = F2, patch = F3}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [get | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [put | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [patch | Path], TrUserData)
    end,
    ok;
v_msg_pb_media_url(X, Path, _TrUserData) -> mk_type_error({expected_msg, pb_media_url}, X, Path).

-compile({nowarn_unused_function,v_msg_pb_upload_media/3}).
-dialyzer({nowarn_function,v_msg_pb_upload_media/3}).
v_msg_pb_upload_media(#pb_upload_media{size = F1, url = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int64(F1, [size | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_msg_pb_media_url(F2, [url | Path], TrUserData)
    end,
    ok;
v_msg_pb_upload_media(X, Path, _TrUserData) -> mk_type_error({expected_msg, pb_upload_media}, X, Path).

-compile({nowarn_unused_function,v_msg_pb_contact/3}).
-dialyzer({nowarn_function,v_msg_pb_contact/3}).
v_msg_pb_contact(#pb_contact{action = F1, raw = F2, normalized = F3, uid = F4, avatar_id = F5, role = F6}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> 'v_enum_pb_contact.Action'(F1, [action | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [raw | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [normalized | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_int64(F4, [uid | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [avatar_id | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> 'v_enum_pb_contact.Role'(F6, [role | Path], TrUserData)
    end,
    ok;
v_msg_pb_contact(X, Path, _TrUserData) -> mk_type_error({expected_msg, pb_contact}, X, Path).

-compile({nowarn_unused_function,v_msg_pb_contact_list/3}).
-dialyzer({nowarn_function,v_msg_pb_contact_list/3}).
v_msg_pb_contact_list(#pb_contact_list{type = F1, sync_id = F2, batch_index = F3, is_last = F4, contacts = F5}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> 'v_enum_pb_contact_list.Type'(F1, [type | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [sync_id | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_int32(F3, [batch_index | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_bool(F4, [is_last | Path], TrUserData)
    end,
    if is_list(F5) -> _ = [v_msg_pb_contact(Elem, [contacts | Path], TrUserData) || Elem <- F5], ok;
       true -> mk_type_error({invalid_list_of, {msg, pb_contact}}, F5, [contacts | Path])
    end,
    ok;
v_msg_pb_contact_list(X, Path, _TrUserData) -> mk_type_error({expected_msg, pb_contact_list}, X, Path).

-compile({nowarn_unused_function,v_msg_pb_seen_receipt/3}).
-dialyzer({nowarn_function,v_msg_pb_seen_receipt/3}).
v_msg_pb_seen_receipt(#pb_seen_receipt{id = F1, thread_id = F2, timestamp = F3}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [thread_id | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_int64(F3, [timestamp | Path], TrUserData)
    end,
    ok;
v_msg_pb_seen_receipt(X, Path, _TrUserData) -> mk_type_error({expected_msg, pb_seen_receipt}, X, Path).

-compile({nowarn_unused_function,v_msg_pb_delivery_receipt/3}).
-dialyzer({nowarn_function,v_msg_pb_delivery_receipt/3}).
v_msg_pb_delivery_receipt(#pb_delivery_receipt{id = F1, thread_id = F2, timestamp = F3}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [thread_id | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_int64(F3, [timestamp | Path], TrUserData)
    end,
    ok;
v_msg_pb_delivery_receipt(X, Path, _TrUserData) -> mk_type_error({expected_msg, pb_delivery_receipt}, X, Path).

-compile({nowarn_unused_function,v_msg_pb_feedpost/3}).
-dialyzer({nowarn_function,v_msg_pb_feedpost/3}).
v_msg_pb_feedpost(#pb_feedpost{id = F1, payload = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [payload | Path], TrUserData)
    end,
    ok;
v_msg_pb_feedpost(X, Path, _TrUserData) -> mk_type_error({expected_msg, pb_feedpost}, X, Path).

-compile({nowarn_unused_function,v_msg_pb_comment/3}).
-dialyzer({nowarn_function,v_msg_pb_comment/3}).
v_msg_pb_comment(#pb_comment{id = F1, publisher_uid = F2, publisher_name = F3, post_id = F4, payload = F5}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, [publisher_uid | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [publisher_name | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [post_id | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_bytes(F5, [payload | Path], TrUserData)
    end,
    ok;
v_msg_pb_comment(X, Path, _TrUserData) -> mk_type_error({expected_msg, pb_comment}, X, Path).

-compile({nowarn_unused_function,v_msg_pb_feed_item/3}).
-dialyzer({nowarn_function,v_msg_pb_feed_item/3}).
v_msg_pb_feed_item(#pb_feed_item{action = F1, timestamp = F2, item = F3}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> 'v_enum_pb_feed_item.Action'(F1, [action | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, [timestamp | Path], TrUserData)
    end,
    case F3 of
      undefined -> ok;
      {feedpost, OF3} -> v_msg_pb_feedpost(OF3, [feedpost, item | Path], TrUserData);
      {comment, OF3} -> v_msg_pb_comment(OF3, [comment, item | Path], TrUserData);
      _ -> mk_type_error(invalid_oneof, F3, [item | Path])
    end,
    ok;
v_msg_pb_feed_item(X, Path, _TrUserData) -> mk_type_error({expected_msg, pb_feed_item}, X, Path).

-compile({nowarn_unused_function,v_msg_pb_feed_node_items/3}).
-dialyzer({nowarn_function,v_msg_pb_feed_node_items/3}).
v_msg_pb_feed_node_items(#pb_feed_node_items{uid = F1, items = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int64(F1, [uid | Path], TrUserData)
    end,
    if is_list(F2) -> _ = [v_msg_pb_feed_item(Elem, [items | Path], TrUserData) || Elem <- F2], ok;
       true -> mk_type_error({invalid_list_of, {msg, pb_feed_item}}, F2, [items | Path])
    end,
    ok;
v_msg_pb_feed_node_items(X, Path, _TrUserData) -> mk_type_error({expected_msg, pb_feed_node_items}, X, Path).

-compile({nowarn_unused_function,v_msg_pb_whisper_keys/3}).
-dialyzer({nowarn_function,v_msg_pb_whisper_keys/3}).
v_msg_pb_whisper_keys(#pb_whisper_keys{uid = F1, action = F2, identity_key = F3, signed_key = F4, otp_key_count = F5, one_time_keys = F6}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int64(F1, [uid | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> 'v_enum_pb_whisper_keys.Action'(F2, [action | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_bytes(F3, [identity_key | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_bytes(F4, [signed_key | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_int32(F5, [otp_key_count | Path], TrUserData)
    end,
    if is_list(F6) -> _ = [v_type_bytes(Elem, [one_time_keys | Path], TrUserData) || Elem <- F6], ok;
       true -> mk_type_error({invalid_list_of, bytes}, F6, [one_time_keys | Path])
    end,
    ok;
v_msg_pb_whisper_keys(X, Path, _TrUserData) -> mk_type_error({expected_msg, pb_whisper_keys}, X, Path).

-compile({nowarn_unused_function,v_msg_pb_push_token/3}).
-dialyzer({nowarn_function,v_msg_pb_push_token/3}).
v_msg_pb_push_token(#pb_push_token{os = F1, token = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> 'v_enum_pb_push_token.Os'(F1, [os | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [token | Path], TrUserData)
    end,
    ok;
v_msg_pb_push_token(X, Path, _TrUserData) -> mk_type_error({expected_msg, pb_push_token}, X, Path).

-compile({nowarn_unused_function,v_msg_pb_push_register/3}).
-dialyzer({nowarn_function,v_msg_pb_push_register/3}).
v_msg_pb_push_register(#pb_push_register{push_token = F1}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_msg_pb_push_token(F1, [push_token | Path], TrUserData)
    end,
    ok;
v_msg_pb_push_register(X, Path, _TrUserData) -> mk_type_error({expected_msg, pb_push_register}, X, Path).

-compile({nowarn_unused_function,'v_enum_pb_ha_iq.Type'/3}).
-dialyzer({nowarn_function,'v_enum_pb_ha_iq.Type'/3}).
'v_enum_pb_ha_iq.Type'(get, _Path, _TrUserData) -> ok;
'v_enum_pb_ha_iq.Type'(set, _Path, _TrUserData) -> ok;
'v_enum_pb_ha_iq.Type'(result, _Path, _TrUserData) -> ok;
'v_enum_pb_ha_iq.Type'(error, _Path, _TrUserData) -> ok;
'v_enum_pb_ha_iq.Type'(V, Path, TrUserData) when is_integer(V) -> v_type_sint32(V, Path, TrUserData);
'v_enum_pb_ha_iq.Type'(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'pb_ha_iq.Type'}, X, Path).

-compile({nowarn_unused_function,'v_enum_pb_ha_message.Type'/3}).
-dialyzer({nowarn_function,'v_enum_pb_ha_message.Type'/3}).
'v_enum_pb_ha_message.Type'(chat, _Path, _TrUserData) -> ok;
'v_enum_pb_ha_message.Type'(error, _Path, _TrUserData) -> ok;
'v_enum_pb_ha_message.Type'(groupchat, _Path, _TrUserData) -> ok;
'v_enum_pb_ha_message.Type'(headline, _Path, _TrUserData) -> ok;
'v_enum_pb_ha_message.Type'(normal, _Path, _TrUserData) -> ok;
'v_enum_pb_ha_message.Type'(V, Path, TrUserData) when is_integer(V) -> v_type_sint32(V, Path, TrUserData);
'v_enum_pb_ha_message.Type'(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'pb_ha_message.Type'}, X, Path).

-compile({nowarn_unused_function,'v_enum_pb_ha_presence.Type'/3}).
-dialyzer({nowarn_function,'v_enum_pb_ha_presence.Type'/3}).
'v_enum_pb_ha_presence.Type'(available, _Path, _TrUserData) -> ok;
'v_enum_pb_ha_presence.Type'(away, _Path, _TrUserData) -> ok;
'v_enum_pb_ha_presence.Type'(subscribe, _Path, _TrUserData) -> ok;
'v_enum_pb_ha_presence.Type'(unsubscribe, _Path, _TrUserData) -> ok;
'v_enum_pb_ha_presence.Type'(V, Path, TrUserData) when is_integer(V) -> v_type_sint32(V, Path, TrUserData);
'v_enum_pb_ha_presence.Type'(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'pb_ha_presence.Type'}, X, Path).

-compile({nowarn_unused_function,'v_enum_pb_client_mode.Mode'/3}).
-dialyzer({nowarn_function,'v_enum_pb_client_mode.Mode'/3}).
'v_enum_pb_client_mode.Mode'(active, _Path, _TrUserData) -> ok;
'v_enum_pb_client_mode.Mode'(passive, _Path, _TrUserData) -> ok;
'v_enum_pb_client_mode.Mode'(V, Path, TrUserData) when is_integer(V) -> v_type_sint32(V, Path, TrUserData);
'v_enum_pb_client_mode.Mode'(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'pb_client_mode.Mode'}, X, Path).

-compile({nowarn_unused_function,'v_enum_pb_contact.Action'/3}).
-dialyzer({nowarn_function,'v_enum_pb_contact.Action'/3}).
'v_enum_pb_contact.Action'(add, _Path, _TrUserData) -> ok;
'v_enum_pb_contact.Action'(delete, _Path, _TrUserData) -> ok;
'v_enum_pb_contact.Action'(V, Path, TrUserData) when is_integer(V) -> v_type_sint32(V, Path, TrUserData);
'v_enum_pb_contact.Action'(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'pb_contact.Action'}, X, Path).

-compile({nowarn_unused_function,'v_enum_pb_contact.Role'/3}).
-dialyzer({nowarn_function,'v_enum_pb_contact.Role'/3}).
'v_enum_pb_contact.Role'(friend, _Path, _TrUserData) -> ok;
'v_enum_pb_contact.Role'(none, _Path, _TrUserData) -> ok;
'v_enum_pb_contact.Role'(V, Path, TrUserData) when is_integer(V) -> v_type_sint32(V, Path, TrUserData);
'v_enum_pb_contact.Role'(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'pb_contact.Role'}, X, Path).

-compile({nowarn_unused_function,'v_enum_pb_contact_list.Type'/3}).
-dialyzer({nowarn_function,'v_enum_pb_contact_list.Type'/3}).
'v_enum_pb_contact_list.Type'(full, _Path, _TrUserData) -> ok;
'v_enum_pb_contact_list.Type'(delta, _Path, _TrUserData) -> ok;
'v_enum_pb_contact_list.Type'(V, Path, TrUserData) when is_integer(V) -> v_type_sint32(V, Path, TrUserData);
'v_enum_pb_contact_list.Type'(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'pb_contact_list.Type'}, X, Path).

-compile({nowarn_unused_function,'v_enum_pb_feed_item.Action'/3}).
-dialyzer({nowarn_function,'v_enum_pb_feed_item.Action'/3}).
'v_enum_pb_feed_item.Action'(publish, _Path, _TrUserData) -> ok;
'v_enum_pb_feed_item.Action'(retract, _Path, _TrUserData) -> ok;
'v_enum_pb_feed_item.Action'(V, Path, TrUserData) when is_integer(V) -> v_type_sint32(V, Path, TrUserData);
'v_enum_pb_feed_item.Action'(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'pb_feed_item.Action'}, X, Path).

-compile({nowarn_unused_function,'v_enum_pb_whisper_keys.Action'/3}).
-dialyzer({nowarn_function,'v_enum_pb_whisper_keys.Action'/3}).
'v_enum_pb_whisper_keys.Action'(normal, _Path, _TrUserData) -> ok;
'v_enum_pb_whisper_keys.Action'(add, _Path, _TrUserData) -> ok;
'v_enum_pb_whisper_keys.Action'(count, _Path, _TrUserData) -> ok;
'v_enum_pb_whisper_keys.Action'(get, _Path, _TrUserData) -> ok;
'v_enum_pb_whisper_keys.Action'(set, _Path, _TrUserData) -> ok;
'v_enum_pb_whisper_keys.Action'(update, _Path, _TrUserData) -> ok;
'v_enum_pb_whisper_keys.Action'(V, Path, TrUserData) when is_integer(V) -> v_type_sint32(V, Path, TrUserData);
'v_enum_pb_whisper_keys.Action'(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'pb_whisper_keys.Action'}, X, Path).

-compile({nowarn_unused_function,'v_enum_pb_push_token.Os'/3}).
-dialyzer({nowarn_function,'v_enum_pb_push_token.Os'/3}).
'v_enum_pb_push_token.Os'(android, _Path, _TrUserData) -> ok;
'v_enum_pb_push_token.Os'(ios, _Path, _TrUserData) -> ok;
'v_enum_pb_push_token.Os'(ios_dev, _Path, _TrUserData) -> ok;
'v_enum_pb_push_token.Os'(V, Path, TrUserData) when is_integer(V) -> v_type_sint32(V, Path, TrUserData);
'v_enum_pb_push_token.Os'(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'pb_push_token.Os'}, X, Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData) when -2147483648 =< N, N =< 2147483647 -> ok;
v_type_sint32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, sint32, signed, 32}, N, Path);
v_type_sint32(X, Path, _TrUserData) -> mk_type_error({bad_integer, sint32, signed, 32}, X, Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData) when -2147483648 =< N, N =< 2147483647 -> ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, int32, signed, 32}, N, Path);
v_type_int32(X, Path, _TrUserData) -> mk_type_error({bad_integer, int32, signed, 32}, X, Path).

-compile({nowarn_unused_function,v_type_int64/3}).
-dialyzer({nowarn_function,v_type_int64/3}).
v_type_int64(N, _Path, _TrUserData) when -9223372036854775808 =< N, N =< 9223372036854775807 -> ok;
v_type_int64(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, int64, signed, 64}, N, Path);
v_type_int64(X, Path, _TrUserData) -> mk_type_error({bad_integer, int64, signed, 64}, X, Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) -> mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} -> mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg -> mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) -> mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,v_type_bytes/3}).
-dialyzer({nowarn_function,v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) -> ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) -> ok;
v_type_bytes(X, Path, _TrUserData) -> mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) -> Path2 = prettify_path(Path), erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) -> list_to_atom(lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{enum, 'pb_ha_iq.Type'}, [{get, 0}, {set, 1}, {result, 2}, {error, 3}]}, {{enum, 'pb_ha_message.Type'}, [{chat, 0}, {error, 1}, {groupchat, 2}, {headline, 3}, {normal, 4}]},
     {{enum, 'pb_ha_presence.Type'}, [{available, 0}, {away, 1}, {subscribe, 2}, {unsubscribe, 3}]}, {{enum, 'pb_client_mode.Mode'}, [{active, 0}, {passive, 1}]}, {{enum, 'pb_contact.Action'}, [{add, 0}, {delete, 1}]},
     {{enum, 'pb_contact.Role'}, [{friend, 0}, {none, 1}]}, {{enum, 'pb_contact_list.Type'}, [{full, 0}, {delta, 1}]}, {{enum, 'pb_feed_item.Action'}, [{publish, 0}, {retract, 1}]},
     {{enum, 'pb_whisper_keys.Action'}, [{normal, 0}, {add, 1}, {count, 2}, {get, 3}, {set, 4}, {update, 5}]}, {{enum, 'pb_push_token.Os'}, [{android, 0}, {ios, 1}, {ios_dev, 2}]},
     {{msg, pb_chat},
      [#field{name = timestamp, fnum = 1, rnum = 2, type = int64, occurrence = optional, opts = []}, #field{name = payload, fnum = 2, rnum = 3, type = bytes, occurrence = optional, opts = []},
       #field{name = enc_payload, fnum = 3, rnum = 4, type = bytes, occurrence = optional, opts = []}]},
     {{msg, pb_ping}, []},
     {{msg, pb_iq_payload},
      [#gpb_oneof{name = content, rnum = 2,
		  fields =
		      [#field{name = upload_media, fnum = 1, rnum = 2, type = {msg, pb_upload_media}, occurrence = optional, opts = []}, #field{name = contact_list, fnum = 2, rnum = 2, type = {msg, pb_contact_list}, occurrence = optional, opts = []},
		       #field{name = upload_avatar, fnum = 3, rnum = 2, type = {msg, pb_upload_avatar}, occurrence = optional, opts = []}, #field{name = avatar, fnum = 4, rnum = 2, type = {msg, pb_avatar}, occurrence = optional, opts = []},
		       #field{name = avatars, fnum = 5, rnum = 2, type = {msg, pb_avatars}, occurrence = optional, opts = []}, #field{name = client_mode, fnum = 6, rnum = 2, type = {msg, pb_client_mode}, occurrence = optional, opts = []},
		       #field{name = client_version, fnum = 7, rnum = 2, type = {msg, pb_client_version}, occurrence = optional, opts = []}, #field{name = push_register, fnum = 8, rnum = 2, type = {msg, pb_push_register}, occurrence = optional, opts = []},
		       #field{name = whisper_keys, fnum = 9, rnum = 2, type = {msg, pb_whisper_keys}, occurrence = optional, opts = []}, #field{name = ping, fnum = 10, rnum = 2, type = {msg, pb_ping}, occurrence = optional, opts = []},
		       #field{name = feed_item, fnum = 11, rnum = 2, type = {msg, pb_feed_item}, occurrence = optional, opts = []}, #field{name = feed_node_items, fnum = 12, rnum = 2, type = {msg, pb_feed_node_items}, occurrence = optional, opts = []}]}]},
     {{msg, pb_msg_payload},
      [#gpb_oneof{name = content, rnum = 2,
		  fields =
		      [#field{name = contact_list, fnum = 1, rnum = 2, type = {msg, pb_contact_list}, occurrence = optional, opts = []}, #field{name = avatar, fnum = 2, rnum = 2, type = {msg, pb_avatar}, occurrence = optional, opts = []},
		       #field{name = whisper_keys, fnum = 3, rnum = 2, type = {msg, pb_whisper_keys}, occurrence = optional, opts = []}, #field{name = seen, fnum = 4, rnum = 2, type = {msg, pb_seen_receipt}, occurrence = optional, opts = []},
		       #field{name = delivery, fnum = 5, rnum = 2, type = {msg, pb_delivery_receipt}, occurrence = optional, opts = []}, #field{name = chat, fnum = 6, rnum = 2, type = {msg, pb_chat}, occurrence = optional, opts = []},
		       #field{name = feed_item, fnum = 7, rnum = 2, type = {msg, pb_feed_item}, occurrence = optional, opts = []}, #field{name = feed_node_items, fnum = 8, rnum = 2, type = {msg, pb_feed_node_items}, occurrence = optional, opts = []}]}]},
     {{msg, pb_ha_iq},
      [#field{name = id, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = type, fnum = 2, rnum = 3, type = {enum, 'pb_ha_iq.Type'}, occurrence = optional, opts = []},
       #field{name = payload, fnum = 3, rnum = 4, type = {msg, pb_iq_payload}, occurrence = optional, opts = []}]},
     {{msg, pb_ha_message},
      [#field{name = id, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = type, fnum = 2, rnum = 3, type = {enum, 'pb_ha_message.Type'}, occurrence = optional, opts = []},
       #field{name = to_uid, fnum = 3, rnum = 4, type = int64, occurrence = optional, opts = []}, #field{name = from_uid, fnum = 4, rnum = 5, type = int64, occurrence = optional, opts = []},
       #field{name = payload, fnum = 5, rnum = 6, type = {msg, pb_msg_payload}, occurrence = optional, opts = []}]},
     {{msg, pb_ha_presence},
      [#field{name = id, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = type, fnum = 2, rnum = 3, type = {enum, 'pb_ha_presence.Type'}, occurrence = optional, opts = []},
       #field{name = uid, fnum = 3, rnum = 4, type = int64, occurrence = optional, opts = []}, #field{name = last_seen, fnum = 4, rnum = 5, type = int64, occurrence = optional, opts = []}]},
     {{msg, pb_ha_ack}, [#field{name = id, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = timestamp, fnum = 2, rnum = 3, type = int64, occurrence = optional, opts = []}]},
     {{msg, pb_ha_error}, [#field{name = reason, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}]},
     {{msg, pb_packet},
      [#gpb_oneof{name = stanza, rnum = 2,
		  fields =
		      [#field{name = msg, fnum = 1, rnum = 2, type = {msg, pb_ha_message}, occurrence = optional, opts = []}, #field{name = iq, fnum = 2, rnum = 2, type = {msg, pb_ha_iq}, occurrence = optional, opts = []},
		       #field{name = ack, fnum = 3, rnum = 2, type = {msg, pb_ha_ack}, occurrence = optional, opts = []}, #field{name = presence, fnum = 4, rnum = 2, type = {msg, pb_ha_presence}, occurrence = optional, opts = []},
		       #field{name = error, fnum = 5, rnum = 2, type = {msg, pb_ha_error}, occurrence = optional, opts = []}]}]},
     {{msg, pb_auth_request},
      [#field{name = uid, fnum = 1, rnum = 2, type = int64, occurrence = optional, opts = []}, #field{name = pwd, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
       #field{name = cm, fnum = 3, rnum = 4, type = {msg, pb_client_mode}, occurrence = optional, opts = []}, #field{name = cv, fnum = 4, rnum = 5, type = {msg, pb_client_version}, occurrence = optional, opts = []},
       #field{name = resource, fnum = 5, rnum = 6, type = string, occurrence = optional, opts = []}]},
     {{msg, pb_auth_result}, [#field{name = result, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = reason, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []}]},
     {{msg, pb_client_mode}, [#field{name = mode, fnum = 1, rnum = 2, type = {enum, 'pb_client_mode.Mode'}, occurrence = optional, opts = []}]},
     {{msg, pb_client_version}, [#field{name = version, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = expires_in_seconds, fnum = 2, rnum = 3, type = int64, occurrence = optional, opts = []}]},
     {{msg, pb_upload_avatar}, [#field{name = id, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = data, fnum = 2, rnum = 3, type = bytes, occurrence = optional, opts = []}]},
     {{msg, pb_avatar}, [#field{name = id, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = uid, fnum = 2, rnum = 3, type = int64, occurrence = optional, opts = []}]},
     {{msg, pb_avatars}, [#field{name = avatars, fnum = 1, rnum = 2, type = {msg, pb_avatar}, occurrence = repeated, opts = []}]},
     {{msg, pb_media_url},
      [#field{name = get, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = put, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
       #field{name = patch, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []}]},
     {{msg, pb_upload_media}, [#field{name = size, fnum = 1, rnum = 2, type = int64, occurrence = optional, opts = []}, #field{name = url, fnum = 2, rnum = 3, type = {msg, pb_media_url}, occurrence = optional, opts = []}]},
     {{msg, pb_contact},
      [#field{name = action, fnum = 1, rnum = 2, type = {enum, 'pb_contact.Action'}, occurrence = optional, opts = []}, #field{name = raw, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
       #field{name = normalized, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []}, #field{name = uid, fnum = 4, rnum = 5, type = int64, occurrence = optional, opts = []},
       #field{name = avatar_id, fnum = 5, rnum = 6, type = string, occurrence = optional, opts = []}, #field{name = role, fnum = 6, rnum = 7, type = {enum, 'pb_contact.Role'}, occurrence = optional, opts = []}]},
     {{msg, pb_contact_list},
      [#field{name = type, fnum = 1, rnum = 2, type = {enum, 'pb_contact_list.Type'}, occurrence = optional, opts = []}, #field{name = sync_id, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
       #field{name = batch_index, fnum = 3, rnum = 4, type = int32, occurrence = optional, opts = []}, #field{name = is_last, fnum = 4, rnum = 5, type = bool, occurrence = optional, opts = []},
       #field{name = contacts, fnum = 5, rnum = 6, type = {msg, pb_contact}, occurrence = repeated, opts = []}]},
     {{msg, pb_seen_receipt},
      [#field{name = id, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = thread_id, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
       #field{name = timestamp, fnum = 3, rnum = 4, type = int64, occurrence = optional, opts = []}]},
     {{msg, pb_delivery_receipt},
      [#field{name = id, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = thread_id, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
       #field{name = timestamp, fnum = 3, rnum = 4, type = int64, occurrence = optional, opts = []}]},
     {{msg, pb_feedpost}, [#field{name = id, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = payload, fnum = 2, rnum = 3, type = bytes, occurrence = optional, opts = []}]},
     {{msg, pb_comment},
      [#field{name = id, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = publisher_uid, fnum = 2, rnum = 3, type = int64, occurrence = optional, opts = []},
       #field{name = publisher_name, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []}, #field{name = post_id, fnum = 4, rnum = 5, type = string, occurrence = optional, opts = []},
       #field{name = payload, fnum = 5, rnum = 6, type = bytes, occurrence = optional, opts = []}]},
     {{msg, pb_feed_item},
      [#field{name = action, fnum = 1, rnum = 2, type = {enum, 'pb_feed_item.Action'}, occurrence = optional, opts = []}, #field{name = timestamp, fnum = 2, rnum = 3, type = int64, occurrence = optional, opts = []},
       #gpb_oneof{name = item, rnum = 4,
		  fields = [#field{name = feedpost, fnum = 3, rnum = 4, type = {msg, pb_feedpost}, occurrence = optional, opts = []}, #field{name = comment, fnum = 4, rnum = 4, type = {msg, pb_comment}, occurrence = optional, opts = []}]}]},
     {{msg, pb_feed_node_items}, [#field{name = uid, fnum = 1, rnum = 2, type = int64, occurrence = optional, opts = []}, #field{name = items, fnum = 2, rnum = 3, type = {msg, pb_feed_item}, occurrence = repeated, opts = []}]},
     {{msg, pb_whisper_keys},
      [#field{name = uid, fnum = 1, rnum = 2, type = int64, occurrence = optional, opts = []}, #field{name = action, fnum = 2, rnum = 3, type = {enum, 'pb_whisper_keys.Action'}, occurrence = optional, opts = []},
       #field{name = identity_key, fnum = 3, rnum = 4, type = bytes, occurrence = optional, opts = []}, #field{name = signed_key, fnum = 4, rnum = 5, type = bytes, occurrence = optional, opts = []},
       #field{name = otp_key_count, fnum = 5, rnum = 6, type = int32, occurrence = optional, opts = []}, #field{name = one_time_keys, fnum = 6, rnum = 7, type = bytes, occurrence = repeated, opts = []}]},
     {{msg, pb_push_token}, [#field{name = os, fnum = 1, rnum = 2, type = {enum, 'pb_push_token.Os'}, occurrence = optional, opts = []}, #field{name = token, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []}]},
     {{msg, pb_push_register}, [#field{name = push_token, fnum = 1, rnum = 2, type = {msg, pb_push_token}, occurrence = optional, opts = []}]}].


get_msg_names() ->
    [pb_chat, pb_ping, pb_iq_payload, pb_msg_payload, pb_ha_iq, pb_ha_message, pb_ha_presence, pb_ha_ack, pb_ha_error, pb_packet, pb_auth_request, pb_auth_result, pb_client_mode, pb_client_version, pb_upload_avatar, pb_avatar, pb_avatars, pb_media_url,
     pb_upload_media, pb_contact, pb_contact_list, pb_seen_receipt, pb_delivery_receipt, pb_feedpost, pb_comment, pb_feed_item, pb_feed_node_items, pb_whisper_keys, pb_push_token, pb_push_register].


get_group_names() -> [].


get_msg_or_group_names() ->
    [pb_chat, pb_ping, pb_iq_payload, pb_msg_payload, pb_ha_iq, pb_ha_message, pb_ha_presence, pb_ha_ack, pb_ha_error, pb_packet, pb_auth_request, pb_auth_result, pb_client_mode, pb_client_version, pb_upload_avatar, pb_avatar, pb_avatars, pb_media_url,
     pb_upload_media, pb_contact, pb_contact_list, pb_seen_receipt, pb_delivery_receipt, pb_feedpost, pb_comment, pb_feed_item, pb_feed_node_items, pb_whisper_keys, pb_push_token, pb_push_register].


get_enum_names() -> ['pb_ha_iq.Type', 'pb_ha_message.Type', 'pb_ha_presence.Type', 'pb_client_mode.Mode', 'pb_contact.Action', 'pb_contact.Role', 'pb_contact_list.Type', 'pb_feed_item.Action', 'pb_whisper_keys.Action', 'pb_push_token.Os'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def(pb_chat) ->
    [#field{name = timestamp, fnum = 1, rnum = 2, type = int64, occurrence = optional, opts = []}, #field{name = payload, fnum = 2, rnum = 3, type = bytes, occurrence = optional, opts = []},
     #field{name = enc_payload, fnum = 3, rnum = 4, type = bytes, occurrence = optional, opts = []}];
find_msg_def(pb_ping) -> [];
find_msg_def(pb_iq_payload) ->
    [#gpb_oneof{name = content, rnum = 2,
		fields =
		    [#field{name = upload_media, fnum = 1, rnum = 2, type = {msg, pb_upload_media}, occurrence = optional, opts = []}, #field{name = contact_list, fnum = 2, rnum = 2, type = {msg, pb_contact_list}, occurrence = optional, opts = []},
		     #field{name = upload_avatar, fnum = 3, rnum = 2, type = {msg, pb_upload_avatar}, occurrence = optional, opts = []}, #field{name = avatar, fnum = 4, rnum = 2, type = {msg, pb_avatar}, occurrence = optional, opts = []},
		     #field{name = avatars, fnum = 5, rnum = 2, type = {msg, pb_avatars}, occurrence = optional, opts = []}, #field{name = client_mode, fnum = 6, rnum = 2, type = {msg, pb_client_mode}, occurrence = optional, opts = []},
		     #field{name = client_version, fnum = 7, rnum = 2, type = {msg, pb_client_version}, occurrence = optional, opts = []}, #field{name = push_register, fnum = 8, rnum = 2, type = {msg, pb_push_register}, occurrence = optional, opts = []},
		     #field{name = whisper_keys, fnum = 9, rnum = 2, type = {msg, pb_whisper_keys}, occurrence = optional, opts = []}, #field{name = ping, fnum = 10, rnum = 2, type = {msg, pb_ping}, occurrence = optional, opts = []},
		     #field{name = feed_item, fnum = 11, rnum = 2, type = {msg, pb_feed_item}, occurrence = optional, opts = []}, #field{name = feed_node_items, fnum = 12, rnum = 2, type = {msg, pb_feed_node_items}, occurrence = optional, opts = []}]}];
find_msg_def(pb_msg_payload) ->
    [#gpb_oneof{name = content, rnum = 2,
		fields =
		    [#field{name = contact_list, fnum = 1, rnum = 2, type = {msg, pb_contact_list}, occurrence = optional, opts = []}, #field{name = avatar, fnum = 2, rnum = 2, type = {msg, pb_avatar}, occurrence = optional, opts = []},
		     #field{name = whisper_keys, fnum = 3, rnum = 2, type = {msg, pb_whisper_keys}, occurrence = optional, opts = []}, #field{name = seen, fnum = 4, rnum = 2, type = {msg, pb_seen_receipt}, occurrence = optional, opts = []},
		     #field{name = delivery, fnum = 5, rnum = 2, type = {msg, pb_delivery_receipt}, occurrence = optional, opts = []}, #field{name = chat, fnum = 6, rnum = 2, type = {msg, pb_chat}, occurrence = optional, opts = []},
		     #field{name = feed_item, fnum = 7, rnum = 2, type = {msg, pb_feed_item}, occurrence = optional, opts = []}, #field{name = feed_node_items, fnum = 8, rnum = 2, type = {msg, pb_feed_node_items}, occurrence = optional, opts = []}]}];
find_msg_def(pb_ha_iq) ->
    [#field{name = id, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = type, fnum = 2, rnum = 3, type = {enum, 'pb_ha_iq.Type'}, occurrence = optional, opts = []},
     #field{name = payload, fnum = 3, rnum = 4, type = {msg, pb_iq_payload}, occurrence = optional, opts = []}];
find_msg_def(pb_ha_message) ->
    [#field{name = id, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = type, fnum = 2, rnum = 3, type = {enum, 'pb_ha_message.Type'}, occurrence = optional, opts = []},
     #field{name = to_uid, fnum = 3, rnum = 4, type = int64, occurrence = optional, opts = []}, #field{name = from_uid, fnum = 4, rnum = 5, type = int64, occurrence = optional, opts = []},
     #field{name = payload, fnum = 5, rnum = 6, type = {msg, pb_msg_payload}, occurrence = optional, opts = []}];
find_msg_def(pb_ha_presence) ->
    [#field{name = id, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = type, fnum = 2, rnum = 3, type = {enum, 'pb_ha_presence.Type'}, occurrence = optional, opts = []},
     #field{name = uid, fnum = 3, rnum = 4, type = int64, occurrence = optional, opts = []}, #field{name = last_seen, fnum = 4, rnum = 5, type = int64, occurrence = optional, opts = []}];
find_msg_def(pb_ha_ack) -> [#field{name = id, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = timestamp, fnum = 2, rnum = 3, type = int64, occurrence = optional, opts = []}];
find_msg_def(pb_ha_error) -> [#field{name = reason, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}];
find_msg_def(pb_packet) ->
    [#gpb_oneof{name = stanza, rnum = 2,
		fields =
		    [#field{name = msg, fnum = 1, rnum = 2, type = {msg, pb_ha_message}, occurrence = optional, opts = []}, #field{name = iq, fnum = 2, rnum = 2, type = {msg, pb_ha_iq}, occurrence = optional, opts = []},
		     #field{name = ack, fnum = 3, rnum = 2, type = {msg, pb_ha_ack}, occurrence = optional, opts = []}, #field{name = presence, fnum = 4, rnum = 2, type = {msg, pb_ha_presence}, occurrence = optional, opts = []},
		     #field{name = error, fnum = 5, rnum = 2, type = {msg, pb_ha_error}, occurrence = optional, opts = []}]}];
find_msg_def(pb_auth_request) ->
    [#field{name = uid, fnum = 1, rnum = 2, type = int64, occurrence = optional, opts = []}, #field{name = pwd, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
     #field{name = cm, fnum = 3, rnum = 4, type = {msg, pb_client_mode}, occurrence = optional, opts = []}, #field{name = cv, fnum = 4, rnum = 5, type = {msg, pb_client_version}, occurrence = optional, opts = []},
     #field{name = resource, fnum = 5, rnum = 6, type = string, occurrence = optional, opts = []}];
find_msg_def(pb_auth_result) -> [#field{name = result, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = reason, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []}];
find_msg_def(pb_client_mode) -> [#field{name = mode, fnum = 1, rnum = 2, type = {enum, 'pb_client_mode.Mode'}, occurrence = optional, opts = []}];
find_msg_def(pb_client_version) -> [#field{name = version, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = expires_in_seconds, fnum = 2, rnum = 3, type = int64, occurrence = optional, opts = []}];
find_msg_def(pb_upload_avatar) -> [#field{name = id, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = data, fnum = 2, rnum = 3, type = bytes, occurrence = optional, opts = []}];
find_msg_def(pb_avatar) -> [#field{name = id, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = uid, fnum = 2, rnum = 3, type = int64, occurrence = optional, opts = []}];
find_msg_def(pb_avatars) -> [#field{name = avatars, fnum = 1, rnum = 2, type = {msg, pb_avatar}, occurrence = repeated, opts = []}];
find_msg_def(pb_media_url) ->
    [#field{name = get, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = put, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
     #field{name = patch, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []}];
find_msg_def(pb_upload_media) -> [#field{name = size, fnum = 1, rnum = 2, type = int64, occurrence = optional, opts = []}, #field{name = url, fnum = 2, rnum = 3, type = {msg, pb_media_url}, occurrence = optional, opts = []}];
find_msg_def(pb_contact) ->
    [#field{name = action, fnum = 1, rnum = 2, type = {enum, 'pb_contact.Action'}, occurrence = optional, opts = []}, #field{name = raw, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
     #field{name = normalized, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []}, #field{name = uid, fnum = 4, rnum = 5, type = int64, occurrence = optional, opts = []},
     #field{name = avatar_id, fnum = 5, rnum = 6, type = string, occurrence = optional, opts = []}, #field{name = role, fnum = 6, rnum = 7, type = {enum, 'pb_contact.Role'}, occurrence = optional, opts = []}];
find_msg_def(pb_contact_list) ->
    [#field{name = type, fnum = 1, rnum = 2, type = {enum, 'pb_contact_list.Type'}, occurrence = optional, opts = []}, #field{name = sync_id, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
     #field{name = batch_index, fnum = 3, rnum = 4, type = int32, occurrence = optional, opts = []}, #field{name = is_last, fnum = 4, rnum = 5, type = bool, occurrence = optional, opts = []},
     #field{name = contacts, fnum = 5, rnum = 6, type = {msg, pb_contact}, occurrence = repeated, opts = []}];
find_msg_def(pb_seen_receipt) ->
    [#field{name = id, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = thread_id, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
     #field{name = timestamp, fnum = 3, rnum = 4, type = int64, occurrence = optional, opts = []}];
find_msg_def(pb_delivery_receipt) ->
    [#field{name = id, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = thread_id, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
     #field{name = timestamp, fnum = 3, rnum = 4, type = int64, occurrence = optional, opts = []}];
find_msg_def(pb_feedpost) -> [#field{name = id, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = payload, fnum = 2, rnum = 3, type = bytes, occurrence = optional, opts = []}];
find_msg_def(pb_comment) ->
    [#field{name = id, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = publisher_uid, fnum = 2, rnum = 3, type = int64, occurrence = optional, opts = []},
     #field{name = publisher_name, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []}, #field{name = post_id, fnum = 4, rnum = 5, type = string, occurrence = optional, opts = []},
     #field{name = payload, fnum = 5, rnum = 6, type = bytes, occurrence = optional, opts = []}];
find_msg_def(pb_feed_item) ->
    [#field{name = action, fnum = 1, rnum = 2, type = {enum, 'pb_feed_item.Action'}, occurrence = optional, opts = []}, #field{name = timestamp, fnum = 2, rnum = 3, type = int64, occurrence = optional, opts = []},
     #gpb_oneof{name = item, rnum = 4,
		fields = [#field{name = feedpost, fnum = 3, rnum = 4, type = {msg, pb_feedpost}, occurrence = optional, opts = []}, #field{name = comment, fnum = 4, rnum = 4, type = {msg, pb_comment}, occurrence = optional, opts = []}]}];
find_msg_def(pb_feed_node_items) -> [#field{name = uid, fnum = 1, rnum = 2, type = int64, occurrence = optional, opts = []}, #field{name = items, fnum = 2, rnum = 3, type = {msg, pb_feed_item}, occurrence = repeated, opts = []}];
find_msg_def(pb_whisper_keys) ->
    [#field{name = uid, fnum = 1, rnum = 2, type = int64, occurrence = optional, opts = []}, #field{name = action, fnum = 2, rnum = 3, type = {enum, 'pb_whisper_keys.Action'}, occurrence = optional, opts = []},
     #field{name = identity_key, fnum = 3, rnum = 4, type = bytes, occurrence = optional, opts = []}, #field{name = signed_key, fnum = 4, rnum = 5, type = bytes, occurrence = optional, opts = []},
     #field{name = otp_key_count, fnum = 5, rnum = 6, type = int32, occurrence = optional, opts = []}, #field{name = one_time_keys, fnum = 6, rnum = 7, type = bytes, occurrence = repeated, opts = []}];
find_msg_def(pb_push_token) -> [#field{name = os, fnum = 1, rnum = 2, type = {enum, 'pb_push_token.Os'}, occurrence = optional, opts = []}, #field{name = token, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []}];
find_msg_def(pb_push_register) -> [#field{name = push_token, fnum = 1, rnum = 2, type = {msg, pb_push_token}, occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def('pb_ha_iq.Type') -> [{get, 0}, {set, 1}, {result, 2}, {error, 3}];
find_enum_def('pb_ha_message.Type') -> [{chat, 0}, {error, 1}, {groupchat, 2}, {headline, 3}, {normal, 4}];
find_enum_def('pb_ha_presence.Type') -> [{available, 0}, {away, 1}, {subscribe, 2}, {unsubscribe, 3}];
find_enum_def('pb_client_mode.Mode') -> [{active, 0}, {passive, 1}];
find_enum_def('pb_contact.Action') -> [{add, 0}, {delete, 1}];
find_enum_def('pb_contact.Role') -> [{friend, 0}, {none, 1}];
find_enum_def('pb_contact_list.Type') -> [{full, 0}, {delta, 1}];
find_enum_def('pb_feed_item.Action') -> [{publish, 0}, {retract, 1}];
find_enum_def('pb_whisper_keys.Action') -> [{normal, 0}, {add, 1}, {count, 2}, {get, 3}, {set, 4}, {update, 5}];
find_enum_def('pb_push_token.Os') -> [{android, 0}, {ios, 1}, {ios_dev, 2}];
find_enum_def(_) -> error.


enum_symbol_by_value('pb_ha_iq.Type', Value) -> 'enum_symbol_by_value_pb_ha_iq.Type'(Value);
enum_symbol_by_value('pb_ha_message.Type', Value) -> 'enum_symbol_by_value_pb_ha_message.Type'(Value);
enum_symbol_by_value('pb_ha_presence.Type', Value) -> 'enum_symbol_by_value_pb_ha_presence.Type'(Value);
enum_symbol_by_value('pb_client_mode.Mode', Value) -> 'enum_symbol_by_value_pb_client_mode.Mode'(Value);
enum_symbol_by_value('pb_contact.Action', Value) -> 'enum_symbol_by_value_pb_contact.Action'(Value);
enum_symbol_by_value('pb_contact.Role', Value) -> 'enum_symbol_by_value_pb_contact.Role'(Value);
enum_symbol_by_value('pb_contact_list.Type', Value) -> 'enum_symbol_by_value_pb_contact_list.Type'(Value);
enum_symbol_by_value('pb_feed_item.Action', Value) -> 'enum_symbol_by_value_pb_feed_item.Action'(Value);
enum_symbol_by_value('pb_whisper_keys.Action', Value) -> 'enum_symbol_by_value_pb_whisper_keys.Action'(Value);
enum_symbol_by_value('pb_push_token.Os', Value) -> 'enum_symbol_by_value_pb_push_token.Os'(Value).


enum_value_by_symbol('pb_ha_iq.Type', Sym) -> 'enum_value_by_symbol_pb_ha_iq.Type'(Sym);
enum_value_by_symbol('pb_ha_message.Type', Sym) -> 'enum_value_by_symbol_pb_ha_message.Type'(Sym);
enum_value_by_symbol('pb_ha_presence.Type', Sym) -> 'enum_value_by_symbol_pb_ha_presence.Type'(Sym);
enum_value_by_symbol('pb_client_mode.Mode', Sym) -> 'enum_value_by_symbol_pb_client_mode.Mode'(Sym);
enum_value_by_symbol('pb_contact.Action', Sym) -> 'enum_value_by_symbol_pb_contact.Action'(Sym);
enum_value_by_symbol('pb_contact.Role', Sym) -> 'enum_value_by_symbol_pb_contact.Role'(Sym);
enum_value_by_symbol('pb_contact_list.Type', Sym) -> 'enum_value_by_symbol_pb_contact_list.Type'(Sym);
enum_value_by_symbol('pb_feed_item.Action', Sym) -> 'enum_value_by_symbol_pb_feed_item.Action'(Sym);
enum_value_by_symbol('pb_whisper_keys.Action', Sym) -> 'enum_value_by_symbol_pb_whisper_keys.Action'(Sym);
enum_value_by_symbol('pb_push_token.Os', Sym) -> 'enum_value_by_symbol_pb_push_token.Os'(Sym).


'enum_symbol_by_value_pb_ha_iq.Type'(0) -> get;
'enum_symbol_by_value_pb_ha_iq.Type'(1) -> set;
'enum_symbol_by_value_pb_ha_iq.Type'(2) -> result;
'enum_symbol_by_value_pb_ha_iq.Type'(3) -> error.


'enum_value_by_symbol_pb_ha_iq.Type'(get) -> 0;
'enum_value_by_symbol_pb_ha_iq.Type'(set) -> 1;
'enum_value_by_symbol_pb_ha_iq.Type'(result) -> 2;
'enum_value_by_symbol_pb_ha_iq.Type'(error) -> 3.

'enum_symbol_by_value_pb_ha_message.Type'(0) -> chat;
'enum_symbol_by_value_pb_ha_message.Type'(1) -> error;
'enum_symbol_by_value_pb_ha_message.Type'(2) -> groupchat;
'enum_symbol_by_value_pb_ha_message.Type'(3) -> headline;
'enum_symbol_by_value_pb_ha_message.Type'(4) -> normal.


'enum_value_by_symbol_pb_ha_message.Type'(chat) -> 0;
'enum_value_by_symbol_pb_ha_message.Type'(error) -> 1;
'enum_value_by_symbol_pb_ha_message.Type'(groupchat) -> 2;
'enum_value_by_symbol_pb_ha_message.Type'(headline) -> 3;
'enum_value_by_symbol_pb_ha_message.Type'(normal) -> 4.

'enum_symbol_by_value_pb_ha_presence.Type'(0) -> available;
'enum_symbol_by_value_pb_ha_presence.Type'(1) -> away;
'enum_symbol_by_value_pb_ha_presence.Type'(2) -> subscribe;
'enum_symbol_by_value_pb_ha_presence.Type'(3) -> unsubscribe.


'enum_value_by_symbol_pb_ha_presence.Type'(available) -> 0;
'enum_value_by_symbol_pb_ha_presence.Type'(away) -> 1;
'enum_value_by_symbol_pb_ha_presence.Type'(subscribe) -> 2;
'enum_value_by_symbol_pb_ha_presence.Type'(unsubscribe) -> 3.

'enum_symbol_by_value_pb_client_mode.Mode'(0) -> active;
'enum_symbol_by_value_pb_client_mode.Mode'(1) -> passive.


'enum_value_by_symbol_pb_client_mode.Mode'(active) -> 0;
'enum_value_by_symbol_pb_client_mode.Mode'(passive) -> 1.

'enum_symbol_by_value_pb_contact.Action'(0) -> add;
'enum_symbol_by_value_pb_contact.Action'(1) -> delete.


'enum_value_by_symbol_pb_contact.Action'(add) -> 0;
'enum_value_by_symbol_pb_contact.Action'(delete) -> 1.

'enum_symbol_by_value_pb_contact.Role'(0) -> friend;
'enum_symbol_by_value_pb_contact.Role'(1) -> none.


'enum_value_by_symbol_pb_contact.Role'(friend) -> 0;
'enum_value_by_symbol_pb_contact.Role'(none) -> 1.

'enum_symbol_by_value_pb_contact_list.Type'(0) -> full;
'enum_symbol_by_value_pb_contact_list.Type'(1) -> delta.


'enum_value_by_symbol_pb_contact_list.Type'(full) -> 0;
'enum_value_by_symbol_pb_contact_list.Type'(delta) -> 1.

'enum_symbol_by_value_pb_feed_item.Action'(0) -> publish;
'enum_symbol_by_value_pb_feed_item.Action'(1) -> retract.


'enum_value_by_symbol_pb_feed_item.Action'(publish) -> 0;
'enum_value_by_symbol_pb_feed_item.Action'(retract) -> 1.

'enum_symbol_by_value_pb_whisper_keys.Action'(0) -> normal;
'enum_symbol_by_value_pb_whisper_keys.Action'(1) -> add;
'enum_symbol_by_value_pb_whisper_keys.Action'(2) -> count;
'enum_symbol_by_value_pb_whisper_keys.Action'(3) -> get;
'enum_symbol_by_value_pb_whisper_keys.Action'(4) -> set;
'enum_symbol_by_value_pb_whisper_keys.Action'(5) -> update.


'enum_value_by_symbol_pb_whisper_keys.Action'(normal) -> 0;
'enum_value_by_symbol_pb_whisper_keys.Action'(add) -> 1;
'enum_value_by_symbol_pb_whisper_keys.Action'(count) -> 2;
'enum_value_by_symbol_pb_whisper_keys.Action'(get) -> 3;
'enum_value_by_symbol_pb_whisper_keys.Action'(set) -> 4;
'enum_value_by_symbol_pb_whisper_keys.Action'(update) -> 5.

'enum_symbol_by_value_pb_push_token.Os'(0) -> android;
'enum_symbol_by_value_pb_push_token.Os'(1) -> ios;
'enum_symbol_by_value_pb_push_token.Os'(2) -> ios_dev.


'enum_value_by_symbol_pb_push_token.Os'(android) -> 0;
'enum_value_by_symbol_pb_push_token.Os'(ios) -> 1;
'enum_value_by_symbol_pb_push_token.Os'(ios_dev) -> 2.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) -> erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"chat">>) -> pb_chat;
fqbin_to_msg_name(<<"ping">>) -> pb_ping;
fqbin_to_msg_name(<<"iq_payload">>) -> pb_iq_payload;
fqbin_to_msg_name(<<"msg_payload">>) -> pb_msg_payload;
fqbin_to_msg_name(<<"ha_iq">>) -> pb_ha_iq;
fqbin_to_msg_name(<<"ha_message">>) -> pb_ha_message;
fqbin_to_msg_name(<<"ha_presence">>) -> pb_ha_presence;
fqbin_to_msg_name(<<"ha_ack">>) -> pb_ha_ack;
fqbin_to_msg_name(<<"ha_error">>) -> pb_ha_error;
fqbin_to_msg_name(<<"packet">>) -> pb_packet;
fqbin_to_msg_name(<<"auth_request">>) -> pb_auth_request;
fqbin_to_msg_name(<<"auth_result">>) -> pb_auth_result;
fqbin_to_msg_name(<<"client_mode">>) -> pb_client_mode;
fqbin_to_msg_name(<<"client_version">>) -> pb_client_version;
fqbin_to_msg_name(<<"upload_avatar">>) -> pb_upload_avatar;
fqbin_to_msg_name(<<"avatar">>) -> pb_avatar;
fqbin_to_msg_name(<<"avatars">>) -> pb_avatars;
fqbin_to_msg_name(<<"media_url">>) -> pb_media_url;
fqbin_to_msg_name(<<"upload_media">>) -> pb_upload_media;
fqbin_to_msg_name(<<"contact">>) -> pb_contact;
fqbin_to_msg_name(<<"contact_list">>) -> pb_contact_list;
fqbin_to_msg_name(<<"seen_receipt">>) -> pb_seen_receipt;
fqbin_to_msg_name(<<"delivery_receipt">>) -> pb_delivery_receipt;
fqbin_to_msg_name(<<"feedpost">>) -> pb_feedpost;
fqbin_to_msg_name(<<"comment">>) -> pb_comment;
fqbin_to_msg_name(<<"feed_item">>) -> pb_feed_item;
fqbin_to_msg_name(<<"feed_node_items">>) -> pb_feed_node_items;
fqbin_to_msg_name(<<"whisper_keys">>) -> pb_whisper_keys;
fqbin_to_msg_name(<<"push_token">>) -> pb_push_token;
fqbin_to_msg_name(<<"push_register">>) -> pb_push_register;
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin(pb_chat) -> <<"chat">>;
msg_name_to_fqbin(pb_ping) -> <<"ping">>;
msg_name_to_fqbin(pb_iq_payload) -> <<"iq_payload">>;
msg_name_to_fqbin(pb_msg_payload) -> <<"msg_payload">>;
msg_name_to_fqbin(pb_ha_iq) -> <<"ha_iq">>;
msg_name_to_fqbin(pb_ha_message) -> <<"ha_message">>;
msg_name_to_fqbin(pb_ha_presence) -> <<"ha_presence">>;
msg_name_to_fqbin(pb_ha_ack) -> <<"ha_ack">>;
msg_name_to_fqbin(pb_ha_error) -> <<"ha_error">>;
msg_name_to_fqbin(pb_packet) -> <<"packet">>;
msg_name_to_fqbin(pb_auth_request) -> <<"auth_request">>;
msg_name_to_fqbin(pb_auth_result) -> <<"auth_result">>;
msg_name_to_fqbin(pb_client_mode) -> <<"client_mode">>;
msg_name_to_fqbin(pb_client_version) -> <<"client_version">>;
msg_name_to_fqbin(pb_upload_avatar) -> <<"upload_avatar">>;
msg_name_to_fqbin(pb_avatar) -> <<"avatar">>;
msg_name_to_fqbin(pb_avatars) -> <<"avatars">>;
msg_name_to_fqbin(pb_media_url) -> <<"media_url">>;
msg_name_to_fqbin(pb_upload_media) -> <<"upload_media">>;
msg_name_to_fqbin(pb_contact) -> <<"contact">>;
msg_name_to_fqbin(pb_contact_list) -> <<"contact_list">>;
msg_name_to_fqbin(pb_seen_receipt) -> <<"seen_receipt">>;
msg_name_to_fqbin(pb_delivery_receipt) -> <<"delivery_receipt">>;
msg_name_to_fqbin(pb_feedpost) -> <<"feedpost">>;
msg_name_to_fqbin(pb_comment) -> <<"comment">>;
msg_name_to_fqbin(pb_feed_item) -> <<"feed_item">>;
msg_name_to_fqbin(pb_feed_node_items) -> <<"feed_node_items">>;
msg_name_to_fqbin(pb_whisper_keys) -> <<"whisper_keys">>;
msg_name_to_fqbin(pb_push_token) -> <<"push_token">>;
msg_name_to_fqbin(pb_push_register) -> <<"push_register">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"ha_iq.Type">>) -> 'pb_ha_iq.Type';
fqbin_to_enum_name(<<"ha_message.Type">>) -> 'pb_ha_message.Type';
fqbin_to_enum_name(<<"ha_presence.Type">>) -> 'pb_ha_presence.Type';
fqbin_to_enum_name(<<"client_mode.Mode">>) -> 'pb_client_mode.Mode';
fqbin_to_enum_name(<<"contact.Action">>) -> 'pb_contact.Action';
fqbin_to_enum_name(<<"contact.Role">>) -> 'pb_contact.Role';
fqbin_to_enum_name(<<"contact_list.Type">>) -> 'pb_contact_list.Type';
fqbin_to_enum_name(<<"feed_item.Action">>) -> 'pb_feed_item.Action';
fqbin_to_enum_name(<<"whisper_keys.Action">>) -> 'pb_whisper_keys.Action';
fqbin_to_enum_name(<<"push_token.Os">>) -> 'pb_push_token.Os';
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('pb_ha_iq.Type') -> <<"ha_iq.Type">>;
enum_name_to_fqbin('pb_ha_message.Type') -> <<"ha_message.Type">>;
enum_name_to_fqbin('pb_ha_presence.Type') -> <<"ha_presence.Type">>;
enum_name_to_fqbin('pb_client_mode.Mode') -> <<"client_mode.Mode">>;
enum_name_to_fqbin('pb_contact.Action') -> <<"contact.Action">>;
enum_name_to_fqbin('pb_contact.Role') -> <<"contact.Role">>;
enum_name_to_fqbin('pb_contact_list.Type') -> <<"contact_list.Type">>;
enum_name_to_fqbin('pb_feed_item.Action') -> <<"feed_item.Action">>;
enum_name_to_fqbin('pb_whisper_keys.Action') -> <<"whisper_keys.Action">>;
enum_name_to_fqbin('pb_push_token.Os') -> <<"push_token.Os">>;
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_package_name() -> undefined.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "packets.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["packets.proto", "ha_auth.proto", "client_info.proto", "avatar.proto", "media_upload.proto", "contact.proto", "receipts.proto", "feed_items.proto", "whisper_keys.proto", "push.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["packets", "ha_auth", "client_info", "avatar", "media_upload", "contact", "receipts", "feed_items", "whisper_keys", "push"].


get_msg_containment("packets") -> [pb_chat, pb_ha_ack, pb_ha_error, pb_ha_iq, pb_ha_message, pb_ha_presence, pb_iq_payload, pb_msg_payload, pb_packet, pb_ping];
get_msg_containment("ha_auth") -> [pb_auth_request, pb_auth_result];
get_msg_containment("client_info") -> [pb_client_mode, pb_client_version];
get_msg_containment("avatar") -> [pb_avatar, pb_avatars, pb_upload_avatar];
get_msg_containment("media_upload") -> [pb_media_url, pb_upload_media];
get_msg_containment("contact") -> [pb_contact, pb_contact_list];
get_msg_containment("receipts") -> [pb_delivery_receipt, pb_seen_receipt];
get_msg_containment("feed_items") -> [pb_comment, pb_feed_item, pb_feed_node_items, pb_feedpost];
get_msg_containment("whisper_keys") -> [pb_whisper_keys];
get_msg_containment("push") -> [pb_push_register, pb_push_token];
get_msg_containment(P) -> error({gpb_error, {badproto, P}}).


get_pkg_containment("packets") -> undefined;
get_pkg_containment("ha_auth") -> undefined;
get_pkg_containment("client_info") -> undefined;
get_pkg_containment("avatar") -> undefined;
get_pkg_containment("media_upload") -> undefined;
get_pkg_containment("contact") -> undefined;
get_pkg_containment("receipts") -> undefined;
get_pkg_containment("feed_items") -> undefined;
get_pkg_containment("whisper_keys") -> undefined;
get_pkg_containment("push") -> undefined;
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).


get_service_containment("packets") -> [];
get_service_containment("ha_auth") -> [];
get_service_containment("client_info") -> [];
get_service_containment("avatar") -> [];
get_service_containment("media_upload") -> [];
get_service_containment("contact") -> [];
get_service_containment("receipts") -> [];
get_service_containment("feed_items") -> [];
get_service_containment("whisper_keys") -> [];
get_service_containment("push") -> [];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).


get_rpc_containment("packets") -> [];
get_rpc_containment("ha_auth") -> [];
get_rpc_containment("client_info") -> [];
get_rpc_containment("avatar") -> [];
get_rpc_containment("media_upload") -> [];
get_rpc_containment("contact") -> [];
get_rpc_containment("receipts") -> [];
get_rpc_containment("feed_items") -> [];
get_rpc_containment("whisper_keys") -> [];
get_rpc_containment("push") -> [];
get_rpc_containment(P) -> error({gpb_error, {badproto, P}}).


get_enum_containment("packets") -> ['pb_ha_iq.Type', 'pb_ha_message.Type', 'pb_ha_presence.Type'];
get_enum_containment("ha_auth") -> [];
get_enum_containment("client_info") -> ['pb_client_mode.Mode'];
get_enum_containment("avatar") -> [];
get_enum_containment("media_upload") -> [];
get_enum_containment("contact") -> ['pb_contact.Action', 'pb_contact.Role', 'pb_contact_list.Type'];
get_enum_containment("receipts") -> [];
get_enum_containment("feed_items") -> ['pb_feed_item.Action'];
get_enum_containment("whisper_keys") -> ['pb_whisper_keys.Action'];
get_enum_containment("push") -> ['pb_push_token.Os'];
get_enum_containment(P) -> error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"upload_media">>) -> "media_upload";
get_proto_by_msg_name_as_fqbin(<<"ha_iq">>) -> "packets";
get_proto_by_msg_name_as_fqbin(<<"push_register">>) -> "push";
get_proto_by_msg_name_as_fqbin(<<"upload_avatar">>) -> "avatar";
get_proto_by_msg_name_as_fqbin(<<"avatar">>) -> "avatar";
get_proto_by_msg_name_as_fqbin(<<"ha_error">>) -> "packets";
get_proto_by_msg_name_as_fqbin(<<"whisper_keys">>) -> "whisper_keys";
get_proto_by_msg_name_as_fqbin(<<"feed_node_items">>) -> "feed_items";
get_proto_by_msg_name_as_fqbin(<<"avatars">>) -> "avatar";
get_proto_by_msg_name_as_fqbin(<<"feedpost">>) -> "feed_items";
get_proto_by_msg_name_as_fqbin(<<"comment">>) -> "feed_items";
get_proto_by_msg_name_as_fqbin(<<"seen_receipt">>) -> "receipts";
get_proto_by_msg_name_as_fqbin(<<"delivery_receipt">>) -> "receipts";
get_proto_by_msg_name_as_fqbin(<<"contact_list">>) -> "contact";
get_proto_by_msg_name_as_fqbin(<<"contact">>) -> "contact";
get_proto_by_msg_name_as_fqbin(<<"auth_result">>) -> "ha_auth";
get_proto_by_msg_name_as_fqbin(<<"auth_request">>) -> "ha_auth";
get_proto_by_msg_name_as_fqbin(<<"packet">>) -> "packets";
get_proto_by_msg_name_as_fqbin(<<"msg_payload">>) -> "packets";
get_proto_by_msg_name_as_fqbin(<<"iq_payload">>) -> "packets";
get_proto_by_msg_name_as_fqbin(<<"chat">>) -> "packets";
get_proto_by_msg_name_as_fqbin(<<"client_mode">>) -> "client_info";
get_proto_by_msg_name_as_fqbin(<<"ha_presence">>) -> "packets";
get_proto_by_msg_name_as_fqbin(<<"ha_message">>) -> "packets";
get_proto_by_msg_name_as_fqbin(<<"ping">>) -> "packets";
get_proto_by_msg_name_as_fqbin(<<"ha_ack">>) -> "packets";
get_proto_by_msg_name_as_fqbin(<<"media_url">>) -> "media_upload";
get_proto_by_msg_name_as_fqbin(<<"feed_item">>) -> "feed_items";
get_proto_by_msg_name_as_fqbin(<<"push_token">>) -> "push";
get_proto_by_msg_name_as_fqbin(<<"client_version">>) -> "client_info";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"push_token.Os">>) -> "push";
get_proto_by_enum_name_as_fqbin(<<"contact_list.Type">>) -> "contact";
get_proto_by_enum_name_as_fqbin(<<"contact.Role">>) -> "contact";
get_proto_by_enum_name_as_fqbin(<<"client_mode.Mode">>) -> "client_info";
get_proto_by_enum_name_as_fqbin(<<"ha_presence.Type">>) -> "packets";
get_proto_by_enum_name_as_fqbin(<<"ha_message.Type">>) -> "packets";
get_proto_by_enum_name_as_fqbin(<<"ha_iq.Type">>) -> "packets";
get_proto_by_enum_name_as_fqbin(<<"whisper_keys.Action">>) -> "whisper_keys";
get_proto_by_enum_name_as_fqbin(<<"feed_item.Action">>) -> "feed_items";
get_proto_by_enum_name_as_fqbin(<<"contact.Action">>) -> "contact";
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.13.0".

gpb_version_as_list() ->
    [4,13,0].
