syntax = "proto3";


import "ha_auth.proto";
import "avatar.proto";
import "media_upload.proto";
import "contact.proto";
import "receipts.proto";
import "feed_items.proto";
import "whisper_keys.proto";
import "push.proto";
import "privacy_list.proto";
import "client_info.proto";
import "group_stanzas.proto";
import "client_log.proto";
import "server_props.proto";
import "invite.proto";


// Chat

message chat {
    int64 timestamp = 1;
    bytes payload = 2;
    bytes enc_payload = 3;
    // Temporarily added two payloads: one is for unecrypted and the other is encrypted.
    // Clients currently send both of them at times.
    bytes public_key = 4;
    int64 one_time_pre_key_id = 5;
}


// Ping

message ping {
}


// Error

message error {
    string reason = 1;
}


// Name

message name {
    int64 uid = 1;
    string name = 2;
}


// Payload for iq/message

message iq_payload {
    oneof content {
        upload_media upload_media = 1;
        contact_list contact_list = 2;
        upload_avatar upload_avatar = 3;
        avatar avatar = 4;
        avatars avatars = 5;
        client_mode client_mode = 6;
        client_version client_version = 7;
        push_register push_register = 8;
        whisper_keys whisper_keys = 9;
        ping ping = 10;
        feed_item feed_item = 11;
        privacy_list privacy_list = 12;
        privacy_list_result privacy_list_result = 13;
        privacy_lists privacy_lists = 14;
        group_stanza group_stanza = 15;
        groups_stanza groups_stanza = 16;
        client_log client_log = 17;
        name name = 18;
        error error = 19;
        props props = 20;
        invites invites = 21;
    }
}

message msg_payload {
    oneof content {
        contact_list contact_list = 1;
        avatar avatar = 2;
        whisper_keys whisper_keys = 3;
        seen_receipt seen = 4;
        delivery_receipt delivery = 5;
        chat chat = 6;
        feed_item feed_item = 7;
        feed_items feed_items = 8;
        contact_hash contact_hash = 9;
        group_stanza group_stanza = 10;
        group_chat group_chat = 11;
        name name = 12;
        error error = 13;
    }
}


// IQ

message ha_iq {
    string id = 1;
    enum Type {
        get = 0;
        set = 1;
        result = 2;
        error = 3;
    }
    Type type = 2;
    iq_payload payload = 3;
}


// Message

message ha_message {
    string id = 1;
    enum Type {
        normal = 0;
        error = 1;
        groupchat = 2;
        headline = 3;
        chat = 4;       // Not used yet.
    }
    Type type = 2;
    int64 to_uid = 3;
    int64 from_uid = 4;
    msg_payload payload = 5;
}


// Presence

message ha_presence {
    string id = 1;
    enum Type {
        available = 0;
        away = 1;
        subscribe = 2;
        unsubscribe = 3;
    }
    Type type = 2;
    int64 uid = 3;
    int64 last_seen = 4;
}


// Chat State

message ha_chat_state {
    enum Type {
        available = 0;
        typing = 1;
    }
    Type type = 1;
    string thread_id = 2;
    enum ThreadType {
        chat = 0;
        group_chat = 1;
    }
    ThreadType thread_type = 3;
    int64 from_uid = 4;
}


// Ack

message ha_ack {
    string id = 1;
    int64 timestamp = 2;
}


// Error packet: Only to be sent by the server to the client.

message ha_error {
    string reason = 1;
}


// Super Packet

message packet {
    oneof stanza {
        ha_message msg = 1;
        ha_iq iq = 2;
        ha_ack ack = 3;
        ha_presence presence = 4;
        ha_error error = 5;
        ha_chat_state chat_state = 6;
    }
}



